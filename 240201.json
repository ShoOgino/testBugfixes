{"path":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}