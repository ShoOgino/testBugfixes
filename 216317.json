{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(expected.getValueCount(), 0);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n\n    // compare ord lists\n    while (true) {\n      int docID = expected.nextDoc();\n      if (docID == NO_MORE_DOCS) {\n        assertEquals(NO_MORE_DOCS, actual.nextDoc());\n        break;\n      }\n      assertEquals(docID, actual.nextDoc());\n      assertEquals(expected.ordValue(), actual.ordValue());\n      assertEquals(expected.binaryValue(), actual.binaryValue());\n    }\n    \n    // compare ord dictionary\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      final BytesRef expectedBytes = BytesRef.deepCopyOf(expected.lookupOrd((int) i));\n      final BytesRef actualBytes = actual.lookupOrd((int) i);\n      assertEquals(expectedBytes, actualBytes);\n    }\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), actual.termsEnum());\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(expected.getValueCount(), 0);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n\n    // compare ord lists\n    while (true) {\n      int docID = expected.nextDoc();\n      if (docID == NO_MORE_DOCS) {\n        assertEquals(NO_MORE_DOCS, actual.nextDoc());\n        break;\n      }\n      assertEquals(docID, actual.nextDoc());\n      assertEquals(expected.ordValue(), actual.ordValue());\n      assertEquals(expected.binaryValue(), actual.binaryValue());\n    }\n    \n    // compare ord dictionary\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      final BytesRef expectedBytes = BytesRef.deepCopyOf(expected.lookupOrd((int) i));\n      final BytesRef actualBytes = actual.lookupOrd((int) i);\n      assertEquals(expectedBytes, actualBytes);\n    }\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), actual.termsEnum());\n  }\n\n","sourceOld":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    assertEquals(maxDoc, DocValues.singleton(expected), DocValues.singleton(actual));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#assertEquals(int,SortedDocValues,SortedDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEquals(int maxDoc, SortedDocValues expected, SortedDocValues actual) throws Exception {\n    // can be null for the segment if no docs actually had any SortedDocValues\n    // in this case FC.getDocTermsOrds returns EMPTY\n    if (actual == null) {\n      assertEquals(expected.getValueCount(), 0);\n      return;\n    }\n    assertEquals(expected.getValueCount(), actual.getValueCount());\n\n    // compare ord lists\n    while (true) {\n      int docID = expected.nextDoc();\n      if (docID == NO_MORE_DOCS) {\n        assertEquals(NO_MORE_DOCS, actual.nextDoc());\n        break;\n      }\n      assertEquals(docID, actual.nextDoc());\n      assertEquals(expected.ordValue(), actual.ordValue());\n      assertEquals(expected.binaryValue(), actual.binaryValue());\n    }\n    \n    // compare ord dictionary\n    for (long i = 0; i < expected.getValueCount(); i++) {\n      final BytesRef expectedBytes = BytesRef.deepCopyOf(expected.lookupOrd((int) i));\n      final BytesRef actualBytes = actual.lookupOrd((int) i);\n      assertEquals(expectedBytes, actualBytes);\n    }\n    \n    // compare termsenum\n    assertEquals(expected.getValueCount(), expected.termsEnum(), actual.termsEnum());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}