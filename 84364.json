{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"/dev/null","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":null,"sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"/dev/null","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","date":1269556173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":" @Test\n public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2357468592d1527388bc71289599401d0783149","date":1299618024,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":" @Test\n public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":" @Test\n public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":" @Test\n public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testFaceting().mjava","sourceNew":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","sourceOld":"  @Test\n  public void testFaceting() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(10);\n    for( int i=1; i<=10; i++ ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", i+\"\", 1.0f );\n      if( (i%2)==0 ) {\n        doc.addField( \"features\", \"two\" );\n      }\n      if( (i%3)==0 ) {\n        doc.addField( \"features\", \"three\" );\n      }\n      if( (i%4)==0 ) {\n        doc.addField( \"features\", \"four\" );\n      }\n      if( (i%5)==0 ) {\n        doc.addField( \"features\", \"five\" );\n      }\n      docs.add( doc );\n    }\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.remove( FacetParams.FACET_FIELD );\n    query.addFacetField( \"features\" );\n    query.setFacetMinCount( 0 );\n    query.setFacet( true );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    List<FacetField> facets = rsp.getFacetFields();\n    assertEquals( 1, facets.size() );\n    FacetField ff = facets.get( 0 );\n    assertEquals( \"features\", ff.getName() );\n    // System.out.println( \"111: \"+ff.getValues() );\n    // check all counts\n    assertEquals( \"[two (5), three (3), five (2), four (2)]\", ff.getValues().toString() );\n    \n    // should be the same facets with minCount=0\n    query.setFilterQueries( \"features:two\" );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5), four (2), five (1), three (1)]\", ff.getValues().toString() );\n    \n    // with minCount > 3\n    query.setFacetMinCount( 4 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    assertEquals( \"[two (5)]\", ff.getValues().toString() );\n\n    // with minCount > 3\n    query.setFacetMinCount( -1 );\n    rsp = server.query( query );\n    ff = rsp.getFacetField( \"features\" );\n    \n    // System.out.println( rsp.getResults().getNumFound() + \" :::: 444: \"+ff.getValues() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a2357468592d1527388bc71289599401d0783149":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"c26f00b574427b55127e869b935845554afde1fa":["a2357468592d1527388bc71289599401d0783149","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","a2357468592d1527388bc71289599401d0783149"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a2357468592d1527388bc71289599401d0783149"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","a2357468592d1527388bc71289599401d0783149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a2357468592d1527388bc71289599401d0783149"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a2357468592d1527388bc71289599401d0783149":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["a2357468592d1527388bc71289599401d0783149","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}