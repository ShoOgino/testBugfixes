{"path":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findGoodStepSize(int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findGoodStepSize(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\n  private static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = RandomSample.findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  } // end RandomSample.findGoodStepSize()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findGoodStepSize(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\n  private static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = RandomSample.findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  } // end RandomSample.findGoodStepSize()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findGoodStepSize(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\n  private static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = RandomSample.findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  } // end RandomSample.findGoodStepSize()\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findGoodStepSize(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#findGoodStepSize(int,int).mjava","sourceNew":"  /**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\n  private static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  }\n\n","sourceOld":"  /**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\n  private static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = RandomSample.findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  } // end RandomSample.findGoodStepSize()\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99b17503f4e360f8140fe80a593268486cd718b4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99b17503f4e360f8140fe80a593268486cd718b4"]},"commit2Childs":{"99b17503f4e360f8140fe80a593268486cd718b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["99b17503f4e360f8140fe80a593268486cd718b4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}