{"path":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#waitColAndAlias(String,String,String,int).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#waitColAndAlias(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#waitColAndAlias(String,int,String).mjava","sourceNew":"  void waitColAndAlias(String alias, String separator, final String suffix, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + separator + suffix;\n    waitCol(slices, collection);\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!haveCollection(alias, collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","sourceOld":"  private void waitColAndAlias(final String datePart, int slices, String alias) throws InterruptedException {\n    // collection to exist\n    String collection = alias + \"_\" + datePart;\n    waitCol(slices, collection);\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!haveCollection(alias, collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#waitColAndAlias(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#waitColAndAlias(String,String,String,int).mjava","sourceNew":"  void waitColAndAlias(String alias, String separator, final String suffix, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + separator + suffix;\n    waitCol(slices, collection);\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!haveCollection(alias, collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    try {\n      DocCollection confirmCollection = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collection);\n      assertNotNull(\"Unable to find collection we were waiting for after done waiting\",confirmCollection);\n    } catch (IOException e) {\n      fail(\"exception getting collection we were waiting for and have supposedly created already\");\n    }\n  }\n\n","sourceOld":"  void waitColAndAlias(String alias, String separator, final String suffix, int slices) throws InterruptedException {\n    // collection to exist\n    String collection = alias + separator + suffix;\n    waitCol(slices, collection);\n    // and alias to be aware of collection\n    long start = System.nanoTime(); // mumble mumble precommit mumble mumble...\n    while (!haveCollection(alias, collection)) {\n      if (NANOSECONDS.toSeconds(System.nanoTime() - start) > 10) {\n        fail(\"took over 10 seconds after collection creation to update aliases\");\n      } else {\n        Thread.sleep(500);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}