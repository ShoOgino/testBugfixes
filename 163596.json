{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new HitCollector() {\n      public void collect(int doc, float score) {\n        assertEquals(\"score for doc \" + doc + \" was not correct\", 1.0f, score);\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new MultiReaderHitCollector() {\n      private int base = -1;\n      public void collect(int doc, float score) {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, score);\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new HitCollector() {\n      public void collect(int doc, float score) {\n        assertEquals(\"score for doc \" + doc + \" was not correct\", 1.0f, score);\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new MultiReaderHitCollector() {\n      private int base = -1;\n      public void collect(int doc, float score) {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, score);\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["8b20609f6fb2cd074bd08115b0c3280b9646af7c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}