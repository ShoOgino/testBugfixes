{"path":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[sources1.size()];\n    int i = 0;\n    for (ValueSource source : sources1) {\n      valsArr1[i++] = source.getValues(context, reader);\n    }\n    final DocValues[] valsArr2 = new DocValues[sources2.size()];\n    i = 0;\n    for (ValueSource source : sources2) {\n      valsArr2[i++] = source.getValues(context, reader);\n    }\n\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, valsArr1, valsArr2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr1) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        for (DocValues vals : valsArr2) {\n          sb.append(',');//we will always have valsArr1, else there is an error\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc63d262ba2be06c238acea79df83e8839d8757","date":1258476322,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[sources1.size()];\n    int i = 0;\n    for (ValueSource source : sources1) {\n      valsArr1[i++] = source.getValues(context, reader);\n    }\n    final DocValues[] valsArr2 = new DocValues[sources2.size()];\n    i = 0;\n    for (ValueSource source : sources2) {\n      valsArr2[i++] = source.getValues(context, reader);\n    }\n\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, valsArr1, valsArr2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr1) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        for (DocValues vals : valsArr2) {\n          sb.append(',');//we will always have valsArr1, else there is an error\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[sources1.size()];\n    int i = 0;\n    for (ValueSource source : sources1) {\n      valsArr1[i++] = source.getValues(context, reader);\n    }\n    final DocValues[] valsArr2 = new DocValues[sources2.size()];\n    i = 0;\n    for (ValueSource source : sources2) {\n      valsArr2[i++] = source.getValues(context, reader);\n    }\n\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double) distance(doc, valsArr1, valsArr2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr1) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        for (DocValues vals : valsArr2) {\n          sb.append(',');//we will always have valsArr1, else there is an error\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, reader);\n\n    final DocValues vals2 = source2.getValues(context, reader);\n\n\n\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) doubleVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short)doubleVal(doc);\n      }\n\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues[] valsArr1 = new DocValues[sources1.size()];\n    int i = 0;\n    for (ValueSource source : sources1) {\n      valsArr1[i++] = source.getValues(context, reader);\n    }\n    final DocValues[] valsArr2 = new DocValues[sources2.size()];\n    i = 0;\n    for (ValueSource source : sources2) {\n      valsArr2[i++] = source.getValues(context, reader);\n    }\n\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, valsArr1, valsArr2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr1) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        for (DocValues vals : valsArr2) {\n          sb.append(',');//we will always have valsArr1, else there is an error\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"705f33e5fdd5faefb06e318ed968763f66e8a2b0","date":1262624396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, reader);\n\n    final DocValues vals2 = source2.getValues(context, reader);\n\n\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) doubleVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) doubleVal(doc);\n      }\n\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, reader);\n\n    final DocValues vals2 = source2.getValues(context, reader);\n\n\n\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) doubleVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short)doubleVal(doc);\n      }\n\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/VectorDistanceFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, reader);\n\n    final DocValues vals2 = source2.getValues(context, reader);\n\n\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) doubleVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) doubleVal(doc);\n      }\n\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    final DocValues vals1 = source1.getValues(context, reader);\n\n    final DocValues vals2 = source2.getValues(context, reader);\n\n\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) doubleVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) doubleVal(doc);\n      }\n\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return distance(doc, vals1, vals2);\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(').append(power).append(',');\n        boolean firstTime = true;\n        sb.append(vals1.toString(doc)).append(',');\n        sb.append(vals2.toString(doc));\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["ddc63d262ba2be06c238acea79df83e8839d8757"],"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"ddc63d262ba2be06c238acea79df83e8839d8757":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["705f33e5fdd5faefb06e318ed968763f66e8a2b0"],"705f33e5fdd5faefb06e318ed968763f66e8a2b0":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ddc63d262ba2be06c238acea79df83e8839d8757":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["ddc63d262ba2be06c238acea79df83e8839d8757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}