{"path":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","commits":[{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","pathOld":"solr/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","sourceNew":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","sourceNew":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n  }\n\n","sourceOld":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","sourceNew":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n  }\n\n","sourceOld":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/PluginInfoTest#testChild().mjava","sourceNew":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n  }\n\n","sourceOld":"  @Test\n  public void testChild() throws Exception {\n    Node node = getNode(configWith2Children, \"plugin\");\n    PluginInfo pi = new PluginInfo(node, \"with children\", false, false);\n    PluginInfo childInfo = pi.getChild(\"child\");\n    assertNotNull(childInfo);\n    PluginInfo notExistent = pi.getChild(\"doesnotExist\");\n    assertNull(notExistent);\n    assertTrue( childInfo instanceof PluginInfo );\n    assertTrue((Integer) childInfo.initArgs.get(\"index\") == 0);\n    Node node2 = getNode(configWithNoChildren, \"plugin\");\n    PluginInfo pi2 = new PluginInfo(node2, \"with No Children\", false, false);\n    PluginInfo noChild = pi2.getChild(\"long\");\n    assertNull(noChild);\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["c26f00b574427b55127e869b935845554afde1fa"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["c26f00b574427b55127e869b935845554afde1fa","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c26f00b574427b55127e869b935845554afde1fa","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["c26f00b574427b55127e869b935845554afde1fa"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}