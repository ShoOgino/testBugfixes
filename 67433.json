{"path":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Optimized implementation. */\r\n    public int read(final int[] docs, final int[] freqs) throws IOException {\r\n      while (true) {\r\n        while (current == null) {\r\n          if (pointer < readers.length) {      // try next segment\r\n            base = starts[pointer];\r\n            current = termDocs(pointer++);\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n        int end = current.read(docs, freqs);\r\n        if (end == 0) {          // none left in segment\r\n          current = null;\r\n        } else {            // got some\r\n          final int b = base;        // adjust doc numbers\r\n          for (int i = 0; i < end; i++)\r\n           docs[i] += b;\r\n          return end;\r\n        }\r\n      }\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","sourceNew":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","sourceOld":"    /** Optimized implementation. */\r\n    public int read(final int[] docs, final int[] freqs) throws IOException {\r\n      while (true) {\r\n        while (current == null) {\r\n          if (pointer < readers.length) {      // try next segment\r\n            base = starts[pointer];\r\n            current = termDocs(pointer++);\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n        int end = current.read(docs, freqs);\r\n        if (end == 0) {          // none left in segment\r\n          current = null;\r\n        } else {            // got some\r\n          final int b = base;        // adjust doc numbers\r\n          for (int i = 0; i < end; i++)\r\n           docs[i] += b;\r\n          return end;\r\n        }\r\n      }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399","date":1242319223,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","sourceNew":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","sourceOld":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermDocs#read(int[],int[]).mjava","sourceNew":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","sourceOld":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["520a9bce43d52d77add8f09727f7a698289d6882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}