{"path":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \"+i+\". Explain doc \"+id);\n      log(s.explain(q,sd[i].doc));\n      float expectedScore =  N_DOCS-i;\n      assertEquals(\"score of result \"+i+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId =  inOrder \n        ? id2String(N_DOCS-i) // in-order ==> larger  values first \n        : id2String(i+1);     // reverse  ==> smaller values first \n      assertTrue(\"id of result \"+i+\" shuould be \"+expectedId+\" != \"+score, expectedId.equals(id));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \"+i+\". Explain doc \"+id);\n      log(s.explain(q,sd[i].doc));\n      float expectedScore =  N_DOCS-i;\n      assertEquals(\"score of result \"+i+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId =  inOrder \n        ? id2String(N_DOCS-i) // in-order ==> larger  values first \n        : id2String(i+1);     // reverse  ==> smaller values first \n      assertTrue(\"id of result \"+i+\" shuould be \"+expectedId+\" != \"+score, expectedId.equals(id));\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \"+i+\". Explain doc \"+id);\n      log(s.explain(q,sd[i].doc));\n      float expectedScore =  N_DOCS-i;\n      assertEquals(\"score of result \"+i+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId =  inOrder \n        ? id2String(N_DOCS-i) // in-order ==> larger  values first \n        : id2String(i+1);     // reverse  ==> smaller values first \n      assertTrue(\"id of result \"+i+\" shuould be \"+expectedId+\" != \"+score, expectedId.equals(id));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}