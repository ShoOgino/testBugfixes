{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","commits":[{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"    void processResponses(NamedList<Object> results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n        Set<String> okayExceptions) {\n      // Processes all shard responses\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          processResponse(results, srsp, okayExceptions);\n          Throwable exception = srsp.getException();\n          if (abortOnError && exception != null) {\n            // drain pending requests\n            while (srsp != null) {\n              srsp = shardHandler.takeCompletedOrError();\n            }\n            throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n          }\n        }\n      } while (srsp != null);\n\n      // If request is async wait for the core admin to complete before returning\n      if (asyncId != null) {\n        waitForAsyncCallsToComplete(results);\n        shardAsyncIdByNode.clear();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cea71c99ffc45e829104e4fcbc05e753a127acd","date":1567053248,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","sourceNew":"    void processResponses(NamedList<Object> results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n        Set<String> okayExceptions) {\n      // Processes all shard responses\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          processResponse(results, srsp, okayExceptions);\n          Throwable exception = srsp.getException();\n          if (abortOnError && exception != null) {\n            // drain pending requests\n            while (srsp != null) {\n              srsp = shardHandler.takeCompletedOrError();\n            }\n            throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n          }\n        }\n      } while (srsp != null);\n\n      // If request is async wait for the core admin to complete before returning\n      if (asyncId != null) {\n        waitForAsyncCallsToComplete(results, true, msgOnError);\n        shardAsyncIdByNode.clear();\n      }\n    }\n\n","sourceOld":"    void processResponses(NamedList<Object> results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n        Set<String> okayExceptions) {\n      // Processes all shard responses\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          processResponse(results, srsp, okayExceptions);\n          Throwable exception = srsp.getException();\n          if (abortOnError && exception != null) {\n            // drain pending requests\n            while (srsp != null) {\n              srsp = shardHandler.takeCompletedOrError();\n            }\n            throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n          }\n        }\n      } while (srsp != null);\n\n      // If request is async wait for the core admin to complete before returning\n      if (asyncId != null) {\n        waitForAsyncCallsToComplete(results);\n        shardAsyncIdByNode.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f125a1877bd8a597f490d08013d70f8f4df12e5","date":1567079860,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.ShardRequestTracker#processResponses(NamedList[Object],ShardHandler,boolean,String,Set[String]).mjava","sourceNew":"    void processResponses(NamedList<Object> results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n        Set<String> okayExceptions) {\n      // Processes all shard responses\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          processResponse(results, srsp, okayExceptions);\n          Throwable exception = srsp.getException();\n          if (abortOnError && exception != null) {\n            // drain pending requests\n            while (srsp != null) {\n              srsp = shardHandler.takeCompletedOrError();\n            }\n            throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n          }\n        }\n      } while (srsp != null);\n\n      // If request is async wait for the core admin to complete before returning\n      if (asyncId != null) {\n        waitForAsyncCallsToComplete(results); // TODO: Shouldn't we abort with msgOnError exception when failure?\n        shardAsyncIdByNode.clear();\n      }\n    }\n\n","sourceOld":"    void processResponses(NamedList<Object> results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n        Set<String> okayExceptions) {\n      // Processes all shard responses\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          processResponse(results, srsp, okayExceptions);\n          Throwable exception = srsp.getException();\n          if (abortOnError && exception != null) {\n            // drain pending requests\n            while (srsp != null) {\n              srsp = shardHandler.takeCompletedOrError();\n            }\n            throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n          }\n        }\n      } while (srsp != null);\n\n      // If request is async wait for the core admin to complete before returning\n      if (asyncId != null) {\n        waitForAsyncCallsToComplete(results, true, msgOnError);\n        shardAsyncIdByNode.clear();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f125a1877bd8a597f490d08013d70f8f4df12e5":["0cea71c99ffc45e829104e4fcbc05e753a127acd"],"69e6520a21709190413a63084ed135271aab1a7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cea71c99ffc45e829104e4fcbc05e753a127acd":["69e6520a21709190413a63084ed135271aab1a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f125a1877bd8a597f490d08013d70f8f4df12e5"]},"commit2Childs":{"7f125a1877bd8a597f490d08013d70f8f4df12e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69e6520a21709190413a63084ed135271aab1a7c":["0cea71c99ffc45e829104e4fcbc05e753a127acd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69e6520a21709190413a63084ed135271aab1a7c"],"0cea71c99ffc45e829104e4fcbc05e753a127acd":["7f125a1877bd8a597f490d08013d70f8f4df12e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}