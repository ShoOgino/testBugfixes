{"path":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","commits":[{"id":"bfd0cc64901d14d11b3a33271be4576c37fc539c","date":1386444538,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"/dev/null","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"/dev/null","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5a90c2b3d7c26550680c7bbc2bb159f6c199074","date":1403572617,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on wether frange's \n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on wether frange's \n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d563502961e163558c0a9029518f43f6f7c6911","date":1510681529,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n      // non-cached frange queries should default to post-filtering\n      // (ie: only be computed on candidates of other q/fq restrictions)\n      // regardless of how few/many docs match the frange\n      assertQ(\"query matching 1 doc w/ implicitly post-filtered frange matching all docs\",\n              req(\"q\",\"{!notfoo cache=false}*:*\", // match all...\n                  \"fq\",\"{!frange cache=false l=30 u=30}abs(id_i1)\", // ...restrict to 1 match\n                  // post filter will happily match all docs, but should only be asked about 1...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=1]\");\n      assertEquals(1, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n      //\n      assertQ(\"query matching all docs w/ implicitly post-filtered frange matching no docs\",\n              req(\"q\",\"{!notfoo cache=false}id_i1:[20 TO 39]\", // match some...\n                  \"fq\",\"{!frange cache=false cost=0 l=50}abs(id_i1)\", // ...regular conjunction filter rules out all\n                  // post filter will happily match all docs, but should never be asked...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=0]\");\n      assertEquals(0, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"883a6a16920e6237b9e676d9938e5ab42be2914b","date":1582662073,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SOLR749Test#testHowManyDocsHaveBoostFunctionComputed().mjava","sourceNew":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex boolean query w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n      \n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n      \n      assertQ(\"func in complex boolean query w/ constant scoring mandatory clauses\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 29]^0 +{!frange l=4.5 u=4.5 v='countUsage(func_in_bq,4.5)'})\"),\n              \"//result[@numFound=10]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 10, but could be as high as 11 depending on whether func's\n      // scorer has next() called on it before other clauses skipTo\n      count = CountUsageValueSourceParser.getAndClearCount(\"func_in_bq\");\n      assertTrue(\"func_in_bq: \" + count, (10 <= count && count <= 11));\n\n      // non-cached frange queries should default to post-filtering\n      // (ie: only be computed on candidates of other q/fq restrictions)\n      // regardless of how few/many docs match the frange\n      assertQ(\"query matching 1 doc w/ implicitly post-filtered frange matching all docs\",\n              req(\"q\",\"{!notfoo cache=false}*:*\", // match all...\n                  \"fq\",\"{!frange cache=false l=30 u=30}abs(id_i1)\", // ...restrict to 1 match\n                  // post filter will happily match all docs, but should only be asked about 1...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=1]\");\n      assertEquals(1, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n      //\n      assertQ(\"query matching all docs w/ implicitly post-filtered frange matching no docs\",\n              req(\"q\",\"{!notfoo cache=false}id_i1:[20 TO 39]\", // match some...\n                  \"fq\",\"{!frange cache=false cost=0 l=50}abs(id_i1)\", // ...regular conjunction filter rules out all\n                  // post filter will happily match all docs, but should never be asked...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=0]\");\n      assertEquals(0, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","sourceOld":"  public void testHowManyDocsHaveBoostFunctionComputed() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\",\"\"+i));\n    }\n    assertU(commit());\n\n    // NOTE: we can't rely on the default lucene syntax because \"FooQParser\" is registered as \"lucene\"\n    assertQ(req(\"q\",\"{!notfoo}*:*\"), \"//result[@numFound=100]\");\n    assertQ(req(\"q\",\"{!notfoo}id_i1:[* TO 49]\"), \"//result[@numFound=50]\");\n    try {\n      assertQ(\"query wrapped in boost func should only eval func for query matches\",\n              req(\"q\",\"{!boost b=$boostFunc defType=notfoo}id_i1:[* TO 49]\",\n                  \"boostFunc\", \"countUsage('boost_func',3.4)\"),\n              \"//result[@numFound=50]\");\n      assertEquals(50, CountUsageValueSourceParser.getAndClearCount(\"boost_func\"));\n\n      assertQ(\"func query that is filtered should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(id_i1,countUsage('func_q',4.5))\",\n                  \"fq\", \"{!notfoo}id_i1:[30 TO 59]\"),\n              \"//result[@numFound=30]\");\n      assertEquals(30, CountUsageValueSourceParser.getAndClearCount(\"func_q\"));\n\n      assertQ(\"func query that wraps a query which is also used as a should be evaled only for filtered docs\",\n              req(\"q\",\"{!func}product(query($qq),countUsage('func_q_wrapping_fq',4.5))\",\n                  \"qq\", \"{!notfoo}id_i1:[20 TO 39]\",\n                  \"fq\", \"{!query v=$qq}\"),\n              \"//result[@numFound=20]\");\n      assertEquals(20, CountUsageValueSourceParser.getAndClearCount(\"func_q_wrapping_fq\"));\n\n      assertQ(\"frange in complex bq w/ other mandatory clauses to check skipping\",\n              req(\"q\",\"{!notfoo}(+id_i1:[20 TO 39] -id:25 +{!frange l=4.5 u=4.5 v='countUsage(frange_in_bq,4.5)'})\"),\n              \"//result[@numFound=19]\");\n\n      // don't assume specific clause evaluation ordering.\n      // ideally this is 19, but could be as high as 20 depending on whether frange's\n      // scorer has next() called on it before other clauses skipTo\n      int count = CountUsageValueSourceParser.getAndClearCount(\"frange_in_bq\");\n      assertTrue(\"frange_in_bq: \" + count, (19 <= count && count <= 20));\n\n      // non-cached frange queries should default to post-filtering\n      // (ie: only be computed on candidates of other q/fq restrictions)\n      // regardless of how few/many docs match the frange\n      assertQ(\"query matching 1 doc w/ implicitly post-filtered frange matching all docs\",\n              req(\"q\",\"{!notfoo cache=false}*:*\", // match all...\n                  \"fq\",\"{!frange cache=false l=30 u=30}abs(id_i1)\", // ...restrict to 1 match\n                  // post filter will happily match all docs, but should only be asked about 1...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=1]\");\n      assertEquals(1, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n      //\n      assertQ(\"query matching all docs w/ implicitly post-filtered frange matching no docs\",\n              req(\"q\",\"{!notfoo cache=false}id_i1:[20 TO 39]\", // match some...\n                  \"fq\",\"{!frange cache=false cost=0 l=50}abs(id_i1)\", // ...regular conjunction filter rules out all\n                  // post filter will happily match all docs, but should never be asked...\n                  \"fq\",\"{!frange cache=false l=4.5 u=4.5 v='countUsage(postfilt_match_all,4.5)'})\"),\n              \"//result[@numFound=0]\");\n      assertEquals(0, CountUsageValueSourceParser.getAndClearCount(\"postfilt_match_all\"));\n\n    } finally {\n      CountUsageValueSourceParser.clearCounters();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfd0cc64901d14d11b3a33271be4576c37fc539c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d5a90c2b3d7c26550680c7bbc2bb159f6c199074":["bfd0cc64901d14d11b3a33271be4576c37fc539c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"883a6a16920e6237b9e676d9938e5ab42be2914b":["6d563502961e163558c0a9029518f43f6f7c6911"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfd0cc64901d14d11b3a33271be4576c37fc539c"],"28288370235ed02234a64753cdbf0c6ec096304a":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["883a6a16920e6237b9e676d9938e5ab42be2914b"],"6d563502961e163558c0a9029518f43f6f7c6911":["28288370235ed02234a64753cdbf0c6ec096304a"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["d5a90c2b3d7c26550680c7bbc2bb159f6c199074"]},"commit2Childs":{"bfd0cc64901d14d11b3a33271be4576c37fc539c":["d5a90c2b3d7c26550680c7bbc2bb159f6c199074","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d5a90c2b3d7c26550680c7bbc2bb159f6c199074":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfd0cc64901d14d11b3a33271be4576c37fc539c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"883a6a16920e6237b9e676d9938e5ab42be2914b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"28288370235ed02234a64753cdbf0c6ec096304a":["6d563502961e163558c0a9029518f43f6f7c6911"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6d563502961e163558c0a9029518f43f6f7c6911":["883a6a16920e6237b9e676d9938e5ab42be2914b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}