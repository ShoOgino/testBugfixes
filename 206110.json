{"path":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getRAMBufferSizeMB() == 0.0) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getRAMBufferSizeMB() == 0.0) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}