{"path":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i], v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5f4e87790277826a2aea119328600dfb07761f32","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1da8d55113b689b06716246649de6f62430f15c0":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}