{"path":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","commits":[{"id":"2a4ff4adbb114e3d4c1b09305005237ee1c28a15","date":1483014160,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean(), random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","pathOld":"/dev/null","sourceNew":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean(), random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","sourceNew":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean(), random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","sourceNew":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean(), random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean(), random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLongValuesSource#checkSorts(Query,Sort).mjava","sourceNew":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits.value) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","sourceOld":"  void checkSorts(Query query, Sort sort) throws Exception {\n    int size = TestUtil.nextInt(random(), 1, searcher.getIndexReader().maxDoc() / 5);\n    Sort mutatedSort = convertSortToSortable(sort);\n    TopDocs actual = searcher.search(query, size, mutatedSort, random().nextBoolean());\n    TopDocs expected = searcher.search(query, size, sort, random().nextBoolean());\n\n    CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n\n    if (size < actual.totalHits) {\n      expected = searcher.searchAfter(expected.scoreDocs[size-1], query, size, sort);\n      actual = searcher.searchAfter(actual.scoreDocs[size-1], query, size, mutatedSort);\n      CheckHits.checkEqual(query, expected.scoreDocs, actual.scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2a4ff4adbb114e3d4c1b09305005237ee1c28a15","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4ff4adbb114e3d4c1b09305005237ee1c28a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["2a4ff4adbb114e3d4c1b09305005237ee1c28a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a4ff4adbb114e3d4c1b09305005237ee1c28a15"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a4ff4adbb114e3d4c1b09305005237ee1c28a15","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"2a4ff4adbb114e3d4c1b09305005237ee1c28a15":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}