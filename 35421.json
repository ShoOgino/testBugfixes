{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","commits":[{"id":"2b23c1453febc85f31827ff5d92bb4b8d895d82b","date":1254307450,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    TestFileListEntityProcessor.createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    super.runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    TestFileListEntityProcessor.createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    super.runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    TestFileListEntityProcessor.createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    super.runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    TestFileListEntityProcessor.createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    super.runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    TestFileListEntityProcessor.createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    TestFileListEntityProcessor.createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    super.runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    TestFileListEntityProcessor.createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    super.runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2b23c1453febc85f31827ff5d92bb4b8d895d82b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b23c1453febc85f31827ff5d92bb4b8d895d82b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2b23c1453febc85f31827ff5d92bb4b8d895d82b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2b23c1453febc85f31827ff5d92bb4b8d895d82b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}