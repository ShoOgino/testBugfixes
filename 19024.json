{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMinimumShouldMatch().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMinimumShouldMatch().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testMinimumShouldMatch().mjava","sourceNew":"  public void testMinimumShouldMatch() throws IOException {\n    IntervalsSource source = Intervals.atLeast(3,\n        Intervals.term(\"porridge\"), Intervals.term(\"hot\"), Intervals.term(\"twelve\"),\n        Intervals.term(\"nine\"), Intervals.term(\"pease\"));\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        {0, 2, 1, 3, 2, 4, 6, 11, 7, 17},\n        {3, 5, 4, 6, 5, 7, 6, 11, 7, 21},\n        {},\n        {0, 2, 1, 3, 2, 4, 6, 11, 7, 17, 11, 21},\n        {}\n    });\n\n    assertGaps(source, 1, \"field1\", new int[]{0, 0, 0, 3, 8});\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    MatchesIterator subs = mi.getSubMatches();\n    assertNotNull(subs);\n    assertMatch(subs, 0, 0, 0, 5);\n    assertMatch(subs, 1, 1, 6, 14);\n    assertMatch(subs, 2, 2, 15, 18);\n    assertFalse(subs.next());\n    assertTrue(mi.next());\n    assertTrue(mi.next());\n    assertMatch(mi, 6, 11, 41, 71);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 11, 11, 67, 71);\n\n    assertEquals(3, source.minExtent());\n\n  }\n\n","sourceOld":"  public void testMinimumShouldMatch() throws IOException {\n    IntervalsSource source = Intervals.atLeast(3,\n        Intervals.term(\"porridge\"), Intervals.term(\"hot\"), Intervals.term(\"twelve\"),\n        Intervals.term(\"nine\"), Intervals.term(\"pease\"));\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        {0, 2, 1, 3, 2, 4, 6, 11, 7, 17},\n        {3, 5, 4, 6, 5, 7, 6, 11, 7, 21},\n        {},\n        {0, 2, 1, 3, 2, 4, 6, 11, 7, 17, 11, 21},\n        {}\n    });\n\n    assertGaps(source, 1, \"field1\", new int[]{0, 0, 0, 3, 8});\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    MatchesIterator subs = mi.getSubMatches();\n    assertNotNull(subs);\n    assertMatch(subs, 0, 0, 0, 5);\n    assertMatch(subs, 1, 1, 6, 14);\n    assertMatch(subs, 2, 2, 15, 18);\n    assertFalse(subs.next());\n    assertTrue(mi.next());\n    assertTrue(mi.next());\n    assertMatch(mi, 6, 11, 41, 71);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 11, 11, 67, 71);\n\n    assertEquals(3, source.minExtent());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}