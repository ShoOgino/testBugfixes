{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer());\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","bugFix":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88448324d3a96c5842455dabea63450b697b58f","date":1421779050,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer());\n    vectorsStream.writeVLong(numChunks);\n    vectorsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer());\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b78d8dfe50af510bace3600bfc4cfa0b031f776","date":1598430423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numChunks);\n    metaStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer());\n    vectorsStream.writeVLong(numChunks);\n    vectorsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45264aed0cfa8a8a55ae1292b0e336d29cd88401","date":1600361948,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      numDirtyChunks++; // incomplete: we had to force this flush\n      final long expectedChunkDocs = Math.min(MAX_DOCUMENTS_PER_CHUNK, (long) ((double) chunkSize / termSuffixes.size() * pendingDocs.size()));\n      numDirtyDocs += expectedChunkDocs - pendingDocs.size();\n      flush();\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numDirtyChunks);\n    metaStream.writeVLong(numDirtyDocs);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (!pendingDocs.isEmpty()) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    }\n    if (numDocs != this.numDocs) {\n      throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, vectorsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numChunks);\n    metaStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(vectorsStream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["b88448324d3a96c5842455dabea63450b697b58f"],"5eb2511ababf862ea11e10761c70ee560cd84510":["eda61b1e90b490cc5837200e04c02639a0d272c7","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b88448324d3a96c5842455dabea63450b697b58f":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45264aed0cfa8a8a55ae1292b0e336d29cd88401":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45264aed0cfa8a8a55ae1292b0e336d29cd88401"]},"commit2Childs":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["45264aed0cfa8a8a55ae1292b0e336d29cd88401"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","3a88f37cd0154833b5c58daac509eb8be347d0f2"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6","07155cdd910937cdf6877e48884d5782845c8b8b"],"b88448324d3a96c5842455dabea63450b697b58f":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"45264aed0cfa8a8a55ae1292b0e336d29cd88401":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["b88448324d3a96c5842455dabea63450b697b58f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}