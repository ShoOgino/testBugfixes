{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(int).mjava","sourceNew":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(int).mjava","sourceNew":null,"sourceOld":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#prevSetBit(int).mjava","sourceNew":null,"sourceOld":"  /** Returns the index of the first set bit starting downwards at\n   *  the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public int prevSetBit(int index) {\n    int i = index >> 6;\n    final int subIndex;\n    long word;\n    if (i >= wlen) {\n      i = wlen - 1;\n      if (i < 0) return -1;\n      subIndex = 63;  // last possible bit\n      word = bits[i];\n    } else {\n      if (i < 0) return -1;\n      subIndex = index & 0x3f;  // index within the word\n      word = (bits[i] << (63-subIndex));  // skip all the bits to the left of index\n    }\n\n    if (word != 0) {\n      return (i << 6) + subIndex - Long.numberOfLeadingZeros(word); // See LUCENE-3197\n    }\n\n    while (--i >= 0) {\n      word = bits[i];\n      if (word !=0 ) {\n        return (i << 6) + 63 - Long.numberOfLeadingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}