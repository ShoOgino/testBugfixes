{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","commits":[{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          if (seekCeil(term, false) != SeekStatus.FOUND) {\n            return term;\n          }\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa","date":1373991484,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          SeekStatus status = seekCeil(term, false);\n          assert status == SeekStatus.FOUND;  // must positioned on valid term\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          if (seekCeil(term, false) != SeekStatus.FOUND) {\n            return term;\n          }\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          SeekStatus status = seekCeil(term);\n          assert status == SeekStatus.FOUND;  // must positioned on valid term\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          SeekStatus status = seekCeil(term, false);\n          assert status == SeekStatus.FOUND;  // must positioned on valid term\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.SegmentTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          SeekStatus status = seekCeil(term);\n          assert status == SeekStatus.FOUND;  // must positioned on valid term\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        if (seekPending) {  // previously positioned, but termOutputs not fetched\n          seekPending = false;\n          SeekStatus status = seekCeil(term);\n          assert status == SeekStatus.FOUND;  // must positioned on valid term\n        }\n        updateEnum(fstEnum.next());\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a509b6df968a74c38a0528f5bf6ea26f503b756","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["bd9f4b62b5707a45b44bd7d63ef9448c5eb6efaa"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}