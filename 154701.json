{"path":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","commits":[{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#getAdminCore().mjava","sourceNew":"  /**\n   * Gets a core to handle CoreContainer admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore across calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a core to handle MultiCore admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore accross calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @return the acquired admin core, null if no core is available\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n//      solr-647\n//      if (core != null)\n//        core = core.open();\n      if (core == null) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n//          solr-647\n//          if (core != null)\n//            core = core.open();\n          if (core != null) {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a core to handle CoreContainer admin tasks (@see SolrDispatchFilter).\n   * This makes the best attempt to reuse the same opened SolrCore across calls.\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core == null || core.isClosed()) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n          if (core == null || core.isClosed()) {\n            core = null;\n          } else {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @return the acquired admin core, null if no core is available\n   */\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n//      solr-647\n//      if (core != null)\n//        core = core.open();\n      if (core == null) {\n        for (CoreDescriptor descr : this.cores.values()) {\n          core = descr.getCore();\n//          solr-647\n//          if (core != null)\n//            core = core.open();\n          if (core != null) {\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49","58b41d4093a9662306bdc051e4b46643deff70de","0323fcfcacbfb8242fbf70eb58498551b2018c67"],"bugIntro":["3dad1e1d2281e08bc645a868fad3bb824c7907d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a1078cf12e79f05e2424da47ec80c9ff418ddc1","date":1220033085,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dad1e1d2281e08bc645a868fad3bb824c7907d8","date":1220368170,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null && !core.isClosed()) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            setAdminCore(core);\n            break;\n          }\n        }\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            break;\n          }\n        }\n        setAdminCore(core);\n      }\n      return core;\n    }\n  }\n\n","bugFix":["c28792ff7d1774c306e16afbd44ded91a417049b","0323fcfcacbfb8242fbf70eb58498551b2018c67"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */\n  @Deprecated\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null && !core.isClosed()) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            setAdminCore(core);\n            break;\n          }\n        }\n      }\n      return core;\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */               \n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null && !core.isClosed()) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            setAdminCore(core);\n            break;\n          }\n        }\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c03efd8cfee511e8fabfc468d0dd7c9303be8be","date":1261551327,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/CoreContainer#getAdminCore().mjava","sourceNew":null,"sourceOld":"  /**\n   * Ensures there is a valid core to handle MultiCore admin taks and\n   * increase its refcount.\n   * @see SolrCore#close() \n   * @return the acquired admin core, null if no core is available\n   */\n  @Deprecated\n  public SolrCore getAdminCore() {\n    synchronized (cores) {\n      SolrCore core = adminCore != null ? adminCore.get() : null;\n      if (core != null && !core.isClosed()) {\n        core.open();\n      } else {\n        for (SolrCore c : cores.values()) {\n          if (c != null) {\n            core = c;\n            core.open();\n            setAdminCore(core);\n            break;\n          }\n        }\n      }\n      return core;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dad1e1d2281e08bc645a868fad3bb824c7907d8":["8a1078cf12e79f05e2424da47ec80c9ff418ddc1"],"8a1078cf12e79f05e2424da47ec80c9ff418ddc1":["c28792ff7d1774c306e16afbd44ded91a417049b"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["3dad1e1d2281e08bc645a868fad3bb824c7907d8"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3dad1e1d2281e08bc645a868fad3bb824c7907d8":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"8a1078cf12e79f05e2424da47ec80c9ff418ddc1":["3dad1e1d2281e08bc645a868fad3bb824c7907d8"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["c28792ff7d1774c306e16afbd44ded91a417049b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"c28792ff7d1774c306e16afbd44ded91a417049b":["8a1078cf12e79f05e2424da47ec80c9ff418ddc1"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}