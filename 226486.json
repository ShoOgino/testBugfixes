{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","commits":[{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c68b625b6d40ea28c8d7927c14d1453867cd2a4a","date":1455847572,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(\"Invalid shard: \" + shardName\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shard = shardName;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":3,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shard = shardName;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shardName = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    @Deprecated\n    public CreateShard setShardName(String shardName) {\n      this.shard = SolrIdentifierValidator.validateShardName(shardName);\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    public CreateShard setShardName(String shardName) {\n      if (!SolrIdentifierValidator.validateShardName(shardName)) {\n        throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shardName));\n      }\n      this.shard = shardName;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    @Deprecated\n    public CreateShard setShardName(String shardName) {\n      this.shard = SolrIdentifierValidator.validateShardName(shardName);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    @Deprecated\n    public CreateShard setShardName(String shardName) {\n      this.shard = SolrIdentifierValidator.validateShardName(shardName);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    @Deprecated\n    public CreateShard setShardName(String shardName) {\n      this.shard = SolrIdentifierValidator.validateShardName(shardName);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.CreateShard#setShardName(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Provide the name of the shard to be created.\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if the shard name contains invalid characters.\n     */\n    @Override\n    @Deprecated\n    public CreateShard setShardName(String shardName) {\n      this.shard = SolrIdentifierValidator.validateShardName(shardName);\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac97ea104d893f16aab430d9904473bc1f233f3c":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"3217321f3e1d7922898c6c633d17acfa840d6875":["daed6b66edd950a7f2af9857df64b09acf3deacc","ac97ea104d893f16aab430d9904473bc1f233f3c"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["daed6b66edd950a7f2af9857df64b09acf3deacc","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["daed6b66edd950a7f2af9857df64b09acf3deacc","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["06043fcf612d2cd93636c22cd062e0641406b417"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a","a839eb6696740aa302262e32e6f45b5e70b47bff"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","861a8940601b61a2fd5427f7187314d516ef1586"],"861a8940601b61a2fd5427f7187314d516ef1586":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"06043fcf612d2cd93636c22cd062e0641406b417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3217321f3e1d7922898c6c633d17acfa840d6875"]},"commit2Childs":{"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","861a8940601b61a2fd5427f7187314d516ef1586"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"06043fcf612d2cd93636c22cd062e0641406b417":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}