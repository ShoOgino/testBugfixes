{"path":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e0262a0996adcb51ed5f435abc59085900345e","date":1339953748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":"    private int run(final int base, final IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        return base + reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        int newBase = base;\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          newBase = run(newBase, subReaders[i]);\n        }\n        assert newBase == base + reader.maxDoc();\n        return newBase;\n      }\n    }\n\n","sourceOld":"    private int run(int base, IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        base += reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          base = run(base, subReaders[i]);\n        }\n      }\n\n      return base;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil.Gather#run(int,IndexReader).mjava","sourceNew":null,"sourceOld":"    private int run(final int base, final IndexReader reader) throws IOException {\n      if (reader instanceof AtomicReader) {\n        // atomic reader\n        add(base, (AtomicReader) reader);\n        return base + reader.maxDoc();\n      } else {\n        assert reader instanceof CompositeReader : \"must be a composite reader\";\n        int newBase = base;\n        IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          newBase = run(newBase, subReaders[i]);\n        }\n        assert newBase == base + reader.maxDoc();\n        return newBase;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["64e0262a0996adcb51ed5f435abc59085900345e"],"64e0262a0996adcb51ed5f435abc59085900345e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64e0262a0996adcb51ed5f435abc59085900345e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["64e0262a0996adcb51ed5f435abc59085900345e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}