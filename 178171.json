{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","commits":[{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"/dev/null","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"ab xc\", 50),\n        new TermFreq(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new TermFreqArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"ab xc\", 50),\n        new TermFreqPayload(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"ab xc\", 50),\n        new TermFreq(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new TermFreqArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"ab xc\", 50),\n        new TermFreqPayload(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac252ef8e3d0bbff9303ffbf675e824a729dfaf","date":1537347776,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testInputPathRequired().mjava","sourceNew":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module\n\n    final Analyzer analyzer = new MultiCannedAnalyzer(\n        new CannedTokenStream(\n            token(\"ab\", 1, 1),\n            token(\"ba\", 0, 1),\n            token(\"xc\", 1, 1)),\n        new CannedTokenStream(\n            token(\"ba\", 1, 1),\n            token(\"xd\", 1, 1)),\n        new CannedTokenStream(\n            token(\"ab\",1,1),\n            token(\"ba\",0,1),\n            token(\"x\",1,1)));\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertEquals(1, results.size());\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","sourceOld":"  public void testInputPathRequired() throws Exception {\n\n    //  SynonymMap.Builder b = new SynonymMap.Builder(false);\n    //  b.add(new CharsRef(\"ab\"), new CharsRef(\"ba\"), true);\n    //  final SynonymMap map = b.build();\n\n    //  The Analyzer below mimics the functionality of the SynonymAnalyzer\n    //  using the above map, so that the suggest module does not need a dependency on the \n    //  synonym module \n\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n          int tokenStreamCounter = 0;\n          final TokenStream[] tokenStreams = new TokenStream[] {\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"xc\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ba\",1,1),          \n                token(\"xd\",1,1)\n              }),\n            new CannedTokenStream(new Token[] {\n                token(\"ab\",1,1),\n                token(\"ba\",0,1),\n                token(\"x\",1,1)\n              })\n          };\n\n          @Override\n          public TokenStream getTokenStream() {\n            TokenStream result = tokenStreams[tokenStreamCounter];\n            tokenStreamCounter++;\n            return result;\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) {\n          }\n        };\n      }\n    };\n\n    Input keys[] = new Input[] {\n        new Input(\"ab xc\", 50),\n        new Input(\"ba xd\", 50),\n    };\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    List<LookupResult> results = suggester.lookup(\"ab x\", false, 1);\n    assertTrue(results.size() == 1);\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["6ce825e9276493231308229152c48f755ce1a0a5"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ce825e9276493231308229152c48f755ce1a0a5"],"6ce825e9276493231308229152c48f755ce1a0a5":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}