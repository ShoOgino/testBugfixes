{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","commits":[{"id":"2301a3dfd362544fb58cbb209c7fdc6caa93d793","date":1477455587,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(\"testCollection1\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest\n        .createCollection(\"testCollection2\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(\"testCollection1\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest\n        .createCollection(\"testCollection2\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(\"testCollection1\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest\n        .createCollection(\"testCollection2\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd3313a782bc892efa7f10af81a83cc8c7c41e7","date":1508744732,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    for (int i = 1; i <= 2; i++) {\n      // Create two collections with same order of requests, no parallel\n      // therefore Assign.buildCoreNodeName will create same coreNodeName\n      CollectionAdminRequest\n          .createCollection(\"testCollection\"+i, \"config\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .setCreateNodeSet(\"\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard1\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard2\")\n          .process(cluster.getSolrClient());\n    }\n\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest\n        .createCollection(\"testCollection1\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest\n        .createCollection(\"testCollection2\", \"config\", 2, 1)\n        .setMaxShardsPerNode(1000)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionContextKeyTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    for (int i = 1; i <= 2; i++) {\n      // Create two collections with same order of requests, no parallel\n      // therefore Assign.buildCoreNodeName will create same coreNodeName\n      CollectionAdminRequest\n          .createCollection(\"testCollection\"+i, \"config\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard1\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard2\")\n          .process(cluster.getSolrClient());\n    }\n\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    for (int i = 1; i <= 2; i++) {\n      // Create two collections with same order of requests, no parallel\n      // therefore Assign.buildCoreNodeName will create same coreNodeName\n      CollectionAdminRequest\n          .createCollection(\"testCollection\"+i, \"config\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .setCreateNodeSet(\"\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard1\")\n          .process(cluster.getSolrClient());\n      CollectionAdminRequest\n          .addReplicaToShard(\"testCollection\"+i, \"shard2\")\n          .process(cluster.getSolrClient());\n    }\n\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection1\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"testCollection2\", cluster.getSolrClient().getZkStateReader(),\n        false, true, 30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2301a3dfd362544fb58cbb209c7fdc6caa93d793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2301a3dfd362544fb58cbb209c7fdc6caa93d793"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fdd3313a782bc892efa7f10af81a83cc8c7c41e7"],"fdd3313a782bc892efa7f10af81a83cc8c7c41e7":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"2301a3dfd362544fb58cbb209c7fdc6caa93d793":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2301a3dfd362544fb58cbb209c7fdc6caa93d793","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fdd3313a782bc892efa7f10af81a83cc8c7c41e7"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fdd3313a782bc892efa7f10af81a83cc8c7c41e7":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}