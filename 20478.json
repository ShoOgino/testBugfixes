{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","sourceNew":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n    \n    // Test auto rewrite (but only boolean mode), so we set the limits to large values to always get a BQ\n    final MultiTermQuery.ConstantScoreAutoRewrite rewrite = new MultiTermQuery.ConstantScoreAutoRewrite();\n    rewrite.setTermCountCutoff(Integer.MAX_VALUE);\n    rewrite.setDocCountPercent(100.);\n    checkDuplicateTerms(rewrite);\n  }\n\n","sourceOld":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n    \n    // Test auto rewrite (but only boolean mode), so we set the limits to large values to always get a BQ\n    final MultiTermQuery.ConstantScoreAutoRewrite rewrite = new MultiTermQuery.ConstantScoreAutoRewrite();\n    rewrite.setTermCountCutoff(Integer.MAX_VALUE);\n    rewrite.setDocCountPercent(100.);\n    checkDuplicateTerms(rewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","sourceNew":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","sourceOld":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n    \n    // Test auto rewrite (but only boolean mode), so we set the limits to large values to always get a BQ\n    final MultiTermQuery.ConstantScoreAutoRewrite rewrite = new MultiTermQuery.ConstantScoreAutoRewrite();\n    rewrite.setTermCountCutoff(Integer.MAX_VALUE);\n    rewrite.setDocCountPercent(100.);\n    checkDuplicateTerms(rewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","sourceNew":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","sourceOld":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n    \n    // Test auto rewrite (but only boolean mode), so we set the limits to large values to always get a BQ\n    final MultiTermQuery.ConstantScoreAutoRewrite rewrite = new MultiTermQuery.ConstantScoreAutoRewrite();\n    rewrite.setTermCountCutoff(Integer.MAX_VALUE);\n    rewrite.setDocCountPercent(100.);\n    checkDuplicateTerms(rewrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","sourceNew":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","sourceOld":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms().mjava","sourceNew":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","sourceOld":"  public void testRewritesWithDuplicateTerms() throws Exception {\n    checkDuplicateTerms(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    \n    checkDuplicateTerms(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    \n    // use a large PQ here to only test duplicate terms and dont mix up when all scores are equal\n    checkDuplicateTerms(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(1024));\n    checkDuplicateTerms(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(1024));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}