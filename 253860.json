{"path":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","commits":[{"id":"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15","date":1316561169,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    TopDocs all = searcher.search(query, filter, searcher.maxDoc());\n    int pageSize = _TestUtil.nextInt(random, 1, searcher.maxDoc()*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    TopDocs all = searcher.search(query, filter, searcher.maxDoc());\n    int pageSize = _TestUtil.nextInt(random, 1, searcher.maxDoc()*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    int maxDoc = searcher.getIndexReader().maxDoc();\n    TopDocs all = searcher.search(query, filter, maxDoc);\n    int pageSize = _TestUtil.nextInt(random, 1, maxDoc*2);\n    int pageStart = 0;\n    ScoreDoc lastBottom = null;\n    while (pageStart < all.totalHits) {\n      TopDocs paged = searcher.searchAfter(lastBottom, query, filter, pageSize);\n      if (paged.scoreDocs.length == 0) {\n        break;\n      }\n      assertPage(pageStart, all, paged);\n      pageStart += paged.scoreDocs.length;\n      lastBottom = paged.scoreDocs[paged.scoreDocs.length - 1];\n    }\n    assertEquals(all.scoreDocs.length, pageStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}