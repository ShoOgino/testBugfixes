{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],int).mjava","commits":[{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":1,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, int version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],int).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, int version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      @SuppressWarnings({\"rawtypes\"})\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, int version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}