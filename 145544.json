{"path":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    \n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c","77301f098b899884dd472e6b27fb5f8136189fe3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    \n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b00d44ccb616bf40482a9ba5302cb256c26c6e4c","date":1249308735,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904","5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}