{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","commits":[{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr, aggregator.createOrdinalValueResolver(fr, facetArrays));\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr);\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr, aggregator.createOrdinalValueResolver(fr, facetArrays));\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr, aggregator.createOrdinalValueResolver(fr, facetArrays));\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TaxonomyFacetsAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Used by {@link FacetsCollector} to build the list of {@link FacetResult\n   * facet results} that match the {@link FacetRequest facet requests} that were\n   * given in the constructor.\n   * \n   * @param matchingDocs\n   *          the documents that matched the query, per-segment.\n   */\n  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n    // aggregate facets per category list (usually onle one category list)\n    FacetsAggregator aggregator = getAggregator();\n    for (CategoryListParams clp : groupRequests().keySet()) {\n      for (MatchingDocs md : matchingDocs) {\n        aggregator.aggregate(md, clp, facetArrays);\n      }\n    }\n    \n    ParallelTaxonomyArrays arrays = taxonomyReader.getParallelTaxonomyArrays();\n    \n    // compute top-K\n    final int[] children = arrays.children();\n    final int[] siblings = arrays.siblings();\n    List<FacetResult> res = new ArrayList<FacetResult>();\n    for (FacetRequest fr : searchParams.facetRequests) {\n      int rootOrd = taxonomyReader.getOrdinal(fr.categoryPath);\n      if (rootOrd == TaxonomyReader.INVALID_ORDINAL) { // category does not exist\n        // Add empty FacetResult\n        res.add(emptyResult(rootOrd, fr));\n        continue;\n      }\n      CategoryListParams clp = searchParams.indexingParams.getCategoryListParams(fr.categoryPath);\n      if (fr.categoryPath.length > 0) { // someone might ask to aggregate the ROOT category\n        OrdinalPolicy ordinalPolicy = clp.getOrdinalPolicy(fr.categoryPath.components[0]);\n        if (ordinalPolicy == OrdinalPolicy.NO_PARENTS) {\n          // rollup values\n          aggregator.rollupValues(fr, rootOrd, children, siblings, facetArrays);\n        }\n      }\n      \n      FacetResultsHandler frh = createFacetResultsHandler(fr, aggregator.createOrdinalValueResolver(fr, facetArrays));\n      res.add(frh.compute());\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}