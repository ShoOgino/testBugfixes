{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ebae603cc45d774119bbde5d2a55b7ecae6864","date":1299088531,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      if (insanity.length != 0) {\n        reportAdditionalFailureInfo();\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      if (insanity.length != 0) {\n        reportAdditionalFailureInfo();\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      if (insanity.length != 0) {\n        reportAdditionalFailureInfo();\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n              0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558b125bbf6fa91eb5355da7e849d46edaf735bc","date":1314371299,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      if (insanity.length != 0) {\n        reportAdditionalFailureInfo();\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#assertSaneFieldCaches(String).mjava","sourceNew":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that FieldCacheSanityChecker does not detect any\n   * problems with FieldCache.DEFAULT.\n   * <p>\n   * If any problems are found, they are logged to System.err\n   * (allong with the msg) when the Assertion is thrown.\n   * </p>\n   * <p>\n   * This method is called by tearDown after every test method,\n   * however IndexReaders scoped inside test methods may be garbage\n   * collected prior to this method being called, causing errors to\n   * be overlooked. Tests are encouraged to keep their IndexReaders\n   * scoped at the class level, or to explicitly call this method\n   * directly in the same scope as the IndexReader.\n   * </p>\n   *\n   * @see org.apache.lucene.util.FieldCacheSanityChecker\n   */\n  protected void assertSaneFieldCaches(final String msg) {\n    final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    Insanity[] insanity = null;\n    try {\n      try {\n        insanity = FieldCacheSanityChecker.checkSanity(entries);\n      } catch (RuntimeException e) {\n        dumpArray(msg + \": FieldCache\", entries, System.err);\n        throw e;\n      }\n\n      assertEquals(msg + \": Insane FieldCache usage(s) found\",\n                   0, insanity.length);\n      insanity = null;\n    } finally {\n\n      // report this in the event of any exception/failure\n      // if no failure, then insanity will be null anyway\n      if (null != insanity) {\n        dumpArray(msg + \": Insane FieldCache usage(s)\", insanity, System.err);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["06ebae603cc45d774119bbde5d2a55b7ecae6864"],"2553b00f699380c64959ccb27991289aae87be2e":["06ebae603cc45d774119bbde5d2a55b7ecae6864","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["06ebae603cc45d774119bbde5d2a55b7ecae6864","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","06ebae603cc45d774119bbde5d2a55b7ecae6864"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","06ebae603cc45d774119bbde5d2a55b7ecae6864"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06ebae603cc45d774119bbde5d2a55b7ecae6864":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","558b125bbf6fa91eb5355da7e849d46edaf735bc"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","06ebae603cc45d774119bbde5d2a55b7ecae6864","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["7b91922b55d15444d554721b352861d028eb8278"],"06ebae603cc45d774119bbde5d2a55b7ecae6864":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}