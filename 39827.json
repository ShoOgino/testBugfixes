{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d334938e866757266d62025305edd378ac505a06","d334938e866757266d62025305edd378ac505a06","d334938e866757266d62025305edd378ac505a06","719a344a9f4424f4ca57e4453bb44b954df0a512","719a344a9f4424f4ca57e4453bb44b954df0a512","719a344a9f4424f4ca57e4453bb44b954df0a512","e086a6377e06f1ff139e957e119d766644bbce89","e086a6377e06f1ff139e957e119d766644bbce89","e086a6377e06f1ff139e957e119d766644bbce89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    connect();\n\n    CloudState cloudState = zkStateReader.getCloudState();\n\n    String collection = request.getParams().get(\"collection\", defaultCollection);\n\n    // TODO: allow multiple collections to be specified via comma separated list\n\n    Map<String,Slice> slices = cloudState.getSlices(collection);\n    Set<String> liveNodes = cloudState.getLiveNodes();\n\n    // IDEA: have versions on various things... like a global cloudState version\n    // or shardAddressVersion (which only changes when the shards change)\n    // to allow caching.\n\n    // build a map of unique nodes\n    // TODO: allow filtering by group, role, etc\n    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();\n    List<String> urlList = new ArrayList<String>();\n    for (Slice slice : slices.values()) {\n      for (ZkNodeProps nodeProps : slice.getShards().values()) {\n        String node = nodeProps.get(ZkStateReader.NODE_NAME);\n        if (!liveNodes.contains(node)) continue;\n        if (nodes.put(node, nodeProps) == null) {\n          String url = nodeProps.get(ZkStateReader.URL_PROP);\n          urlList.add(url);\n        }\n      }\n    }\n\n    Collections.shuffle(urlList, rand);\n    // System.out.println(\"########################## MAKING REQUEST TO \" + urlList);\n    // TODO: set distrib=true if we detected more than one shard?\n    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);\n    LBHttpSolrServer.Rsp rsp = lbServer.request(req);\n    return rsp.getResponse();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}