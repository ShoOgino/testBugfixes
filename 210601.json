{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testUpdateLogSynchronisation().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  @Test\n  public void testUpdateLogSynchronisation() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n    }\n    Thread.sleep(2000);\n\n    //verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    CdcrTestsUtil.cdcrDisableBuffer(sourceSolrClient);\n    Thread.sleep(2000);\n\n    int cnt = 15; // timeout after 15 seconds\n    int n = 0;\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + random().nextLong());\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      n = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n      if (n < nTlogs) {\n        cnt = Integer.MIN_VALUE;\n        break;\n      }\n      cnt--;\n      Thread.sleep(1000);\n    }\n    if (cnt == 0) {\n      throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection, \" + n + \" \" + nTlogs);\n    }\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testUpdateLogSynchronisation().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testUpdateLogSynchronisation() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n    }\n    Thread.sleep(2000);\n\n    //verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    CdcrTestsUtil.cdcrDisableBuffer(sourceSolrClient);\n    Thread.sleep(2000);\n\n    int cnt = 15; // timeout after 15 seconds\n    int n = 0;\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + random().nextLong());\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      n = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n      if (n < nTlogs) {\n        cnt = Integer.MIN_VALUE;\n        break;\n      }\n      cnt--;\n      Thread.sleep(1000);\n    }\n    if (cnt == 0) {\n      throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection, \" + n + \" \" + nTlogs);\n    }\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}