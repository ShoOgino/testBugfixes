{"path":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","commits":[{"id":"b65377a14b2c1af24ad7adce693825c28c9ea0b6","date":1082509564,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\t\t\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\t\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\t\t\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\t\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4836b0ad75558e4c39cb1c6ca188c153a48f8e98","date":1090874387,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\t\t\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\t\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","sourceOld":"\tpublic void testUnRewrittenQuery() throws IOException, ParseException\n\t{\n\t\t//test to show how rewritten query can still be used\n\t\tsearcher = new IndexSearcher(ramDir);\n\t\tAnalyzer analyzer=new StandardAnalyzer();\n\t\tQuery query = QueryParser.parse(\"JF? or Kenned*\", FIELD_NAME, analyzer);\n\t\tSystem.out.println(\"Searching with primitive query\");\n\t\t//forget to set this and...\n\t\t//query=query.rewrite(reader);\n\t\tHits hits = searcher.search(query);\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n//\t\tQueryHighlightExtractor highlighter = new QueryHighlightExtractor(this, query, new StandardAnalyzer());\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n\t\tint maxNumFragmentsRequired = 3;\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString highlightedText = highlighter.getBestFragments(tokenStream,text,maxNumFragmentsRequired,\"...\");\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\t//We expect to have zero highlights if the query is multi-terms and is not rewritten!\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 0);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4836b0ad75558e4c39cb1c6ca188c153a48f8e98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b65377a14b2c1af24ad7adce693825c28c9ea0b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4836b0ad75558e4c39cb1c6ca188c153a48f8e98":["b65377a14b2c1af24ad7adce693825c28c9ea0b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65377a14b2c1af24ad7adce693825c28c9ea0b6"],"b65377a14b2c1af24ad7adce693825c28c9ea0b6":["4836b0ad75558e4c39cb1c6ca188c153a48f8e98"],"4836b0ad75558e4c39cb1c6ca188c153a48f8e98":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}