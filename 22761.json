{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testAppendTwice().mjava","commits":[{"id":"a0e288a70f2f9b7ebd3942d8608636fe6f825894","date":1412362601,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testAppendTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    Directory csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n    \n    csw.close();\n    \n    Directory cfr = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testAppendTwice().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testAppendTwice().mjava","sourceNew":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    Directory csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n    \n    csw.close();\n    \n    Directory cfr = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n   \n    csw.close();\n\n    CompoundFileDirectory cfr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testAppendTwice().mjava","sourceNew":null,"sourceOld":"  public void testAppendTwice() throws IOException {\n    Directory newDir = newDirectory();\n    Directory csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    createSequenceFile(newDir, \"d1\", (byte) 0, 15);\n    IndexOutput out = csw.createOutput(\"d.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out.close();\n    assertEquals(1, csw.listAll().length);\n    assertEquals(\"d.xyz\", csw.listAll()[0]);\n    \n    csw.close();\n    \n    Directory cfr = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    assertEquals(1, cfr.listAll().length);\n    assertEquals(\"d.xyz\", cfr.listAll()[0]);\n    cfr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e288a70f2f9b7ebd3942d8608636fe6f825894"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e288a70f2f9b7ebd3942d8608636fe6f825894":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","a0e288a70f2f9b7ebd3942d8608636fe6f825894"],"a0e288a70f2f9b7ebd3942d8608636fe6f825894":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}