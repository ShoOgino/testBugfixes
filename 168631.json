{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","commits":[{"id":"739dbfe581cd9ed58cc78180a0a8bf51f6a63b46","date":1457864929,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds, singleValuePerDoc);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc, singleValuePerDoc);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds, singleValuePerDoc);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc, count, singleValuePerDoc);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds, singleValuePerDoc);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc, singleValuePerDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength, longOrds, singleValuePerDoc);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, longOrds, desc, count, singleValuePerDoc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    //As we recurse, we hold two on-heap point writers at any point. Therefore the\n    //max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["739dbfe581cd9ed58cc78180a0a8bf51f6a63b46"],"739dbfe581cd9ed58cc78180a0a8bf51f6a63b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["739dbfe581cd9ed58cc78180a0a8bf51f6a63b46"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"739dbfe581cd9ed58cc78180a0a8bf51f6a63b46":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}