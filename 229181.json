{"path":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5","date":1262514702,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  @Deprecated\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43a81875fea76763cb9f1ff5a41f2c5b79a6585","date":1264678816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  @Deprecated\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      } else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else {      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  @Deprecated\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      }\n      else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else{      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#skipChars(int).mjava","sourceNew":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  @Deprecated\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      } else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else {      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert\n   * \n   * Similar to {@link #readChars(char[], int, int)} but does not do any conversion operations on the bytes it is reading in.  It still\n   * has to invoke {@link #readByte()} just as {@link #readChars(char[], int, int)} does, but it does not need a buffer to store anything\n   * and it does not have to do any of the bitwise operations, since we don't actually care what is in the byte except to determine\n   * how many more bytes to read\n   * @param length The number of chars to read\n   * @deprecated this method operates on old \"modified utf8\" encoded\n   *             strings\n   */\n  @Deprecated\n  public void skipChars(int length) throws IOException{\n    for (int i = 0; i < length; i++) {\n      byte b = readByte();\n      if ((b & 0x80) == 0){\n        //do nothing, we only need one byte\n      } else if ((b & 0xE0) != 0xE0) {\n        readByte();//read an additional byte\n      } else {      \n        //read two additional bytes.\n        readByte();\n        readByte();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"]},"commit2Childs":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["a43a81875fea76763cb9f1ff5a41f2c5b79a6585"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a43a81875fea76763cb9f1ff5a41f2c5b79a6585":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}