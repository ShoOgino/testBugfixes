{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","sourceNew":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","sourceOld":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","sourceNew":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","sourceOld":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","sourceNew":null,"sourceOld":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}