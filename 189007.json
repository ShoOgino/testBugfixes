{"path":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    if (statsField.includeInResponse(Stat.sum)) {\n      res.add(\"sum\", sum);\n    }\n    if (statsField.includeInResponse(Stat.sumOfSquares)) {\n      res.add(\"sumOfSquares\", sumOfSquares);\n    }\n    if (statsField.includeInResponse(Stat.mean)) {\n      res.add(\"mean\", sum / count);\n    }\n    if (statsField.includeInResponse(Stat.stddev)) {\n      res.add(\"stddev\", getStandardDeviation());\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean, stddev, and percentiles to the given\n   * NamedList\n   *\n   * @param res\n   *          NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    if (statsField.includeInResponse(Stat.sum)) {\n      res.add(\"sum\", sum);\n    }\n    if (statsField.includeInResponse(Stat.sumOfSquares)) {\n      res.add(\"sumOfSquares\", sumOfSquares);\n    }\n    if (statsField.includeInResponse(Stat.mean)) {\n      res.add(\"mean\", sum / count);\n    }\n    if (statsField.includeInResponse(Stat.stddev)) {\n      res.add(\"stddev\", getStandardDeviation());\n    }\n    if (statsField.includeInResponse(Stat.percentiles)) {\n      if (statsField.getIsShard()) {\n        // as of current t-digest version, smallByteSize() internally does a full conversion in \n        // order to determine what the size is (can't be precomputed?) .. so rather then\n        // serialize to a ByteBuffer twice, allocate the max possible size buffer,\n        // serialize once, and then copy only the byte[] subset that we need, and free up the buffer\n        ByteBuffer buf = ByteBuffer.allocate(tdigest.byteSize()); // upper bound\n        tdigest.asSmallBytes(buf);\n        res.add(\"percentiles\", Arrays.copyOf(buf.array(), buf.position()) );\n      } else {\n        NamedList<Object> percentileNameList = new NamedList<Object>();\n        for (Double percentile : statsField.getPercentilesList()) {\n          // Empty document set case\n          if (tdigest.size() == 0) {\n            percentileNameList.add(percentile.toString(), null);\n          } else {\n            Double cutoff = tdigest.quantile(percentile / 100);\n            percentileNameList.add(percentile.toString(), cutoff);\n          }\n        }\n        res.add(\"percentiles\", percentileNameList);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    if (statsField.includeInResponse(Stat.sum)) {\n      res.add(\"sum\", sum);\n    }\n    if (statsField.includeInResponse(Stat.sumOfSquares)) {\n      res.add(\"sumOfSquares\", sumOfSquares);\n    }\n    if (statsField.includeInResponse(Stat.mean)) {\n      res.add(\"mean\", sum / count);\n    }\n    if (statsField.includeInResponse(Stat.stddev)) {\n      res.add(\"stddev\", getStandardDeviation());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":"  /**\n   * Adds sum, sumOfSquares, mean, stddev, and percentiles to the given\n   * NamedList\n   *\n   * @param res\n   *          NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    if (statsField.includeInResponse(Stat.sum)) {\n      res.add(\"sum\", sum);\n    }\n    if (statsField.includeInResponse(Stat.sumOfSquares)) {\n      res.add(\"sumOfSquares\", sumOfSquares);\n    }\n    if (statsField.includeInResponse(Stat.mean)) {\n      res.add(\"mean\", sum / count);\n    }\n    if (statsField.includeInResponse(Stat.stddev)) {\n      res.add(\"stddev\", getStandardDeviation());\n    }\n    if (statsField.includeInResponse(Stat.percentiles)) {\n      if (statsField.getIsShard()) {\n        // as of current t-digest version, smallByteSize() internally does a full conversion in \n        // order to determine what the size is (can't be precomputed?) .. so rather then\n        // serialize to a ByteBuffer twice, allocate the max possible size buffer,\n        // serialize once, and then copy only the byte[] subset that we need, and free up the buffer\n        ByteBuffer buf = ByteBuffer.allocate(tdigest.byteSize()); // upper bound\n        tdigest.asSmallBytes(buf);\n        res.add(\"percentiles\", Arrays.copyOf(buf.array(), buf.position()) );\n      } else {\n        NamedList<Object> percentileNameList = new NamedList<Object>();\n        for (Double percentile : statsField.getPercentilesList()) {\n          // Empty document set case\n          if (tdigest.size() == 0) {\n            percentileNameList.add(percentile.toString(), null);\n          } else {\n            Double cutoff = tdigest.quantile(percentile / 100);\n            percentileNameList.add(percentile.toString(), cutoff);\n          }\n        }\n        res.add(\"percentiles\", percentileNameList);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean and standard deviation statistics to the given NamedList\n   *\n   * @param res NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    res.add(\"sum\", sum);\n    res.add(\"sumOfSquares\", sumOfSquares);\n    res.add(\"mean\", sum / count);\n    res.add(\"stddev\", getStandardDeviation());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/NumericStatsValues[StatsValuesFactory]#addTypeSpecificStats(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds sum, sumOfSquares, mean, stddev, and percentiles to the given\n   * NamedList\n   *\n   * @param res\n   *          NamedList to add the type specific statistics too\n   */\n  @Override\n  protected void addTypeSpecificStats(NamedList<Object> res) {\n    if (statsField.includeInResponse(Stat.sum)) {\n      res.add(\"sum\", sum);\n    }\n    if (statsField.includeInResponse(Stat.sumOfSquares)) {\n      res.add(\"sumOfSquares\", sumOfSquares);\n    }\n    if (statsField.includeInResponse(Stat.mean)) {\n      res.add(\"mean\", sum / count);\n    }\n    if (statsField.includeInResponse(Stat.stddev)) {\n      res.add(\"stddev\", getStandardDeviation());\n    }\n    if (statsField.includeInResponse(Stat.percentiles)) {\n      if (statsField.getIsShard()) {\n        // as of current t-digest version, smallByteSize() internally does a full conversion in \n        // order to determine what the size is (can't be precomputed?) .. so rather then\n        // serialize to a ByteBuffer twice, allocate the max possible size buffer,\n        // serialize once, and then copy only the byte[] subset that we need, and free up the buffer\n        ByteBuffer buf = ByteBuffer.allocate(tdigest.byteSize()); // upper bound\n        tdigest.asSmallBytes(buf);\n        res.add(\"percentiles\", Arrays.copyOf(buf.array(), buf.position()) );\n      } else {\n        NamedList<Object> percentileNameList = new NamedList<Object>();\n        for (Double percentile : statsField.getPercentilesList()) {\n          // Empty document set case\n          if (tdigest.size() == 0) {\n            percentileNameList.add(percentile.toString(), null);\n          } else {\n            Double cutoff = tdigest.quantile(percentile / 100);\n            percentileNameList.add(percentile.toString(), cutoff);\n          }\n        }\n        res.add(\"percentiles\", percentileNameList);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["11982a7b6834a8571852448312db4624c32990b5","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7530de27b87b961b51f01bd1299b7004d46e8823","1002283cfd29923d517db7c33e07bb54aac7acd4"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["11982a7b6834a8571852448312db4624c32990b5"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}