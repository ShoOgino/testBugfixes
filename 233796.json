{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#verify(String,int).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#verify(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Runs normal and slow WDGF and compares results */\n  private void verify(String text, int flags) throws IOException {\n\n    Set<String> expected = slowWDF(text, flags);\n    if (VERBOSE) {\n      for(String path : expected) {\n        System.out.println(\"  \" + path);\n      }\n    }\n\n    Set<String> actual = getGraphStrings(getAnalyzer(flags), text);\n    if (actual.equals(expected) == false) {\n      StringBuilder b = new StringBuilder();\n      b.append(\"\\n\\nFAIL: text=\");\n      b.append(text);\n      b.append(\" flags=\");\n      b.append(WordDelimiterGraphFilter.flagsToString(flags));\n      b.append('\\n');\n      b.append(\"  expected paths:\\n\");\n      for (String s : expected) {\n        b.append(\"    \");\n        b.append(s);\n        if (actual.contains(s) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n\n      b.append(\"  actual paths:\\n\");\n      for (String s : actual) {\n        b.append(\"    \");\n        b.append(s);\n        if (expected.contains(s) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n\n      fail(b.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#verify(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Runs normal and slow WDGF and compares results */\n  private void verify(String text, int flags) throws IOException {\n\n    Set<String> expected = slowWDF(text, flags);\n    if (VERBOSE) {\n      for(String path : expected) {\n        System.out.println(\"  \" + path);\n      }\n    }\n\n    Set<String> actual = getGraphStrings(getAnalyzer(flags), text);\n    if (actual.equals(expected) == false) {\n      StringBuilder b = new StringBuilder();\n      b.append(\"\\n\\nFAIL: text=\");\n      b.append(text);\n      b.append(\" flags=\");\n      b.append(WordDelimiterGraphFilter.flagsToString(flags));\n      b.append('\\n');\n      b.append(\"  expected paths:\\n\");\n      for (String s : expected) {\n        b.append(\"    \");\n        b.append(s);\n        if (actual.contains(s) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n\n      b.append(\"  actual paths:\\n\");\n      for (String s : actual) {\n        b.append(\"    \");\n        b.append(s);\n        if (expected.contains(s) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n\n      fail(b.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c85bcc0cb48e35688c792a172bed271a9836d6b","date":1571776257,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#verify(String,int).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#verify(String,int).mjava","sourceNew":"  /** Runs normal and slow WDGF and compares results */\n  private void verify(String text, int flags) throws IOException {\n\n    Set<String> expected = slowWDF(text, flags);\n    if (VERBOSE) {\n      for(String path : expected) {\n        System.out.println(\"  \" + path);\n      }\n    }\n\n    Set<String> actual = getGraphStrings(getAnalyzer(flags), text);\n    if (actual.equals(expected) == false) {\n      StringBuilder b = new StringBuilder();\n      b.append(\"\\n\\nFAIL: text=\");\n      b.append(text);\n      b.append(\" flags=\");\n      b.append(WordDelimiterGraphFilter.flagsToString(flags));\n      b.append('\\n');\n      b.append(\"  expected paths:\\n\");\n      for (String s : expected) {\n        b.append(\"    \");\n        b.append(s);\n        if (actual.contains(s) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n\n      b.append(\"  actual paths:\\n\");\n      for (String s : actual) {\n        b.append(\"    \");\n        b.append(s);\n        if (expected.contains(s) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n\n      fail(b.toString());\n    }\n\n    boolean useCharFilter = true;\n    checkAnalysisConsistency(random(), getAnalyzer(flags), useCharFilter, text);\n  }\n\n","sourceOld":"  /** Runs normal and slow WDGF and compares results */\n  private void verify(String text, int flags) throws IOException {\n\n    Set<String> expected = slowWDF(text, flags);\n    if (VERBOSE) {\n      for(String path : expected) {\n        System.out.println(\"  \" + path);\n      }\n    }\n\n    Set<String> actual = getGraphStrings(getAnalyzer(flags), text);\n    if (actual.equals(expected) == false) {\n      StringBuilder b = new StringBuilder();\n      b.append(\"\\n\\nFAIL: text=\");\n      b.append(text);\n      b.append(\" flags=\");\n      b.append(WordDelimiterGraphFilter.flagsToString(flags));\n      b.append('\\n');\n      b.append(\"  expected paths:\\n\");\n      for (String s : expected) {\n        b.append(\"    \");\n        b.append(s);\n        if (actual.contains(s) == false) {\n          b.append(\" [missing!]\");\n        }\n        b.append('\\n');\n      }\n\n      b.append(\"  actual paths:\\n\");\n      for (String s : actual) {\n        b.append(\"    \");\n        b.append(s);\n        if (expected.contains(s) == false) {\n          b.append(\" [unexpected!]\");\n        }\n        b.append('\\n');\n      }\n\n      fail(b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c85bcc0cb48e35688c792a172bed271a9836d6b":["098528909bb70948871fd7ed865fafb87ed73964"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c85bcc0cb48e35688c792a172bed271a9836d6b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["1c85bcc0cb48e35688c792a172bed271a9836d6b","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"1c85bcc0cb48e35688c792a172bed271a9836d6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}