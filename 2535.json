{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","commits":[{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // nocommit\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6975b406890e355ae6c926f362af6f373a6d4a3","date":1354646094,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","sourceNew":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: this method not called because of below sleep\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","sourceOld":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // nocommit\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: this method not called because of below sleep\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","sourceNew":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: REMOVE THIS SLEEP WHEN WE HAVE COLLECTION API RESPONSES\n    Thread.sleep(10000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","sourceOld":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: this method not called because of below sleep\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","sourceNew":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: REMOVE THIS SLEEP WHEN WE HAVE COLLECTION API RESPONSES\n    Thread.sleep(10000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","sourceOld":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: this method not called because of below sleep\n    Thread.sleep(60000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","sourceNew":null,"sourceOld":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: REMOVE THIS SLEEP WHEN WE HAVE COLLECTION API RESPONSES\n    Thread.sleep(10000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkCollectionIsNotCreated(String).mjava","sourceNew":null,"sourceOld":"  private void checkCollectionIsNotCreated(String collectionName)\n    throws Exception {\n    // TODO: REMOVE THIS SLEEP WHEN WE HAVE COLLECTION API RESPONSES\n    Thread.sleep(10000);\n    assertFalse(collectionName + \" not supposed to exist\", getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collectionName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","f0a4eeff354e8081247783f424a8e5a0fe106633"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["b6975b406890e355ae6c926f362af6f373a6d4a3"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"c215736a9e29403edd2132d9f0829a287b428df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6975b406890e355ae6c926f362af6f373a6d4a3"],"b6975b406890e355ae6c926f362af6f373a6d4a3":["c215736a9e29403edd2132d9f0829a287b428df4"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["f0a4eeff354e8081247783f424a8e5a0fe106633","81a4a1810b619aea1d002a09c1878b498e20bf33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81a4a1810b619aea1d002a09c1878b498e20bf33"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f0a4eeff354e8081247783f424a8e5a0fe106633":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c215736a9e29403edd2132d9f0829a287b428df4":["b6975b406890e355ae6c926f362af6f373a6d4a3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c215736a9e29403edd2132d9f0829a287b428df4","407687e67faf6e1f02a211ca078d8e3eed631027"],"b6975b406890e355ae6c926f362af6f373a6d4a3":["f0a4eeff354e8081247783f424a8e5a0fe106633","407687e67faf6e1f02a211ca078d8e3eed631027"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}