{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#createNextCollection(String,CollectionsHandler).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#createNextCollection(String,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#createNextCollection(String).mjava","sourceNew":"  private void createNextCollection(String mostRecentCollName, CollectionsHandler collHandler) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    try {\n      MaintainTimeRoutedAliasCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n      // we don't care about the response.  It's possible no collection was created because\n      //  of a race and that's okay... we'll ultimately retry any way.\n\n      // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n      //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n      //  we failed.\n      collHandler.getCoreContainer().getZkController().getZkStateReader().aliasesManager.update();\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createNextCollection(String mostRecentCollName) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    try {\n      MaintainRoutedAliasCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n      // we don't care about the response.  It's possible no collection was created because\n      //  of a race and that's okay... we'll ultimately retry any way.\n\n      // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n      //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n      //  we failed.\n      zkController.getZkStateReader().aliasesManager.update();\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RoutedAlias#ensureCollection(String,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#createNextCollection(String,CollectionsHandler).mjava","sourceNew":"  void ensureCollection(String targetCollection, CoreContainer coreContainer) {\n    CollectionsHandler collectionsHandler = coreContainer.getCollectionsHandler();\n\n    // Invoke MANINTAIN_ROUTED_ALIAS (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the requested collection name not already existing.\n    //   otherwise it will return (without error).\n    try {\n      MaintainRoutedAliasCmd.remoteInvoke(collectionsHandler, getAliasName(), targetCollection);\n      // we don't care about the response.  It's possible no collection was created because\n      //  of a race and that's okay... we'll ultimately retry any way.\n\n      // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n      //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n      //  we failed.\n      coreContainer.getZkController().getZkStateReader().aliasesManager.update();\n      updateParsedCollectionAliases(coreContainer.getZkController().getZkStateReader(),false);\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createNextCollection(String mostRecentCollName, CollectionsHandler collHandler) {\n    // Invoke ROUTEDALIAS_CREATECOLL (in the Overseer, locked by alias name).  It will create the collection\n    //   and update the alias contingent on the most recent collection name being the same as\n    //   what we think so here, otherwise it will return (without error).\n    try {\n      MaintainTimeRoutedAliasCmd.remoteInvoke(collHandler, getAliasName(), mostRecentCollName);\n      // we don't care about the response.  It's possible no collection was created because\n      //  of a race and that's okay... we'll ultimately retry any way.\n\n      // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n      //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n      //  we failed.\n      collHandler.getCoreContainer().getZkController().getZkStateReader().aliasesManager.update();\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}