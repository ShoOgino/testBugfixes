{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(VersionInfo.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(VersionInfo.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","sourceOld":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(VersionInfo.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(CommonParams.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","sourceOld":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(VersionInfo.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(CommonParams.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","sourceOld":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(VersionInfo.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#DocBasedVersionConstraintsProcessor(String,boolean,String,boolean,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":null,"sourceOld":"    public DocBasedVersionConstraintsProcessor(String versionField,\n                                               boolean ignoreOldUpdates,\n                                               String deleteVersionParamName,\n                                               boolean useFieldCache,\n                                               SolrQueryRequest req, \n                                               SolrQueryResponse rsp, \n                                               UpdateRequestProcessor next ) {\n      super(next);\n      this.ignoreOldUpdates = ignoreOldUpdates;\n      this.deleteVersionParamName = deleteVersionParamName;\n      this.core = req.getCore();\n      this.versionFieldName = versionField;\n      this.userVersionField = core.getLatestSchema().getField(versionField);\n      this.solrVersionField = core.getLatestSchema().getField(CommonParams.VERSION_FIELD);\n      this.useFieldCache = useFieldCache;\n\n      for (UpdateRequestProcessor proc = next ;proc != null; proc = proc.next) {\n        if (proc instanceof DistributedUpdateProcessor) {\n          distribProc = (DistributedUpdateProcessor)proc;\n          break;\n        }\n      }\n\n      if (distribProc == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"DistributedUpdateProcessor must follow DocBasedVersionConstraintsProcessor\");\n      }\n\n      phase = DistributedUpdateProcessor.DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}