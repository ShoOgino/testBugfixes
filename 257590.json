{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      IndexReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      IndexReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      IndexReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      IndexReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      DirectoryReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      IndexReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 6 into this index which has been created by major version 7\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      DirectoryReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 6 into this index which has been created by major version 7\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      DirectoryReader reader = DirectoryReader.open(oldIndexDirs.get(name));\n      \n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87655ca85dc29fc6a56702a356b312ebac60bd2d","date":1506818641,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 7 into this index which has been created by major version 8\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 6 into this index which has been created by major version 7\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 7 into this index which has been created by major version 8\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 6 into this index which has been created by major version 7\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c167f43985b3d924e6402ded39beada51a81b6b","date":1552568413,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 8 into this index which has been created by major version 9\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 7 into this index which has been created by major version 8\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexesReader().mjava","sourceNew":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 8 into this index which has been created by major version 9\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n      SegmentInfos si = SegmentInfos.readLatestCommit(targetDir);\n      assertNull(\"all SCIs should have an id now\",\n          si.asList().stream().filter(sci -> sci.getId() == null).findAny().orElse(null));\n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexesReader() throws IOException {\n    for (String name : oldNames) {\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n      DirectoryReader reader = DirectoryReader.open(oldDir);\n      \n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> TestUtil.addIndexesSlowly(w, reader));\n        assertEquals(e.getMessage(), \"Cannot merge a segment that has been created with major version 8 into this index which has been created by major version 9\");\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      TestUtil.addIndexesSlowly(w, reader);\n      w.close();\n      reader.close();\n            \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6240b74b884c5587f2a4062dd27d6c32bf228889":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","87655ca85dc29fc6a56702a356b312ebac60bd2d"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["3c167f43985b3d924e6402ded39beada51a81b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"3c167f43985b3d924e6402ded39beada51a81b6b":["87655ca85dc29fc6a56702a356b312ebac60bd2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["6240b74b884c5587f2a4062dd27d6c32bf228889","3c167f43985b3d924e6402ded39beada51a81b6b"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"3c167f43985b3d924e6402ded39beada51a81b6b":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["87655ca85dc29fc6a56702a356b312ebac60bd2d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}