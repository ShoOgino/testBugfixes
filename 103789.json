{"path":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(IndexWriter,SegmentInfo).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(IndexWriter,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if this single nfo is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(IndexWriter writer, SegmentInfo info)\n    throws IOException {\n    return !info.hasDeletions() &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(IndexWriter,SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(IndexWriter,SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(IndexWriter writer, SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single nfo is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(IndexWriter writer, SegmentInfo info)\n    throws IOException {\n    return !info.hasDeletions() &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(IndexWriter,SegmentInfo).mjava","sourceNew":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","sourceOld":"  /** Returns true if this single info is optimized (has no\n   *  pending norms or deletes, is in the same dir as the\n   *  writer, and matches the current compound file setting */\n  private boolean isOptimized(IndexWriter writer, SegmentInfo info)\n    throws IOException {\n    boolean hasDeletions = writer.numDeletedDocs(info) > 0;\n    return !hasDeletions &&\n      !info.hasSeparateNorms() &&\n      info.dir == writer.getDirectory() &&\n      info.getUseCompoundFile() == useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["f33fc116e28d7704378c9dd333711753bd0c9706"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}