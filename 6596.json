{"path":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = newFSDirectory(indexDir);\n    final MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    dir.close();\n    \n    final IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(newField(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), StringField.TYPE_STORED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.forceMerge(1);\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["a05409176bd65129d67a785ee70e881e238a9aef"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"53a31399f2471493d67b19a95c028a74e0113b6a":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f2c5f0cb44df114db4228c8f77861714b5cabaea","b6f9be74ca7baaef11857ad002cad40419979516"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a05409176bd65129d67a785ee70e881e238a9aef":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}