{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public LegacyNumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    FieldType.LegacyNumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    NumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return NumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return NumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return NumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return NumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/LegacyNumericRangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public LegacyNumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    LegacyNumericRangeQueryNode numericRangeNode = (LegacyNumericRangeQueryNode) queryNode;\n    \n    LegacyNumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    LegacyNumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    LegacyNumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    FieldType.LegacyNumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","sourceOld":"  @Override\n  public LegacyNumericRangeQuery<? extends Number> build(QueryNode queryNode)\n      throws QueryNodeException {\n    NumericRangeQueryNode numericRangeNode = (NumericRangeQueryNode) queryNode;\n    \n    NumericQueryNode lowerNumericNode = numericRangeNode.getLowerBound();\n    NumericQueryNode upperNumericNode = numericRangeNode.getUpperBound();\n    \n    Number lowerNumber = lowerNumericNode.getValue();\n    Number upperNumber = upperNumericNode.getValue();\n    \n    NumericConfig numericConfig = numericRangeNode.getNumericConfig();\n    FieldType.LegacyNumericType numberType = numericConfig.getType();\n    String field = StringUtils.toString(numericRangeNode.getField());\n    boolean minInclusive = numericRangeNode.isLowerInclusive();\n    boolean maxInclusive = numericRangeNode.isUpperInclusive();\n    int precisionStep = numericConfig.getPrecisionStep();\n    \n    switch (numberType) {\n      \n      case LONG:\n        return LegacyNumericRangeQuery.newLongRange(field, precisionStep,\n            (Long) lowerNumber, (Long) upperNumber, minInclusive, maxInclusive);\n      \n      case INT:\n        return LegacyNumericRangeQuery.newIntRange(field, precisionStep,\n            (Integer) lowerNumber, (Integer) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case FLOAT:\n        return LegacyNumericRangeQuery.newFloatRange(field, precisionStep,\n            (Float) lowerNumber, (Float) upperNumber, minInclusive,\n            maxInclusive);\n      \n      case DOUBLE:\n        return LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n            (Double) lowerNumber, (Double) upperNumber, minInclusive,\n            maxInclusive);\n        \n        default :\n          throw new QueryNodeException(new MessageImpl(\n            QueryParserMessages.UNSUPPORTED_NUMERIC_DATA_TYPE, numberType));\n        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"683242c67a3f6086bae8b1354748fcaa38edfbd5":["770342641f7b505eaa8dccdc666158bff2419109"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"770342641f7b505eaa8dccdc666158bff2419109":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}