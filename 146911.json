{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#minheapSiftDown(int).mjava","commits":[{"id":"681329f0d8aa847be84b952db62031b9c15f96c5","date":1364143277,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#minheapSiftDown(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#minheapAdjust(int).mjava","sourceNew":"  /**\n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void minheapSiftDown(int root) {\n    // TODO could this implementation also move rather than swapping neighbours?\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (nrInHeap >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < nrInHeap) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void minheapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (nrInHeap >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < nrInHeap) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#minheapSiftDown(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  protected final void minheapSiftDown(int root) {\n    // TODO could this implementation also move rather than swapping neighbours?\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (nrInHeap >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < nrInHeap) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["681329f0d8aa847be84b952db62031b9c15f96c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"681329f0d8aa847be84b952db62031b9c15f96c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["681329f0d8aa847be84b952db62031b9c15f96c5"],"681329f0d8aa847be84b952db62031b9c15f96c5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}