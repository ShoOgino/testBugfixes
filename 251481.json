{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final String pattern = name + \".s\\\\d+\";\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (fileName.matches(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final String pattern = name + \".s\\\\d+\";\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (fileName.matches(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbfc5f8ff83fd99d2de4dcb307c1edd9e51bc6ff","date":1323040486,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074","date":1323052749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  @Deprecated\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  @Deprecated\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  @Deprecated\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  @Deprecated\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * @deprecated separate norms are not supported in >= 4.0\n   */\n  @Deprecated\n  boolean hasSeparateNorms() {\n    if (normGen == null) {\n      return false;\n    } else {\n      for (long fieldNormGen : normGen.values()) {\n        if (fieldNormGen >= YES) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1224a4027481acce15495b03bce9b48b93b42722","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cbfc5f8ff83fd99d2de4dcb307c1edd9e51bc6ff":["1224a4027481acce15495b03bce9b48b93b42722"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["6267e1ce56c2eec111425690cd04e251b6f14952","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1224a4027481acce15495b03bce9b48b93b42722","ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["cbfc5f8ff83fd99d2de4dcb307c1edd9e51bc6ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["6267e1ce56c2eec111425690cd04e251b6f14952","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cbfc5f8ff83fd99d2de4dcb307c1edd9e51bc6ff":["ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074"],"6267e1ce56c2eec111425690cd04e251b6f14952":["d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"1224a4027481acce15495b03bce9b48b93b42722":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cbfc5f8ff83fd99d2de4dcb307c1edd9e51bc6ff","d619839baa8ce5503e496b94a9e42ad6f079293f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}