{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec77e67e448734229255f16b8e0b1b4402f23095","date":1453748031,"type":5,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36479872320bb00635cb97ca6757614c88562e1b":["79509167584beb75c0b777d2b701adeb1f06d885"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["36479872320bb00635cb97ca6757614c88562e1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","ec77e67e448734229255f16b8e0b1b4402f23095"],"ec77e67e448734229255f16b8e0b1b4402f23095":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec77e67e448734229255f16b8e0b1b4402f23095"]},"commit2Childs":{"36479872320bb00635cb97ca6757614c88562e1b":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"79509167584beb75c0b777d2b701adeb1f06d885":["36479872320bb00635cb97ca6757614c88562e1b"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","ec77e67e448734229255f16b8e0b1b4402f23095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"ec77e67e448734229255f16b8e0b1b4402f23095":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}