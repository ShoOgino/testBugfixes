{"path":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","commits":[{"id":"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f","date":1343307395,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expandSingleRule\n      (StringBuilder builder, String leftHandSide, String rightHandSide)\n      throws IllegalArgumentException {\n    UnicodeSet set = new UnicodeSet(leftHandSide, UnicodeSet.IGNORE_SPACE);\n    boolean numericValue = NUMERIC_VALUE_PATTERN.matcher(rightHandSide).matches();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set) ; it.nextRange() ; ) {\n      if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n        if (numericValue) {\n          for (int cp = it.codepoint ; cp <= it.codepointEnd ; ++cp) {\n            builder.append(String.format(\"%04X\", cp)).append('>');\n            builder.append(String.format(\"%04X\", 0x30 + UCharacter.getNumericValue(cp)));\n            builder.append(\"   # \").append(UCharacter.getName(cp));\n            builder.append(\"\\n\");\n          }\n        } else {\n          builder.append(String.format(\"%04X\", it.codepoint));\n          if (it.codepointEnd > it.codepoint) {\n            builder.append(\"..\").append(String.format(\"%04X\", it.codepointEnd));\n          }\n          builder.append('>').append(rightHandSide).append(\"\\n\");\n        }\n      } else {\n        System.err.println(\"ERROR: String '\" + it.getString() + \"' found in UnicodeSet\");\n        System.exit(1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c92b1b3d8f5aa77cca2650522a7e15fd13fdb438"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expandSingleRule\n      (StringBuilder builder, String leftHandSide, String rightHandSide)\n      throws IllegalArgumentException {\n    UnicodeSet set = new UnicodeSet(leftHandSide, UnicodeSet.IGNORE_SPACE);\n    boolean numericValue = NUMERIC_VALUE_PATTERN.matcher(rightHandSide).matches();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set) ; it.nextRange() ; ) {\n      if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n        if (numericValue) {\n          for (int cp = it.codepoint ; cp <= it.codepointEnd ; ++cp) {\n            builder.append(String.format(\"%04X\", cp)).append('>');\n            builder.append(String.format(\"%04X\", 0x30 + UCharacter.getNumericValue(cp)));\n            builder.append(\"   # \").append(UCharacter.getName(cp));\n            builder.append(\"\\n\");\n          }\n        } else {\n          builder.append(String.format(\"%04X\", it.codepoint));\n          if (it.codepointEnd > it.codepoint) {\n            builder.append(\"..\").append(String.format(\"%04X\", it.codepointEnd));\n          }\n          builder.append('>').append(rightHandSide).append(\"\\n\");\n        }\n      } else {\n        System.err.println(\"ERROR: String '\" + it.getString() + \"' found in UnicodeSet\");\n        System.exit(1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expandSingleRule\n      (StringBuilder builder, String leftHandSide, String rightHandSide)\n      throws IllegalArgumentException {\n    UnicodeSet set = new UnicodeSet(leftHandSide, UnicodeSet.IGNORE_SPACE);\n    boolean numericValue = NUMERIC_VALUE_PATTERN.matcher(rightHandSide).matches();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set) ; it.nextRange() ; ) {\n      if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n        if (numericValue) {\n          for (int cp = it.codepoint ; cp <= it.codepointEnd ; ++cp) {\n            builder.append(String.format(\"%04X\", cp)).append('>');\n            builder.append(String.format(\"%04X\", 0x30 + UCharacter.getNumericValue(cp)));\n            builder.append(\"   # \").append(UCharacter.getName(cp));\n            builder.append(\"\\n\");\n          }\n        } else {\n          builder.append(String.format(\"%04X\", it.codepoint));\n          if (it.codepointEnd > it.codepoint) {\n            builder.append(\"..\").append(String.format(\"%04X\", it.codepointEnd));\n          }\n          builder.append('>').append(rightHandSide).append(\"\\n\");\n        }\n      } else {\n        System.err.println(\"ERROR: String '\" + it.getString() + \"' found in UnicodeSet\");\n        System.exit(1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c92b1b3d8f5aa77cca2650522a7e15fd13fdb438","date":1346816468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#expandSingleRule(StringBuilder,String,String).mjava","sourceNew":"  private static void expandSingleRule\n      (StringBuilder builder, String leftHandSide, String rightHandSide)\n      throws IllegalArgumentException {\n    UnicodeSet set = new UnicodeSet(leftHandSide, UnicodeSet.IGNORE_SPACE);\n    boolean numericValue = NUMERIC_VALUE_PATTERN.matcher(rightHandSide).matches();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set) ; it.nextRange() ; ) {\n      if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n        if (numericValue) {\n          for (int cp = it.codepoint ; cp <= it.codepointEnd ; ++cp) {\n            builder.append(String.format(Locale.ROOT, \"%04X\", cp)).append('>');\n            builder.append(String.format(Locale.ROOT, \"%04X\", 0x30 + UCharacter.getNumericValue(cp)));\n            builder.append(\"   # \").append(UCharacter.getName(cp));\n            builder.append(\"\\n\");\n          }\n        } else {\n          builder.append(String.format(Locale.ROOT, \"%04X\", it.codepoint));\n          if (it.codepointEnd > it.codepoint) {\n            builder.append(\"..\").append(String.format(Locale.ROOT, \"%04X\", it.codepointEnd));\n          }\n          builder.append('>').append(rightHandSide).append(\"\\n\");\n        }\n      } else {\n        System.err.println(\"ERROR: String '\" + it.getString() + \"' found in UnicodeSet\");\n        System.exit(1);\n      }\n    }\n  }\n\n","sourceOld":"  private static void expandSingleRule\n      (StringBuilder builder, String leftHandSide, String rightHandSide)\n      throws IllegalArgumentException {\n    UnicodeSet set = new UnicodeSet(leftHandSide, UnicodeSet.IGNORE_SPACE);\n    boolean numericValue = NUMERIC_VALUE_PATTERN.matcher(rightHandSide).matches();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set) ; it.nextRange() ; ) {\n      if (it.codepoint != UnicodeSetIterator.IS_STRING) {\n        if (numericValue) {\n          for (int cp = it.codepoint ; cp <= it.codepointEnd ; ++cp) {\n            builder.append(String.format(\"%04X\", cp)).append('>');\n            builder.append(String.format(\"%04X\", 0x30 + UCharacter.getNumericValue(cp)));\n            builder.append(\"   # \").append(UCharacter.getName(cp));\n            builder.append(\"\\n\");\n          }\n        } else {\n          builder.append(String.format(\"%04X\", it.codepoint));\n          if (it.codepointEnd > it.codepoint) {\n            builder.append(\"..\").append(String.format(\"%04X\", it.codepointEnd));\n          }\n          builder.append('>').append(rightHandSide).append(\"\\n\");\n        }\n      } else {\n        System.err.println(\"ERROR: String '\" + it.getString() + \"' found in UnicodeSet\");\n        System.exit(1);\n      }\n    }\n  }\n\n","bugFix":["c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"c92b1b3d8f5aa77cca2650522a7e15fd13fdb438":["c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c92b1b3d8f5aa77cca2650522a7e15fd13fdb438"]},"commit2Childs":{"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","c92b1b3d8f5aa77cca2650522a7e15fd13fdb438"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"c92b1b3d8f5aa77cca2650522a7e15fd13fdb438":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}