{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"/dev/null","sourceNew":"  /* (non-Javadoc)\r\n   * @see java.lang.Object#toString()\r\n   */\r\n  public String toString() {\r\n    String padd = getPadding();\r\n    StringBuffer sb = new StringBuffer(super.toString());\r\n    sb.append(parallel ? \" [\" : \" {\");\r\n    sb.append(NEW_LINE);\r\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n      PerfTask task = (PerfTask) it.next();\r\n      sb.append(task.toString());\r\n      sb.append(NEW_LINE);\r\n    }\r\n    sb.append(padd);\r\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\r\n    if (repetitions>1) {\r\n      sb.append(\" * \" + repetitions);\r\n    }\r\n    if (rate>0) {\r\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\r\n   * @see java.lang.Object#toString()\r\n   */\r\n  public String toString() {\r\n    String padd = getPadding();\r\n    StringBuffer sb = new StringBuffer(super.toString());\r\n    sb.append(parallel ? \" [\" : \" {\");\r\n    sb.append(NEW_LINE);\r\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n      PerfTask task = (PerfTask) it.next();\r\n      sb.append(task.toString());\r\n      sb.append(NEW_LINE);\r\n    }\r\n    sb.append(padd);\r\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\r\n    if (repetitions>1) {\r\n      sb.append(\" * \" + repetitions);\r\n    }\r\n    if (repetitions==REPEAT_EXHAUST) {\r\n      sb.append(\" * EXHAUST\");\r\n    }\r\n    if (rate>0) {\r\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","sourceOld":"  /* (non-Javadoc)\r\n   * @see java.lang.Object#toString()\r\n   */\r\n  public String toString() {\r\n    String padd = getPadding();\r\n    StringBuffer sb = new StringBuffer(super.toString());\r\n    sb.append(parallel ? \" [\" : \" {\");\r\n    sb.append(NEW_LINE);\r\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n      PerfTask task = (PerfTask) it.next();\r\n      sb.append(task.toString());\r\n      sb.append(NEW_LINE);\r\n    }\r\n    sb.append(padd);\r\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\r\n    if (repetitions>1) {\r\n      sb.append(\" * \" + repetitions);\r\n    }\r\n    if (rate>0) {\r\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\n      PerfTask task = (PerfTask) it.next();\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    }\n    if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\r\n   * @see java.lang.Object#toString()\r\n   */\r\n  public String toString() {\r\n    String padd = getPadding();\r\n    StringBuffer sb = new StringBuffer(super.toString());\r\n    sb.append(parallel ? \" [\" : \" {\");\r\n    sb.append(NEW_LINE);\r\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\r\n      PerfTask task = (PerfTask) it.next();\r\n      sb.append(task.toString());\r\n      sb.append(NEW_LINE);\r\n    }\r\n    sb.append(padd);\r\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\r\n    if (repetitions>1) {\r\n      sb.append(\" * \" + repetitions);\r\n    }\r\n    if (repetitions==REPEAT_EXHAUST) {\r\n      sb.append(\" * EXHAUST\");\r\n    }\r\n    if (rate>0) {\r\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\r\n    }\r\n    return sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8d42b5cee95ef780ce28764afd8bbcbd812235","date":1229974678,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\n      PerfTask task = (PerfTask) it.next();\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\n      PerfTask task = (PerfTask) it.next();\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    }\n    if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (Iterator it = tasks.iterator(); it.hasNext();) {\n      PerfTask task = (PerfTask) it.next();\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3353540ef2debe4c4c017e9d86e2c60f9e784336","date":1258197258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#toString().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see java.lang.Object#toString()\n   */\n  @Override\n  public String toString() {\n    String padd = getPadding();\n    StringBuffer sb = new StringBuffer(super.toString());\n    sb.append(parallel ? \" [\" : \" {\");\n    sb.append(NEW_LINE);\n    for (final PerfTask task : tasks) {\n      sb.append(task.toString());\n      sb.append(NEW_LINE);\n    }\n    sb.append(padd);\n    sb.append(!letChildReport ? \">\" : (parallel ? \"]\" : \"}\"));\n    if (fixedTime) {\n      sb.append(\" \" + NumberFormat.getNumberInstance().format(runTimeSec) + \"s\");\n    } else if (repetitions>1) {\n      sb.append(\" * \" + repetitions);\n    } else if (repetitions==REPEAT_EXHAUST) {\n      sb.append(\" * EXHAUST\");\n    }\n    if (rate>0) {\n      sb.append(\",  rate: \" + rate+\"/\"+(perMin?\"min\":\"sec\"));\n    }\n    if (getRunInBackground()) {\n      sb.append(\" &\");\n      int x = getBackgroundDeltaPriority();\n      if (x != 0) {\n        sb.append(x);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["5c8d42b5cee95ef780ce28764afd8bbcbd812235"],"5c8d42b5cee95ef780ce28764afd8bbcbd812235":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"]},"commit2Childs":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"5c8d42b5cee95ef780ce28764afd8bbcbd812235":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["5c8d42b5cee95ef780ce28764afd8bbcbd812235"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}