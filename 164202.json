{"path":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param query  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String query) throws ParseException {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(field);\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      // rethrow to include the original query:\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (TokenMgrError tme) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n      e.initCause(tme);\n      throw e;\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': too many boolean clauses\");\n      e.initCause(tmc);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}