{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","sourceNew":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","sourceOld":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"905875f9ff156054caaa4850a454dd00a348872d","date":1371921347,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","sourceNew":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = clazz.getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","sourceOld":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder#getBuilder(QueryNode).mjava","sourceNew":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = clazz.getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","sourceOld":"  private QueryBuilder getBuilder(QueryNode node) {\n    QueryBuilder builder = null;\n\n    if (this.fieldNameBuilders != null && node instanceof FieldableNode) {\n      CharSequence field = ((FieldableNode) node).getField();\n\n      if (field != null) {\n        field = field.toString();\n      }\n\n      builder = this.fieldNameBuilders.get(field);\n\n    }\n\n    if (builder == null && this.queryNodeBuilders != null) {\n\n      Class<?> clazz = node.getClass();\n\n      do {\n        builder = getQueryBuilder(clazz);\n\n        if (builder == null) {\n          Class<?>[] classes = node.getClass().getInterfaces();\n\n          for (Class<?> actualClass : classes) {\n            builder = getQueryBuilder(actualClass);\n\n            if (builder != null) {\n              break;\n            }\n\n          }\n\n        }\n\n      } while (builder == null && (clazz = clazz.getSuperclass()) != null);\n\n    }\n\n    return builder;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"905875f9ff156054caaa4850a454dd00a348872d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","905875f9ff156054caaa4850a454dd00a348872d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["905875f9ff156054caaa4850a454dd00a348872d"]},"commit2Childs":{"905875f9ff156054caaa4850a454dd00a348872d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["905875f9ff156054caaa4850a454dd00a348872d","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}