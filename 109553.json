{"path":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.getFieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","sourceNew":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.getFieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","sourceNew":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#build(Field,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","sourceNew":"  /**\n   * Returns an DocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static DocValuesField build(Field field, DocValues.Type type) {\n    if (field instanceof DocValuesField) {\n      return (DocValuesField) field;\n    }\n    final DocValuesField valField = new DocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#build(Field,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","sourceNew":"  /**\n   * Returns an DocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static DocValuesField build(Field field, DocValues.Type type) {\n    if (field instanceof DocValuesField) {\n      return (DocValuesField) field;\n    }\n    final DocValuesField valField = new DocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.fieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e128967bca58657bc0039d4bfe631e63e81f1977":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}