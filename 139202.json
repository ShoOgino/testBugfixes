{"path":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testVerboseWrite().mjava","commits":[{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testVerboseWrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testVerboseWrite() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    final AtomicBoolean seenMessage = new AtomicBoolean(false);\n    InfoStream testStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"FS\".equals(component) && message.startsWith(\"newOutputStream\")) {\n          seenMessage.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    FileSystem fs = new VerboseFS(dir.getFileSystem(), testStream).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"output\"));\n    assertTrue(seenMessage.get());\n    file.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testVerboseWrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testVerboseWrite().mjava","sourceNew":"  public void testVerboseWrite() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    final AtomicBoolean seenMessage = new AtomicBoolean(false);\n    InfoStream testStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"FS\".equals(component) && message.startsWith(\"newOutputStream\")) {\n          seenMessage.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    FileSystem fs = new VerboseFS(dir.getFileSystem(), testStream).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"output\"));\n    assertTrue(seenMessage.get());\n    file.close();\n  }\n\n","sourceOld":"  public void testVerboseWrite() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    final AtomicBoolean seenMessage = new AtomicBoolean(false);\n    InfoStream testStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"FS\".equals(component) && message.startsWith(\"newOutputStream\")) {\n          seenMessage.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    FileSystem fs = new VerboseFS(dir.getFileSystem(), testStream).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"output\"));\n    assertTrue(seenMessage.get());\n    file.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}