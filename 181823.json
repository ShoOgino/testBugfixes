{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","commits":[{"id":"0bca82f249670ddf59ba61176011f066430586bf","date":1490972000,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() {\n    if(Boolean.parseBoolean(System.getProperty(\"test.solr.allow.any.securerandom\",\"false\")))\n      return;\n    // Use -Djava.security.egd=file:/dev/./urandom VM option if you hit this \n    assertEquals(\"SHA1PRNG\", new SecureRandom().getAlgorithm());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45f7182810bbeb650d9fbfb43f3c1926ebc81694","date":1491045405,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() {\n    if(Boolean.parseBoolean(System.getProperty(\"test.solr.allow.any.securerandom\",\"false\")))\n      return;\n    // Use -Djava.security.egd=file:/dev/./urandom VM option if you hit this \n    assertEquals(\"SHA1PRNG\", new SecureRandom().getAlgorithm());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"146464f03e9a694d866ba222f64b980e4f62a188","date":1491267608,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() {\n    if(Boolean.parseBoolean(System.getProperty(\"test.solr.allow.any.securerandom\",\"false\")))\n      return;\n    // Use -Djava.security.egd=file:/dev/./urandom VM option if you hit this \n    assertEquals(\"SHA1PRNG\", new SecureRandom().getAlgorithm());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008","date":1491296430,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() {\n    if(Boolean.parseBoolean(System.getProperty(\"test.solr.allow.any.securerandom\",\"false\")))\n      return;\n    // Use -Djava.security.egd=file:/dev/./urandom VM option if you hit this \n    assertEquals(\"SHA1PRNG\", new SecureRandom().getAlgorithm());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a331e15d91a7c704d99b39ed67b73449b7ae9","date":1500572405,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() throws InterruptedException {\n    final String EGD = \"java.security.egd\";\n    final String URANDOM = \"file:/dev/./urandom\";\n    final String ALLOWED = \"test.solr.allowed.securerandom\";\n    final String allowedAlg = System.getProperty(ALLOWED);\n    final String actualEGD = System.getProperty(EGD);\n    \n    log.info(\"SecureRandom sanity checks: {}={} & {}={}\", ALLOWED, allowedAlg, EGD, actualEGD);\n\n    if (null != allowedAlg) {\n      // the user has explicitly requested to bypass our assertions and allow a particular alg\n      // the only thing we should do is assert that the algorithm they have whitelisted is actaully used\n      \n      \n      final String actualAlg = (new SecureRandom()).getAlgorithm();\n      assertEquals(\"Algorithm specified using \"+ALLOWED+\" system property \" +\n                   \"does not match actual algorithm\", allowedAlg, actualAlg);\n      return;\n    }\n    // else: no user override, do the checks we want including \n    \n    if (null == actualEGD) {\n      System.setProperty(EGD, URANDOM);\n      log.warn(\"System property {} was not set by test runner, forcibly set to expected: {}\", EGD, URANDOM);\n    } else if (! URANDOM.equals(actualEGD) ) {\n      log.warn(\"System property {}={} .. test runner should use expected: {}\", EGD, actualEGD, URANDOM);\n    }\n    \n    final String algorithm = (new SecureRandom()).getAlgorithm();\n    \n    assertFalse(\"SecureRandom algorithm '\" + algorithm + \"' is in use by your JVM, \" +\n                \"which is a potentially blocking algorithm on some environments. \" +\n                \"Please report the details of this failure (and your JVM vendor/version) to solr-user@lucene.apache.org. \" +\n                \"You can try to run your tests with -D\"+EGD+\"=\"+URANDOM+\" or bypass this check using \" +\n                \"-Dtest.solr.allowed.securerandom=\"+ algorithm +\" as a JVM option when running tests.\",\n                // be permissive in our checks and blacklist only algorithms \n                // that are known to be blocking under some circumstances\n                algorithm.equals(\"NativePRNG\") || algorithm.equals(\"NativePRNGBlocking\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertNonBlockingRandomGeneratorAvailable().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void assertNonBlockingRandomGeneratorAvailable() throws InterruptedException {\n    final String EGD = \"java.security.egd\";\n    final String URANDOM = \"file:/dev/./urandom\";\n    final String ALLOWED = \"test.solr.allowed.securerandom\";\n    final String allowedAlg = System.getProperty(ALLOWED);\n    final String actualEGD = System.getProperty(EGD);\n    \n    log.info(\"SecureRandom sanity checks: {}={} & {}={}\", ALLOWED, allowedAlg, EGD, actualEGD);\n\n    if (null != allowedAlg) {\n      // the user has explicitly requested to bypass our assertions and allow a particular alg\n      // the only thing we should do is assert that the algorithm they have whitelisted is actaully used\n      \n      \n      final String actualAlg = (new SecureRandom()).getAlgorithm();\n      assertEquals(\"Algorithm specified using \"+ALLOWED+\" system property \" +\n                   \"does not match actual algorithm\", allowedAlg, actualAlg);\n      return;\n    }\n    // else: no user override, do the checks we want including \n    \n    if (null == actualEGD) {\n      System.setProperty(EGD, URANDOM);\n      log.warn(\"System property {} was not set by test runner, forcibly set to expected: {}\", EGD, URANDOM);\n    } else if (! URANDOM.equals(actualEGD) ) {\n      log.warn(\"System property {}={} .. test runner should use expected: {}\", EGD, actualEGD, URANDOM);\n    }\n    \n    final String algorithm = (new SecureRandom()).getAlgorithm();\n    \n    assertFalse(\"SecureRandom algorithm '\" + algorithm + \"' is in use by your JVM, \" +\n                \"which is a potentially blocking algorithm on some environments. \" +\n                \"Please report the details of this failure (and your JVM vendor/version) to solr-user@lucene.apache.org. \" +\n                \"You can try to run your tests with -D\"+EGD+\"=\"+URANDOM+\" or bypass this check using \" +\n                \"-Dtest.solr.allowed.securerandom=\"+ algorithm +\" as a JVM option when running tests.\",\n                // be permissive in our checks and blacklist only algorithms \n                // that are known to be blocking under some circumstances\n                algorithm.equals(\"NativePRNG\") || algorithm.equals(\"NativePRNGBlocking\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bca82f249670ddf59ba61176011f066430586bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45f7182810bbeb650d9fbfb43f3c1926ebc81694":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"146464f03e9a694d866ba222f64b980e4f62a188":["0bca82f249670ddf59ba61176011f066430586bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["22badfc1c0c65f5ea7ce8d735c5b75ae176a9008","b97a331e15d91a7c704d99b39ed67b73449b7ae9"],"b97a331e15d91a7c704d99b39ed67b73449b7ae9":["146464f03e9a694d866ba222f64b980e4f62a188"],"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008":["45f7182810bbeb650d9fbfb43f3c1926ebc81694"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b97a331e15d91a7c704d99b39ed67b73449b7ae9"]},"commit2Childs":{"0bca82f249670ddf59ba61176011f066430586bf":["146464f03e9a694d866ba222f64b980e4f62a188"],"45f7182810bbeb650d9fbfb43f3c1926ebc81694":["22badfc1c0c65f5ea7ce8d735c5b75ae176a9008"],"146464f03e9a694d866ba222f64b980e4f62a188":["b97a331e15d91a7c704d99b39ed67b73449b7ae9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bca82f249670ddf59ba61176011f066430586bf","45f7182810bbeb650d9fbfb43f3c1926ebc81694"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b97a331e15d91a7c704d99b39ed67b73449b7ae9":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22badfc1c0c65f5ea7ce8d735c5b75ae176a9008":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}