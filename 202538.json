{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader gets closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if(closeReader)\n      reader.close();\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader gets closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if(closeReader)\n      reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader gets closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if(closeReader)\n      reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader gets closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if(closeReader)\n      reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader gets closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if(closeReader)\n      reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35a92f5dc489d33b99b4c992487186f409dc69c4","date":1310739671,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n  }\n\n","sourceOld":"  /**\n   * Note that the underlying IndexReader is not closed, if\n   * IndexSearcher was constructed with IndexSearcher(IndexReader r).\n   * If the IndexReader was supplied implicitly by specifying a directory, then\n   * the IndexReader is closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (closeReader) {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() throws IOException {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() throws IOException {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["35a92f5dc489d33b99b4c992487186f409dc69c4"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"35a92f5dc489d33b99b4c992487186f409dc69c4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","35a92f5dc489d33b99b4c992487186f409dc69c4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"35a92f5dc489d33b99b4c992487186f409dc69c4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}