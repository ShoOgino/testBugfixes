{"path":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.intValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      Writer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.intValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}