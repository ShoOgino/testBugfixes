{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.CompressedBinaryBlockWriter#flushData().mjava","commits":[{"id":"5fcfc028fca127dc2779630e53a9c2ec208ee7a0","date":1582034562,"type":0,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesConsumer.CompressedBinaryBlockWriter#flushData().mjava","pathOld":"/dev/null","sourceNew":"    private void flushData() throws IOException {\n      if (numDocsInCurrentBlock > 0) {\n        // Write offset to this block to temporary offsets file\n        totalChunks++;\n        long thisBlockStartPointer = data.getFilePointer();\n        \n        // Optimisation - check if all lengths are same\n        boolean allLengthsSame = true;\n        for (int i = 1; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n          if (docLengths[i] != docLengths[i-1]) {\n            allLengthsSame = false;\n            break;\n          }\n        }\n        if (allLengthsSame) {\n            // Only write one value shifted. Steal a bit to indicate all other lengths are the same\n            int onlyOneLength = (docLengths[0] <<1) | 1;\n            data.writeVInt(onlyOneLength);\n        } else {\n          for (int i = 0; i < Lucene80DocValuesFormat.BINARY_DOCS_PER_COMPRESSED_BLOCK; i++) {\n            if (i == 0) {\n              // Write first value shifted and steal a bit to indicate other lengths are to follow\n              int multipleLengths = (docLengths[0] <<1);\n              data.writeVInt(multipleLengths);              \n            } else {\n              data.writeVInt(docLengths[i]);\n            }\n          }\n        }\n        maxUncompressedBlockLength = Math.max(maxUncompressedBlockLength, uncompressedBlockLength);\n        LZ4.compress(block, 0, uncompressedBlockLength, data, ht);\n        numDocsInCurrentBlock = 0;\n        // Ensure initialized with zeroes because full array is always written\n        Arrays.fill(docLengths, 0);\n        uncompressedBlockLength = 0;\n        maxPointer = data.getFilePointer();\n        tempBinaryOffsets.writeVLong(maxPointer - thisBlockStartPointer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}