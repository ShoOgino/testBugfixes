{"path":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        } catch (Exception e) {\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        } catch (Exception e) {\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new RAMDirectory();\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}