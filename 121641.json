{"path":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(luceneQ.getBoost()));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(luceneQ.getBoost()));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getSlowAtomicReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testBoost().mjava","sourceNew":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), req).getQuery().rewrite(req.getSearcher().getSlowAtomicReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","sourceOld":"  @Ignore(\"SOLR-7814, also don't forget cover boost at testCacheHit()\")\n  public void testBoost() throws Exception {\n    indexDataForScorring();\n    ScoreMode score = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n\n    final SolrQueryRequest req = req(\"q\", \"{!join from=movieId_s to=id score=\" + score + \" b=200}title:movie\", \"fl\", \"id,score\", \"omitHeader\", \"true\");\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, new SolrQueryResponse()));\n    final Query luceneQ = QParser.getParser(req.getParams().get(\"q\"), null, req).getQuery().rewrite(req.getSearcher().getLeafReader());\n    assertTrue(luceneQ instanceof BoostQuery);\n    float boost = ((BoostQuery) luceneQ).getBoost();\n    assertEquals(\"\" + luceneQ, Float.floatToIntBits(200), Float.floatToIntBits(boost));\n    SolrRequestInfo.clearRequestInfo();\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["2dfdf766e55e943d942055d7de53c7ad6bc45283","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","e07c409cff8701e4dc3d45934b021a949a5a8822"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["2dfdf766e55e943d942055d7de53c7ad6bc45283","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e07c409cff8701e4dc3d45934b021a949a5a8822"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["e07c409cff8701e4dc3d45934b021a949a5a8822","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}