{"path":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  final synchronized TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enumerator w/o seeking\n    if (enumerator.term() != null\t\t\t  // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (enumerator.position/TermInfosWriter.INDEX_INTERVAL)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  final synchronized TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enumerator w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  final synchronized TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enumerator w/o seeking\n    if (enumerator.term() != null\t\t\t  // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (enumerator.position/TermInfosWriter.INDEX_INTERVAL)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e03e3f081e8581c90e28db2f37ab70239194e12b","date":1086627352,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  final synchronized TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enumerator w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3778b73bb813f2d72a86f83c78f3fd5a988eb08c","date":1097251129,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev != null && term.compareTo(enumerator.prev) > 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde86e98c3d4e1e436c54b2303fc946a19efb893","date":1110227284,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/enumerator.indexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    return get(term, true);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    if (size == 0) return null;\n\n    ensureIndexIsRead();\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    SegmentTermEnum enumerator = getEnum();\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n\t  || term.compareTo(indexTerms[enumOffset]) < 0)\n\treturn scanEnum(term);\t\t\t  // no need to seek\n    }\n\n    // random-access: must seek\n    seekEnum(getIndexOffset(term));\n    return scanEnum(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    return get(term, false);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    return get(term, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#get(Term).mjava","sourceNew":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    return get(term, false);\n  }\n\n","sourceOld":"  /** Returns the TermInfo for a Term in the set, or null. */\n  TermInfo get(Term term) throws IOException {\n    return get(term, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde86e98c3d4e1e436c54b2303fc946a19efb893":["3778b73bb813f2d72a86f83c78f3fd5a988eb08c"],"eafd816608011f66422f3052c37962973582d12a":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"b3788e811fcba5db4611c3281af4d165044ad9d6":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"3778b73bb813f2d72a86f83c78f3fd5a988eb08c":["eafd816608011f66422f3052c37962973582d12a"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e03e3f081e8581c90e28db2f37ab70239194e12b":["15c469602973ef1a33c9a07367a380d278ffab20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"15c469602973ef1a33c9a07367a380d278ffab20":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["15c469602973ef1a33c9a07367a380d278ffab20"],"bde86e98c3d4e1e436c54b2303fc946a19efb893":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"eafd816608011f66422f3052c37962973582d12a":["3778b73bb813f2d72a86f83c78f3fd5a988eb08c"],"b3788e811fcba5db4611c3281af4d165044ad9d6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3778b73bb813f2d72a86f83c78f3fd5a988eb08c":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"e03e3f081e8581c90e28db2f37ab70239194e12b":["eafd816608011f66422f3052c37962973582d12a"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"15c469602973ef1a33c9a07367a380d278ffab20":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}