{"path":"lucene/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Version,Map[#,#-extends-V]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Version,Map[#,#-extends-V]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Version,Map[#,#-extends-V]).mjava","sourceNew":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * <p>\n   * <b>Note:</b> If you intend to create a copy of another {@link CharArrayMap} where\n   * the {@link Version} of the source map differs from its copy\n   * {@link #CharArrayMap(Version, Map, boolean)} should be used instead.\n   * The {@link #copy(Version, Map)} will preserve the {@link Version} of the\n   * source map it is an instance of {@link CharArrayMap}.\n   * </p>\n   * \n   * @param matchVersion\n   *          compatibility match version see <a href=\"#version\">Version\n   *          note</a> above for details. This argument will be ignored if the\n   *          given map is a {@link CharArrayMap}.\n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Version matchVersion, final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<V>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<V>(matchVersion, map, false);\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * <p>\n   * <b>Note:</b> If you intend to create a copy of another {@link CharArrayMap} where\n   * the {@link Version} of the source map differs from its copy\n   * {@link #CharArrayMap(Version, Map, boolean)} should be used instead.\n   * The {@link #copy(Version, Map)} will preserve the {@link Version} of the\n   * source map it is an instance of {@link CharArrayMap}.\n   * </p>\n   * \n   * @param matchVersion\n   *          compatibility match version see <a href=\"#version\">Version\n   *          note</a> above for details. This argument will be ignored if the\n   *          given map is a {@link CharArrayMap}.\n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Version matchVersion, final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<V>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<V>(matchVersion, map, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArrayMap#[V]_copy(Version,Map[#,#-extends-V]).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharArrayMap#[V]_copy(Version,Map[#,#-extends-V]).mjava","sourceNew":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * <p>\n   * <b>Note:</b> If you intend to create a copy of another {@link CharArrayMap} where\n   * the {@link Version} of the source map differs from its copy\n   * {@link #CharArrayMap(Version, Map, boolean)} should be used instead.\n   * The {@link #copy(Version, Map)} will preserve the {@link Version} of the\n   * source map it is an instance of {@link CharArrayMap}.\n   * </p>\n   * \n   * @param matchVersion\n   *          compatibility match version see <a href=\"#version\">Version\n   *          note</a> above for details. This argument will be ignored if the\n   *          given map is a {@link CharArrayMap}.\n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Version matchVersion, final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<V>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<V>(matchVersion, map, false);\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of the given map as a {@link CharArrayMap}. If the given map\n   * is a {@link CharArrayMap} the ignoreCase property will be preserved.\n   * <p>\n   * <b>Note:</b> If you intend to create a copy of another {@link CharArrayMap} where\n   * the {@link Version} of the source map differs from its copy\n   * {@link #CharArrayMap(Version, Map, boolean)} should be used instead.\n   * The {@link #copy(Version, Map)} will preserve the {@link Version} of the\n   * source map it is an instance of {@link CharArrayMap}.\n   * </p>\n   * \n   * @param matchVersion\n   *          compatibility match version see <a href=\"#version\">Version\n   *          note</a> above for details. This argument will be ignored if the\n   *          given map is a {@link CharArrayMap}.\n   * @param map\n   *          a map to copy\n   * @return a copy of the given map as a {@link CharArrayMap}. If the given map\n   *         is a {@link CharArrayMap} the ignoreCase property as well as the\n   *         matchVersion will be of the given map will be preserved.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <V> CharArrayMap<V> copy(final Version matchVersion, final Map<?,? extends V> map) {\n    if(map == EMPTY_MAP)\n      return emptyMap();\n    if(map instanceof CharArrayMap) {\n      CharArrayMap<V> m = (CharArrayMap<V>) map;\n      // use fast path instead of iterating all values\n      // this is even on very small sets ~10 times faster than iterating\n      final char[][] keys = new char[m.keys.length][];\n      System.arraycopy(m.keys, 0, keys, 0, keys.length);\n      final V[] values = (V[]) new Object[m.values.length];\n      System.arraycopy(m.values, 0, values, 0, values.length);\n      m = new CharArrayMap<V>(m);\n      m.keys = keys;\n      m.values = values;\n      return m;\n    }\n    return new CharArrayMap<V>(matchVersion, map, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}