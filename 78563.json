{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeRPTStrategy(String,Config,Map[String,String],SpatialContext).mjava","commits":[{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeRPTStrategy(String,Config,Map[String,String],SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  protected RecursivePrefixTreeStrategy makeRPTStrategy(String spatialField, Config config,\n                                                        Map<String, String> configMap, SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, spatialField);\n    strategy.setPointsOnly(config.get(\"spatial.docPointsOnly\", false));\n    strategy.setPruneLeafyBranches(config.get(\"spatial.pruneLeafyBranches\", true));\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeRPTStrategy(String,Config,Map[String,String],SpatialContext).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SpatialDocMaker#makeRPTStrategy(String,Config,Map[String,String],SpatialContext).mjava","sourceNew":"  protected RecursivePrefixTreeStrategy makeRPTStrategy(String spatialField, Config config,\n                                                        Map<String, String> configMap, SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, spatialField);\n    strategy.setPointsOnly(config.get(\"spatial.docPointsOnly\", false));\n    final boolean pruneLeafyBranches = config.get(\"spatial.pruneLeafyBranches\", true);\n    if (grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) grid).setPruneLeafyBranches(pruneLeafyBranches);\n      strategy.setPruneLeafyBranches(false);//always leave it to packed grid, even though it isn't the same\n    } else {\n      strategy.setPruneLeafyBranches(pruneLeafyBranches);\n    }\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","sourceOld":"  protected RecursivePrefixTreeStrategy makeRPTStrategy(String spatialField, Config config,\n                                                        Map<String, String> configMap, SpatialContext ctx) {\n    //A factory for the prefix tree grid\n    SpatialPrefixTree grid = SpatialPrefixTreeFactory.makeSPT(configMap, null, ctx);\n\n    RecursivePrefixTreeStrategy strategy = new RecursivePrefixTreeStrategy(grid, spatialField);\n    strategy.setPointsOnly(config.get(\"spatial.docPointsOnly\", false));\n    strategy.setPruneLeafyBranches(config.get(\"spatial.pruneLeafyBranches\", true));\n\n    int prefixGridScanLevel = config.get(\"query.spatial.prefixGridScanLevel\", -4);\n    if (prefixGridScanLevel < 0)\n      prefixGridScanLevel = grid.getMaxLevels() + prefixGridScanLevel;\n    strategy.setPrefixGridScanLevel(prefixGridScanLevel);\n\n    double distErrPct = config.get(\"spatial.distErrPct\", .025);//doc & query; a default\n    strategy.setDistErrPct(distErrPct);\n    return strategy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"]},"commit2Childs":{"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}