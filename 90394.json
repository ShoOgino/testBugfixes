{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","commits":[{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(String,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        float freq = (Float)trie.get(s);\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        float freq = (Float)trie.get(s);\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        float freq = (Float)trie.get(s);\n        queue.insertWithOverflow(new LookupResult(s, freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        float freq = (Float)trie.get(s);\n        res.add(new LookupResult(s, freq));\n      }      \n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        long freq = ((Number)trie.get(s)).longValue();\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        long freq = ((Number)trie.get(s)).longValue();\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        float freq = (Float)trie.get(s);\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        float freq = (Float)trie.get(s);\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        long freq = ((Number)trie.get(s)).longValue();\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        long freq = ((Number)trie.get(s)).longValue();\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        long freq = ((Number)trie.get(s)).longValue();\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        long freq = ((Number)trie.get(s)).longValue();\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    List<LookupResult> res = new ArrayList<LookupResult>();\n    List<String> list;\n    int count = onlyMorePopular ? num * 2 : num;\n    if (usePrefix) {\n      list = trie.matchPrefix(key, count);\n    } else {\n      list = trie.matchAlmost(key, count);\n    }\n    if (list == null || list.size() == 0) {\n      return res;\n      \n    }\n    int maxCnt = Math.min(num, list.size());\n    if (onlyMorePopular) {\n      LookupPriorityQueue queue = new LookupPriorityQueue(num);\n      for (String s : list) {\n        long freq = ((Number)trie.get(s)).longValue();\n        queue.insertWithOverflow(new LookupResult(new CharsRef(s), freq));\n      }\n      for (LookupResult lr : queue.getResults()) {\n        res.add(lr);\n      }\n    } else {\n      for (int i = 0; i < maxCnt; i++) {\n        String s = list.get(i);\n        long freq = ((Number)trie.get(s)).longValue();\n        res.add(new LookupResult(new CharsRef(s), freq));\n      }      \n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}