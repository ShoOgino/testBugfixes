{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentInfoPerCommit si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"256a0e54e76f18e115a43e7fe793b54d4e9a3005","date":1412426514,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f412711b73fe38b28bb793928ad02da8c829cff5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n    \n//    System.out.println(\"[\" + Thread.currentThread().getName() + \"] SR.init: sharing reader: \" + sr + \" for gens=\" + sr.genDVProducers.keySet());\n    \n    // increment refCount of DocValuesProducers that are used by this reader\n    boolean success = false;\n    try {\n      final Codec codec = si.info.getCodec();\n      if (si.getFieldInfosGen() == -1) {\n        fieldInfos = sr.fieldInfos;\n      } else {\n        fieldInfos = readFieldInfos(si);\n      }\n      \n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f412711b73fe38b28bb793928ad02da8c829cff5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this(si, sr, liveDocs, numDocs, true);\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":["e072d0b1fc19e0533d8ce432eed245196bca6fde","a6b82a3644db30161c3cbd3e23aeefe19cb88113","256a0e54e76f18e115a43e7fe793b54d4e9a3005","ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this(si, sr, liveDocs, numDocs, true);\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    if (numDocs > si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"numDocs=\" + numDocs + \" but maxDoc=\" + si.info.maxDoc());\n    }\n    if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {\n      throw new IllegalArgumentException(\"maxDoc=\" + si.info.maxDoc() + \" but liveDocs.size()=\" + liveDocs.length());\n    }\n    this.si = si;\n    this.liveDocs = liveDocs;\n    this.numDocs = numDocs;\n    this.core = sr.core;\n    core.incRef();\n    this.segDocValues = sr.segDocValues;\n\n    boolean success = false;\n    try {\n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n      success = true;\n    } finally {\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,SegmentReader,Bits,int).mjava","sourceNew":null,"sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and using the provided in-memory\n   *  liveDocs.  Used by IndexWriter to provide a new NRT\n   *  reader */\n  SegmentReader(SegmentCommitInfo si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {\n    this(si, sr, liveDocs, numDocs, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"9bb9a29a5e71a90295f175df8919802993142c9a":["22a2e66dfda83847e80095b8693c660742ab3e9c","256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"f412711b73fe38b28bb793928ad02da8c829cff5":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["9bb9a29a5e71a90295f175df8919802993142c9a"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["f412711b73fe38b28bb793928ad02da8c829cff5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a6b82a3644db30161c3cbd3e23aeefe19cb88113","f412711b73fe38b28bb793928ad02da8c829cff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["578a4d73d90ecd838846cc32bf1098aaa262b524"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","9bb9a29a5e71a90295f175df8919802993142c9a"],"f412711b73fe38b28bb793928ad02da8c829cff5":["578a4d73d90ecd838846cc32bf1098aaa262b524","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["f412711b73fe38b28bb793928ad02da8c829cff5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}