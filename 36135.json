{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterLong().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterLong() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n    NumericRangeQuery<Long> numRangeFilter = (NumericRangeQuery) filter;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='LoNg' lowerTerm='-2321' upperTerm='60000000' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Long> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Long.valueOf(-2321L), numRangeFilter2.getMin());\n    assertEquals(Long.valueOf(60000000L), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["251550f5d19b526a76f8c5126ae7bb2d22cf8935","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}