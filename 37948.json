{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, byte segmentID[], IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, byte segmentID[], IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version;\n      try {\n        version = Version.parse(input.readString());\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, null);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["55980207f1977bd1463465de1659b821347e2fa8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"55980207f1977bd1463465de1659b821347e2fa8":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}