{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#getInternal(long).mjava","commits":[{"id":"4ae09ef6db22a0e704f2d832b5ce8737167ab09b","date":1564387489,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#getInternal(long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer getInternal(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert scoreMode.needsScores();\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost), scoreMode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#getInternal(long).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer getInternal(long leadCost) throws IOException {\n    // three cases: conjunction, disjunction, or mix\n    leadCost = Math.min(leadCost, cost());\n\n    // pure conjunction\n    if (subs.get(Occur.SHOULD).isEmpty()) {\n      return excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // pure disjunction\n    if (subs.get(Occur.FILTER).isEmpty() && subs.get(Occur.MUST).isEmpty()) {\n      return excl(opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost), subs.get(Occur.MUST_NOT), leadCost);\n    }\n\n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n\n    if (minShouldMatch > 0) {\n      Scorer req = excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost);\n      Scorer opt = opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost);\n      return new ConjunctionScorer(weight, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      assert scoreMode.needsScores();\n      return new ReqOptSumScorer(\n          excl(req(subs.get(Occur.FILTER), subs.get(Occur.MUST), leadCost), subs.get(Occur.MUST_NOT), leadCost),\n          opt(subs.get(Occur.SHOULD), minShouldMatch, scoreMode, leadCost), scoreMode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ae09ef6db22a0e704f2d832b5ce8737167ab09b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ae09ef6db22a0e704f2d832b5ce8737167ab09b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ae09ef6db22a0e704f2d832b5ce8737167ab09b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ae09ef6db22a0e704f2d832b5ce8737167ab09b","f8061ddd97f3352007d927dae445884a6f3d857b"],"4ae09ef6db22a0e704f2d832b5ce8737167ab09b":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}