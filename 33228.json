{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(int,int).mjava","commits":[{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Reverse the last numBytes. */\n  public void reverse(int srcPos, int destPos) {\n    assert srcPos < destPos;\n    //System.out.println(\"reverse src=\" + srcPos + \" dest=\" + destPos);\n\n    int srcBlockIndex = srcPos >> blockBits;\n    int src = srcPos & blockMask;\n    byte[] srcBlock = blocks.get(srcBlockIndex);\n\n    int destBlockIndex = destPos >> blockBits;\n    int dest = destPos & blockMask;\n    byte[] destBlock = blocks.get(destBlockIndex);\n    //System.out.println(\"  srcBlock=\" + srcBlockIndex + \" destBlock=\" + destBlockIndex);\n\n    int limit = (destPos - srcPos + 1)/2;\n    for(int i=0;i<limit;i++) {\n      //System.out.println(\"  cycle src=\" + src + \" dest=\" + dest);\n      byte b = srcBlock[src];\n      srcBlock[src] = destBlock[dest];\n      destBlock[dest] = b;\n      src++;\n      if (src == blockSize) {\n        srcBlockIndex++;\n        srcBlock = blocks.get(srcBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        src = 0;\n      }\n\n      dest--;\n      if (dest == -1) {\n        destBlockIndex--;\n        destBlock = blocks.get(destBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        dest = blockSize-1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73e44327cb5401cc5098da2f488c899954c9bfbc","date":1358092175,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(int,int).mjava","sourceNew":"  /** Reverse from srcPos, inclusive, to destPos, inclusive. */\n  public void reverse(int srcPos, int destPos) {\n    assert srcPos < destPos;\n    assert destPos < getPosition();\n    //System.out.println(\"reverse src=\" + srcPos + \" dest=\" + destPos);\n\n    int srcBlockIndex = srcPos >> blockBits;\n    int src = srcPos & blockMask;\n    byte[] srcBlock = blocks.get(srcBlockIndex);\n\n    int destBlockIndex = destPos >> blockBits;\n    int dest = destPos & blockMask;\n    byte[] destBlock = blocks.get(destBlockIndex);\n    //System.out.println(\"  srcBlock=\" + srcBlockIndex + \" destBlock=\" + destBlockIndex);\n\n    int limit = (destPos - srcPos + 1)/2;\n    for(int i=0;i<limit;i++) {\n      //System.out.println(\"  cycle src=\" + src + \" dest=\" + dest);\n      byte b = srcBlock[src];\n      srcBlock[src] = destBlock[dest];\n      destBlock[dest] = b;\n      src++;\n      if (src == blockSize) {\n        srcBlockIndex++;\n        srcBlock = blocks.get(srcBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        src = 0;\n      }\n\n      dest--;\n      if (dest == -1) {\n        destBlockIndex--;\n        destBlock = blocks.get(destBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        dest = blockSize-1;\n      }\n    }\n  }\n\n","sourceOld":"  /** Reverse the last numBytes. */\n  public void reverse(int srcPos, int destPos) {\n    assert srcPos < destPos;\n    //System.out.println(\"reverse src=\" + srcPos + \" dest=\" + destPos);\n\n    int srcBlockIndex = srcPos >> blockBits;\n    int src = srcPos & blockMask;\n    byte[] srcBlock = blocks.get(srcBlockIndex);\n\n    int destBlockIndex = destPos >> blockBits;\n    int dest = destPos & blockMask;\n    byte[] destBlock = blocks.get(destBlockIndex);\n    //System.out.println(\"  srcBlock=\" + srcBlockIndex + \" destBlock=\" + destBlockIndex);\n\n    int limit = (destPos - srcPos + 1)/2;\n    for(int i=0;i<limit;i++) {\n      //System.out.println(\"  cycle src=\" + src + \" dest=\" + dest);\n      byte b = srcBlock[src];\n      srcBlock[src] = destBlock[dest];\n      destBlock[dest] = b;\n      src++;\n      if (src == blockSize) {\n        srcBlockIndex++;\n        srcBlock = blocks.get(srcBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        src = 0;\n      }\n\n      dest--;\n      if (dest == -1) {\n        destBlockIndex--;\n        destBlock = blocks.get(destBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        dest = blockSize-1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#reverse(int,int).mjava","sourceNew":"  /** Reverse from srcPos, inclusive, to destPos, inclusive. */\n  public void reverse(long srcPos, long destPos) {\n    assert srcPos < destPos;\n    assert destPos < getPosition();\n    //System.out.println(\"reverse src=\" + srcPos + \" dest=\" + destPos);\n\n    int srcBlockIndex = (int) (srcPos >> blockBits);\n    int src = (int) (srcPos & blockMask);\n    byte[] srcBlock = blocks.get(srcBlockIndex);\n\n    int destBlockIndex = (int) (destPos >> blockBits);\n    int dest = (int) (destPos & blockMask);\n    byte[] destBlock = blocks.get(destBlockIndex);\n    //System.out.println(\"  srcBlock=\" + srcBlockIndex + \" destBlock=\" + destBlockIndex);\n\n    int limit = (int) (destPos - srcPos + 1)/2;\n    for(int i=0;i<limit;i++) {\n      //System.out.println(\"  cycle src=\" + src + \" dest=\" + dest);\n      byte b = srcBlock[src];\n      srcBlock[src] = destBlock[dest];\n      destBlock[dest] = b;\n      src++;\n      if (src == blockSize) {\n        srcBlockIndex++;\n        srcBlock = blocks.get(srcBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        src = 0;\n      }\n\n      dest--;\n      if (dest == -1) {\n        destBlockIndex--;\n        destBlock = blocks.get(destBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        dest = blockSize-1;\n      }\n    }\n  }\n\n","sourceOld":"  /** Reverse from srcPos, inclusive, to destPos, inclusive. */\n  public void reverse(int srcPos, int destPos) {\n    assert srcPos < destPos;\n    assert destPos < getPosition();\n    //System.out.println(\"reverse src=\" + srcPos + \" dest=\" + destPos);\n\n    int srcBlockIndex = srcPos >> blockBits;\n    int src = srcPos & blockMask;\n    byte[] srcBlock = blocks.get(srcBlockIndex);\n\n    int destBlockIndex = destPos >> blockBits;\n    int dest = destPos & blockMask;\n    byte[] destBlock = blocks.get(destBlockIndex);\n    //System.out.println(\"  srcBlock=\" + srcBlockIndex + \" destBlock=\" + destBlockIndex);\n\n    int limit = (destPos - srcPos + 1)/2;\n    for(int i=0;i<limit;i++) {\n      //System.out.println(\"  cycle src=\" + src + \" dest=\" + dest);\n      byte b = srcBlock[src];\n      srcBlock[src] = destBlock[dest];\n      destBlock[dest] = b;\n      src++;\n      if (src == blockSize) {\n        srcBlockIndex++;\n        srcBlock = blocks.get(srcBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        src = 0;\n      }\n\n      dest--;\n      if (dest == -1) {\n        destBlockIndex--;\n        destBlock = blocks.get(destBlockIndex);\n        //System.out.println(\"  set destBlock=\" + destBlock + \" srcBlock=\" + srcBlock);\n        dest = blockSize-1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73e44327cb5401cc5098da2f488c899954c9bfbc":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["73e44327cb5401cc5098da2f488c899954c9bfbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"73e44327cb5401cc5098da2f488c899954c9bfbc":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["73e44327cb5401cc5098da2f488c899954c9bfbc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}