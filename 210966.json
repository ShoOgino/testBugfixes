{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletes().mjava","sourceNew":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletes() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedDeletesStream.ApplyDeletesResult result;\n    result = bufferedDeletesStream.applyDeletes(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentInfoPerCommit info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedDeletesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b7c6630218ed9693cdb8643276513f9f0043f4","date":1406648084,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4f3b0a30c9d521b86f768348f832af93505b4eb","date":1420797674,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","sourceOld":"  final synchronized void applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n  }\n\n","bugFix":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalDocCount()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.getDocCount());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll();\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll();\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll();\n  }\n\n","sourceOld":"  final synchronized boolean applyAllDeletesAndUpdates() throws IOException {\n    flushDeletesCount.incrementAndGet();\n    final BufferedUpdatesStream.ApplyDeletesResult result;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments maxDoc=\" + (docWriter.getNumDocs() + segmentInfos.totalMaxDoc()));\n    }\n    result = bufferedUpdatesStream.applyDeletesAndUpdates(readerPool, segmentInfos.asList());\n    if (result.anyDeletes) {\n      checkpoint();\n    }\n    if (!keepFullyDeletedSegments && result.allDeleted != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"drop 100% deleted segments: \" + segString(result.allDeleted));\n      }\n      for (SegmentCommitInfo info : result.allDeleted) {\n        // If a merge has already registered for this\n        // segment, we leave it in the readerPool; the\n        // merge will skip merging it and will then drop\n        // it once it's done:\n        if (!mergingSegments.contains(info)) {\n          segmentInfos.remove(info);\n          pendingNumDocs.addAndGet(-info.info.maxDoc());\n          readerPool.drop(info);\n        }\n      }\n      checkpoint();\n    }\n    bufferedUpdatesStream.prune(segmentInfos);\n    return result.anyDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll(this);\n  }\n\n","sourceOld":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#applyAllDeletesAndUpdates().mjava","sourceNew":"  private void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll(this);\n  }\n\n","sourceOld":"  final void applyAllDeletesAndUpdates() throws IOException {\n    assert Thread.holdsLock(this) == false;\n    flushDeletesCount.incrementAndGet();\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now apply all deletes for all segments buffered updates bytesUsed=\" + bufferedUpdatesStream.ramBytesUsed() + \" reader pool bytesUsed=\" + readerPool.ramBytesUsed());\n    }\n    bufferedUpdatesStream.waitApplyAll(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["e4f3b0a30c9d521b86f768348f832af93505b4eb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e4f3b0a30c9d521b86f768348f832af93505b4eb","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["e4f3b0a30c9d521b86f768348f832af93505b4eb","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"e4f3b0a30c9d521b86f768348f832af93505b4eb":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"e4f3b0a30c9d521b86f768348f832af93505b4eb":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["e4f3b0a30c9d521b86f768348f832af93505b4eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}