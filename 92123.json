{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","sourceNew":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","sourceOld":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#newDoc(String,Shape).mjava","sourceNew":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","sourceOld":"  //Override so we can index parts of a pair separately, resulting in the detailLevel\n  // being independent for each shape vs the whole thing\n  @Override\n  protected Document newDoc(String id, Shape shape) {\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", id, Field.Store.YES));\n    if (shape != null) {\n      Collection<Shape> shapes;\n      if (shape instanceof ShapePair) {\n        shapes = new ArrayList<>(2);\n        shapes.add(((ShapePair)shape).shape1);\n        shapes.add(((ShapePair)shape).shape2);\n      } else {\n        shapes = Collections.singleton(shape);\n      }\n      for (Shape shapei : shapes) {\n        for (Field f : strategy.createIndexableFields(shapei)) {\n          doc.add(f);\n        }\n      }\n      if (storeShape)//just for diagnostics\n        doc.add(new StoredField(strategy.getFieldName(), shape.toString()));\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}