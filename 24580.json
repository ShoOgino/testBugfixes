{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n\n    }\n    \n    if (createNodeSet != null && createNodeSet.equals(OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY)) {\n      cluster.waitForActiveCollection(collectionName, numShards, 0);\n    } else {\n      cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n    }\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":["5719bfb2650ba43855e20564d39873bbbdc7f02c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n\n    }\n    \n    if (createNodeSet != null && createNodeSet.equals(OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY)) {\n      cluster.waitForActiveCollection(collectionName, numShards, 0);\n    } else {\n      cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n    }\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n\n    }\n    \n    if (createNodeSet != null && createNodeSet.equals(OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY)) {\n      cluster.waitForActiveCollection(collectionName, numShards, 0);\n    } else {\n      cluster.waitForActiveCollection(collectionName, numShards, numShards * numReplicas);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}