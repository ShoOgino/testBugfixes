{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(\"UTF-8\");\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(\"UTF-8\");\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(\"UTF-8\");\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          log.info(\"Failed to persist managed schema at \" + managedSchemaPath \n                  + \" - version mismatch\");\n          success = false;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema version \"+schemaZkVersion+\" at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n\n          log.error(\"Bad version when trying to persist schema using \"+schemaZkVersion+\" due to: \"+e);\n\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema version \"+schemaZkVersion+\" at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n\n          log.error(\"Bad version when trying to persist schema using \"+schemaZkVersion+\" due to: \"+e);\n\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema version \"+schemaZkVersion+\" at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n\n          log.error(\"Bad version when trying to persist schema using \"+schemaZkVersion+\" due to: \"+e);\n\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchemaToZooKeeper(boolean).mjava","sourceNew":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at {}\", managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at {} already exists - no need to create it\", managedSchemaPath);\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema version {}  at {}\", schemaZkVersion, managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n\n          log.error(\"Bad version when trying to persist schema using {} due to: \", schemaZkVersion, e);\n\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","sourceOld":"  /**\n   * Persists the managed schema to ZooKeeper using optimistic concurrency.\n   * <p/>\n   * If createOnly is true, success is when the schema is created or if it previously existed.\n   * <p/>\n   * If createOnly is false, success is when the schema is persisted - this will only happen\n   * if schemaZkVersion matches the version in ZooKeeper.\n   * \n   * @return true on success \n   */\n  boolean persistManagedSchemaToZooKeeper(boolean createOnly) {\n    final ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n    final ZkController zkController = zkLoader.getZkController();\n    final SolrZkClient zkClient = zkController.getZkClient();\n    final String managedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + managedSchemaResourceName;\n    boolean success = true;\n    boolean schemaChangedInZk = false;\n    try {\n      // Persist the managed schema\n      StringWriter writer = new StringWriter();\n      persist(writer);\n\n      final byte[] data = writer.toString().getBytes(StandardCharsets.UTF_8);\n      if (createOnly) {\n        try {\n          zkClient.create(managedSchemaPath, data, CreateMode.PERSISTENT, true);\n          schemaZkVersion = 0;\n          log.info(\"Created and persisted managed schema znode at \" + managedSchemaPath);\n        } catch (KeeperException.NodeExistsException e) {\n          // This is okay - do nothing and fall through\n          log.info(\"Managed schema znode at \" + managedSchemaPath + \" already exists - no need to create it\");\n        }\n      } else {\n        try {\n          // Assumption: the path exists\n          Stat stat = zkClient.setData(managedSchemaPath, data, schemaZkVersion, true);\n          schemaZkVersion = stat.getVersion();\n          log.info(\"Persisted managed schema version \"+schemaZkVersion+\" at \" + managedSchemaPath);\n        } catch (KeeperException.BadVersionException e) {\n\n          log.error(\"Bad version when trying to persist schema using \"+schemaZkVersion+\" due to: \"+e);\n\n          success = false;\n          schemaChangedInZk = true;\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof InterruptedException) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n      }\n      final String msg = \"Error persisting managed schema at \" + managedSchemaPath;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    }\n    if (schemaChangedInZk) {\n      String msg = \"Failed to persist managed schema at \" + managedSchemaPath\n        + \" - version mismatch\";\n      log.info(msg);\n      throw new SchemaChangedInZkException(ErrorCode.CONFLICT, msg + \", retry.\");\n    }\n    return success; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":["08970e5b8411182a29412c177eff67ec1110095b","7d89d7e4e5101347833eea558851bf4209218619"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"7d89d7e4e5101347833eea558851bf4209218619":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b","5eb2511ababf862ea11e10761c70ee560cd84510"],"08970e5b8411182a29412c177eff67ec1110095b":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}