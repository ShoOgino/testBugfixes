{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#FacetFieldProcessor(FacetRequest.FacetContext,FacetField,SchemaField).mjava","commits":[{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#FacetFieldProcessor(FacetRequest.FacetContext,FacetField,SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  FacetFieldProcessor(FacetRequest.FacetContext fcontext, FacetField freq, SchemaField sf) {\n    super(fcontext, freq);\n    this.sf = sf;\n    this.effectiveMincount = (int)(fcontext.isShard() ? Math.min(1 , freq.mincount) : freq.mincount);\n    this.singlePassSlotAccCollection = (freq.limit == -1 && freq.subFacets.size() == 0);\n\n    if ( null == freq.prelim_sort ) {\n      // If the user has not specified any preliminary sort, then things are very simple.\n      // Just use the \"sort\" as is w/o needing any re-sorting\n      this.sort = freq.sort;\n      this.resort = null;\n    } else {\n      assert null != freq.prelim_sort;\n      \n      if ( fcontext.isShard() ) {\n        // for a shard request, we can ignore the users requested \"sort\" and focus solely on the prelim_sort\n        // the merger will worry about the final sorting -- we don't need to resort anything...\n        this.sort = freq.prelim_sort;\n        this.resort = null;\n        \n      } else { // non shard...\n        if ( singlePassSlotAccCollection ) { // special case situation...\n          // when we can do a single pass SlotAcc collection on non-shard request, there is\n          // no point re-sorting. Ignore the freq.prelim_sort and use the freq.sort option as is...\n          this.sort = freq.sort;\n          this.resort = null;\n        } else {\n          // for a non-shard request, we will use the prelim_sort as our initial sort option if it exists\n          // then later we will re-sort on the final desired sort...\n          this.sort = freq.prelim_sort;\n          this.resort = freq.sort;\n        }\n      }\n    }\n    assert null != this.sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#FacetFieldProcessor(FacetContext,FacetField,SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#FacetFieldProcessor(FacetRequest.FacetContext,FacetField,SchemaField).mjava","sourceNew":"  FacetFieldProcessor(FacetContext fcontext, FacetField freq, SchemaField sf) {\n    super(fcontext, freq);\n    this.sf = sf;\n    this.effectiveMincount = (int)(fcontext.isShard() ? Math.min(1 , freq.mincount) : freq.mincount);\n    this.singlePassSlotAccCollection = (freq.limit == -1 && freq.subFacets.size() == 0);\n\n    if ( null == freq.prelim_sort ) {\n      // If the user has not specified any preliminary sort, then things are very simple.\n      // Just use the \"sort\" as is w/o needing any re-sorting\n      this.sort = freq.sort;\n      this.resort = null;\n    } else {\n      assert null != freq.prelim_sort;\n      \n      if ( fcontext.isShard() ) {\n        // for a shard request, we can ignore the users requested \"sort\" and focus solely on the prelim_sort\n        // the merger will worry about the final sorting -- we don't need to resort anything...\n        this.sort = freq.prelim_sort;\n        this.resort = null;\n        \n      } else { // non shard...\n        if ( singlePassSlotAccCollection ) { // special case situation...\n          // when we can do a single pass SlotAcc collection on non-shard request, there is\n          // no point re-sorting. Ignore the freq.prelim_sort and use the freq.sort option as is...\n          this.sort = freq.sort;\n          this.resort = null;\n        } else {\n          // for a non-shard request, we will use the prelim_sort as our initial sort option if it exists\n          // then later we will re-sort on the final desired sort...\n          this.sort = freq.prelim_sort;\n          this.resort = freq.sort;\n        }\n      }\n    }\n    assert null != this.sort;\n  }\n\n","sourceOld":"  FacetFieldProcessor(FacetRequest.FacetContext fcontext, FacetField freq, SchemaField sf) {\n    super(fcontext, freq);\n    this.sf = sf;\n    this.effectiveMincount = (int)(fcontext.isShard() ? Math.min(1 , freq.mincount) : freq.mincount);\n    this.singlePassSlotAccCollection = (freq.limit == -1 && freq.subFacets.size() == 0);\n\n    if ( null == freq.prelim_sort ) {\n      // If the user has not specified any preliminary sort, then things are very simple.\n      // Just use the \"sort\" as is w/o needing any re-sorting\n      this.sort = freq.sort;\n      this.resort = null;\n    } else {\n      assert null != freq.prelim_sort;\n      \n      if ( fcontext.isShard() ) {\n        // for a shard request, we can ignore the users requested \"sort\" and focus solely on the prelim_sort\n        // the merger will worry about the final sorting -- we don't need to resort anything...\n        this.sort = freq.prelim_sort;\n        this.resort = null;\n        \n      } else { // non shard...\n        if ( singlePassSlotAccCollection ) { // special case situation...\n          // when we can do a single pass SlotAcc collection on non-shard request, there is\n          // no point re-sorting. Ignore the freq.prelim_sort and use the freq.sort option as is...\n          this.sort = freq.sort;\n          this.resort = null;\n        } else {\n          // for a non-shard request, we will use the prelim_sort as our initial sort option if it exists\n          // then later we will re-sort on the final desired sort...\n          this.sort = freq.prelim_sort;\n          this.resort = freq.sort;\n        }\n      }\n    }\n    assert null != this.sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}