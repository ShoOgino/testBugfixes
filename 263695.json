{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesWithCardinality(int[],byte[],byte[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor).mjava","commits":[{"id":"8a14a9a6131884330f34844dabc1ece206ceaea9","date":1561954503,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesWithCardinality(int[],byte[],byte[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesWithCardinality(int[],byte[],byte[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  void visitDocValuesWithCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                                     IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor) throws IOException {\n\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n    int compressedDim = readCompressedDim(in);\n    if (compressedDim == -1) {\n      // all values are the same\n      visitor.grow(count);\n      visitUniqueRawDocValues(scratchDataPackedValue, scratchIterator, count, visitor);\n    } else {\n      if (numIndexDims != 1) {\n        byte[] minPackedValue = scratchMinIndexPackedValue;\n        System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n        byte[] maxPackedValue = scratchMaxIndexPackedValue;\n        // Copy common prefixes before reading adjusted box\n        System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n        readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n        // The index gives us range of values for each dimension, but the actual range of values\n        // might be much more narrow than what the index told us, so we double check the relation\n        // here, which is cheap yet might help figure out that the block either entirely matches\n        // or does not match at all. This is especially more likely in the case that there are\n        // multiple dimensions that have correlation, ie. splitting on one dimension also\n        // significantly changes the range of values in another dimension.\n        Relation r = visitor.compare(minPackedValue, maxPackedValue);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          return;\n        }\n        visitor.grow(count);\n\n        if (r == Relation.CELL_INSIDE_QUERY) {\n          for (int i = 0; i < count; ++i) {\n            visitor.visit(scratchIterator.docIDs[i]);\n          }\n          return;\n        }\n      } else {\n        visitor.grow(count);\n      }\n      if (compressedDim == -2) {\n        // low cardinality values\n        visitSparseRawDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor);\n      } else {\n        // high cardinality\n        visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor, compressedDim);\n      }\n    }\n  }\n\n","sourceOld":"  void visitDocValuesWithCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                                     IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n    int compressedDim = readCompressedDim(in);\n    if (compressedDim == -1) {\n      // all values are the same\n      visitor.grow(count);\n      visitUniqueRawDocValues(scratchDataPackedValue, docIDs, count, visitor);\n    } else {\n      if (numIndexDims != 1) {\n        byte[] minPackedValue = scratchMinIndexPackedValue;\n        System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n        byte[] maxPackedValue = scratchMaxIndexPackedValue;\n        // Copy common prefixes before reading adjusted box\n        System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n        readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n        // The index gives us range of values for each dimension, but the actual range of values\n        // might be much more narrow than what the index told us, so we double check the relation\n        // here, which is cheap yet might help figure out that the block either entirely matches\n        // or does not match at all. This is especially more likely in the case that there are\n        // multiple dimensions that have correlation, ie. splitting on one dimension also\n        // significantly changes the range of values in another dimension.\n        Relation r = visitor.compare(minPackedValue, maxPackedValue);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          return;\n        }\n        visitor.grow(count);\n\n        if (r == Relation.CELL_INSIDE_QUERY) {\n          for (int i = 0; i < count; ++i) {\n            visitor.visit(docIDs[i]);\n          }\n          return;\n        }\n      } else {\n        visitor.grow(count);\n      }\n      if (compressedDim == -2) {\n        // low cardinality values\n        visitSparseRawDocValues(commonPrefixLengths, scratchDataPackedValue, in, docIDs, count, visitor);\n      } else {\n        // high cardinality\n        visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, docIDs, count, visitor, compressedDim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesWithCardinality(int[],byte[],byte[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocValuesWithCardinality(int[],byte[],byte[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor).mjava","sourceNew":"  void visitDocValuesWithCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                                     IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor) throws IOException {\n\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n    int compressedDim = readCompressedDim(in);\n    if (compressedDim == -1) {\n      // all values are the same\n      visitor.grow(count);\n      visitUniqueRawDocValues(scratchDataPackedValue, scratchIterator, count, visitor);\n    } else {\n      if (config.numIndexDims != 1) {\n        byte[] minPackedValue = scratchMinIndexPackedValue;\n        System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, config.packedIndexBytesLength);\n        byte[] maxPackedValue = scratchMaxIndexPackedValue;\n        // Copy common prefixes before reading adjusted box\n        System.arraycopy(minPackedValue, 0, maxPackedValue, 0, config.packedIndexBytesLength);\n        readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n        // The index gives us range of values for each dimension, but the actual range of values\n        // might be much more narrow than what the index told us, so we double check the relation\n        // here, which is cheap yet might help figure out that the block either entirely matches\n        // or does not match at all. This is especially more likely in the case that there are\n        // multiple dimensions that have correlation, ie. splitting on one dimension also\n        // significantly changes the range of values in another dimension.\n        Relation r = visitor.compare(minPackedValue, maxPackedValue);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          return;\n        }\n        visitor.grow(count);\n\n        if (r == Relation.CELL_INSIDE_QUERY) {\n          for (int i = 0; i < count; ++i) {\n            visitor.visit(scratchIterator.docIDs[i]);\n          }\n          return;\n        }\n      } else {\n        visitor.grow(count);\n      }\n      if (compressedDim == -2) {\n        // low cardinality values\n        visitSparseRawDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor);\n      } else {\n        // high cardinality\n        visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor, compressedDim);\n      }\n    }\n  }\n\n","sourceOld":"  void visitDocValuesWithCardinality(int[] commonPrefixLengths, byte[] scratchDataPackedValue, byte[] scratchMinIndexPackedValue, byte[] scratchMaxIndexPackedValue,\n                                     IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor) throws IOException {\n\n    readCommonPrefixes(commonPrefixLengths, scratchDataPackedValue, in);\n    int compressedDim = readCompressedDim(in);\n    if (compressedDim == -1) {\n      // all values are the same\n      visitor.grow(count);\n      visitUniqueRawDocValues(scratchDataPackedValue, scratchIterator, count, visitor);\n    } else {\n      if (numIndexDims != 1) {\n        byte[] minPackedValue = scratchMinIndexPackedValue;\n        System.arraycopy(scratchDataPackedValue, 0, minPackedValue, 0, packedIndexBytesLength);\n        byte[] maxPackedValue = scratchMaxIndexPackedValue;\n        // Copy common prefixes before reading adjusted box\n        System.arraycopy(minPackedValue, 0, maxPackedValue, 0, packedIndexBytesLength);\n        readMinMax(commonPrefixLengths, minPackedValue, maxPackedValue, in);\n\n        // The index gives us range of values for each dimension, but the actual range of values\n        // might be much more narrow than what the index told us, so we double check the relation\n        // here, which is cheap yet might help figure out that the block either entirely matches\n        // or does not match at all. This is especially more likely in the case that there are\n        // multiple dimensions that have correlation, ie. splitting on one dimension also\n        // significantly changes the range of values in another dimension.\n        Relation r = visitor.compare(minPackedValue, maxPackedValue);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          return;\n        }\n        visitor.grow(count);\n\n        if (r == Relation.CELL_INSIDE_QUERY) {\n          for (int i = 0; i < count; ++i) {\n            visitor.visit(scratchIterator.docIDs[i]);\n          }\n          return;\n        }\n      } else {\n        visitor.grow(count);\n      }\n      if (compressedDim == -2) {\n        // low cardinality values\n        visitSparseRawDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor);\n      } else {\n        // high cardinality\n        visitCompressedDocValues(commonPrefixLengths, scratchDataPackedValue, in, scratchIterator, count, visitor, compressedDim);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a14a9a6131884330f34844dabc1ece206ceaea9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}