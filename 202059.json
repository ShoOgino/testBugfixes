{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","commits":[{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    BytesRef result = new BytesRef();\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n      \n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.toBytesRef(result);\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n      \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3d07f1ae3b58102f36f3393c397d78ba4e547a4","date":1300715535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    BytesRef result = new BytesRef();\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n      \n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.toBytesRef(result);\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n      \n    return result;\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeRangePart(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(part));\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException ignored) {}\n    \n    return new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3d07f1ae3b58102f36f3393c397d78ba4e547a4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["b3d07f1ae3b58102f36f3393c397d78ba4e547a4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3d07f1ae3b58102f36f3393c397d78ba4e547a4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b3d07f1ae3b58102f36f3393c397d78ba4e547a4","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3d07f1ae3b58102f36f3393c397d78ba4e547a4":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["a3776dccca01c11e7046323cfad46a3b4a471233","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["b3d07f1ae3b58102f36f3393c397d78ba4e547a4"],"b3d07f1ae3b58102f36f3393c397d78ba4e547a4":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}