{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","commits":[{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","pathOld":"/dev/null","sourceNew":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicas(sealedClause.tag, eval, ctx, NODE, row.node, violation, session);\n        } else {\n          computeDeviation(deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","sourceNew":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicas(sealedClause.tag, eval, ctx, NODE, row.node, violation, session);\n          if (!this.strict && deviations != null) {\n            tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n          }\n        } else {\n          if (replica.op == RANGE_EQUAL) tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","sourceOld":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicas(sealedClause.tag, eval, ctx, NODE, row.node, violation, session);\n        } else {\n          computeDeviation(deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","sourceNew":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicasForGroup(sealedClause.tag, eval, ctx, NODE, row.node, violation,\n              Collections.singletonList(row));\n          if (!this.strict && deviations != null) {\n            tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n          }\n        } else {\n          if (replica.op == RANGE_EQUAL) tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","sourceOld":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicas(sealedClause.tag, eval, ctx, NODE, row.node, violation, session);\n          if (!this.strict && deviations != null) {\n            tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n          }\n        } else {\n          if (replica.op == RANGE_EQUAL) tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#testPerNode(Policy.Session,double[]).mjava","sourceNew":null,"sourceOld":"  List<Violation> testPerNode(Policy.Session session, double[] deviations) {\n    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);\n    eval.collName = (String) collection.getValue();\n    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);\n    Set<String> shards = getShardNames(session, eval);\n    for (String s : shards) {\n      final ReplicaCount replicaCount = new ReplicaCount();\n      eval.shardName = s;\n      for (Row row : session.matrix) {\n        replicaCount.reset();\n        eval.node = row.node;\n        Condition tag = this.tag;\n        if (tag.computedType != null) {\n          tag = evaluateValue(tag, eval);\n        }\n        if (!tag.isPass(row)) continue;\n        addReplicaCountsForNode(eval, replicaCount, row);\n        SealedClause sealedClause = this.getSealedClause(eval);\n        if (!sealedClause.replica.isPass(replicaCount)) {\n          ReplicaCount replicaCountCopy = replicaCount.copy();\n          Violation violation = new Violation(sealedClause,\n              eval.collName,\n              eval.shardName,\n              eval.node,\n              replicaCountCopy,\n              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),\n              eval.node);\n          ctx.resetAndAddViolation(row.node, replicaCountCopy, violation);\n          sealedClause.addViolatingReplicasForGroup(sealedClause.tag, eval, ctx, NODE, row.node, violation,\n              Collections.singletonList(row));\n          if (!this.strict && deviations != null) {\n            tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n          }\n        } else {\n          if (replica.op == RANGE_EQUAL) tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);\n        }\n      }\n    }\n    return ctx.allViolations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}