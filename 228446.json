{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); //always the same id to override\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); //always the same id to override\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","sourceNew":"  private void doTestFloatPointFieldExactQuery(final String field) throws Exception {\n    doTestFloatPointFieldExactQuery(field, true);\n  }\n\n","sourceOld":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); //always the same id to override\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","sourceNew":"  private void doTestFloatPointFieldExactQuery(final String field) throws Exception {\n    doTestFloatPointFieldExactQuery(field, true);\n  }\n\n","sourceOld":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); //always the same id to override\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldExactQuery(final String field) throws Exception {\n    doTestFloatPointFieldExactQuery(field, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldExactQuery(final String field) throws Exception {\n    doTestFloatPointFieldExactQuery(field, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestFloatPointFieldExactQuery(String).mjava","sourceNew":null,"sourceOld":"  private void doTestFloatPointFieldExactQuery(final String field) throws Exception {\n    doTestFloatPointFieldExactQuery(field, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["46dc9ac8b3e748407baaef82453138ff3974480c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"46dc9ac8b3e748407baaef82453138ff3974480c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}