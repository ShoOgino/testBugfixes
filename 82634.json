{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setMaxBufferedDeleteTerms(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n       \n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(\"\" + j, flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          writer.getConfig().setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDeleteTerms(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":null,"sourceOld":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":null,"sourceOld":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":null,"sourceOld":"  public void testChangingRAMBuffer2() throws IOException {\n    Directory dir = newDirectory();      \n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    writer.getConfig().setMaxBufferedDocs(10);\n    writer.getConfig().setMaxBufferedDeleteTerms(10);\n    writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n    for(int j=1;j<52;j++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n    }\n      \n    int lastFlushCount = -1;\n    for(int j=1;j<52;j++) {\n      writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n      TestUtil.syncConcurrentMerges(writer);\n      int flushCount = writer.getFlushCount();\n       \n      if (j == 1)\n        lastFlushCount = flushCount;\n      else if (j < 10) {\n        // No new files should be created\n        assertEquals(flushCount, lastFlushCount);\n      } else if (10 == j) {\n        assertTrue(\"\" + j, flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 20) {\n        assertTrue(flushCount > lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (20 == j) {\n        writer.getConfig().setRAMBufferSizeMB(16);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 30) {\n        assertEquals(flushCount, lastFlushCount);\n      } else if (30 == j) {\n        writer.getConfig().setRAMBufferSizeMB(0.000001);\n        writer.getConfig().setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        writer.getConfig().setMaxBufferedDeleteTerms(1);\n      } else if (j < 40) {\n        assertTrue(flushCount> lastFlushCount);\n        lastFlushCount = flushCount;\n      } else if (40 == j) {\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        lastFlushCount = flushCount;\n      } else if (j < 50) {\n        assertEquals(flushCount, lastFlushCount);\n        writer.getConfig().setMaxBufferedDeleteTerms(10);\n        writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      } else if (50 == j) {\n        assertTrue(flushCount > lastFlushCount);\n      }\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["d0ef034a4f10871667ae75181537775ddcf8ade4","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["5a207d19eac354d649c3f0e2cce070017c78125e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["d0ef034a4f10871667ae75181537775ddcf8ade4","b470f36a9372c97283360b1304eacbde22df6c0d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5a207d19eac354d649c3f0e2cce070017c78125e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["5a207d19eac354d649c3f0e2cce070017c78125e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["d0ef034a4f10871667ae75181537775ddcf8ade4","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}