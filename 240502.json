{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","commits":[{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long cost() {\n    // cost for merging of lists analog to DisjunctionSumScorer \n    long costCandidateGeneration = 0;\n    for (int i=0; i<nrInHeap; i++)\n      costCandidateGeneration += subScorers[i].cost();\n    // TODO cost for advance() seems intuitively higher than for iteration + heap merge\n    final float c1 = 1.0f,\n                c2 = 1.0f; // maybe a constant, maybe a proportion between costCandidateGeneration and sum(subScorer_to_be_advanced.cost())\n    return (long) (\n           c1 * costCandidateGeneration +        // heap-merge cost\n           c2 * costCandidateGeneration * (mm-1) // advance() cost\n           );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"681329f0d8aa847be84b952db62031b9c15f96c5","date":1364143277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","sourceNew":"  @Override\n  public long cost() {\n    // cost for merging of lists analog to DisjunctionSumScorer\n    long costCandidateGeneration = 0;\n    for (int i = 0; i < nrInHeap; i++)\n      costCandidateGeneration += subScorers[i].cost();\n    // TODO is cost for advance() different to cost for iteration + heap merge\n    //      and how do they compare overall to pure disjunctions? \n    final float c1 = 1.0f,\n                c2 = 1.0f; // maybe a constant, maybe a proportion between costCandidateGeneration and sum(subScorer_to_be_advanced.cost())?\n    return (long) (\n           c1 * costCandidateGeneration +        // heap-merge cost\n           c2 * costCandidateGeneration * (mm-1) // advance() cost\n           );\n  }\n\n","sourceOld":"  @Override\n  public long cost() {\n    // cost for merging of lists analog to DisjunctionSumScorer \n    long costCandidateGeneration = 0;\n    for (int i=0; i<nrInHeap; i++)\n      costCandidateGeneration += subScorers[i].cost();\n    // TODO cost for advance() seems intuitively higher than for iteration + heap merge\n    final float c1 = 1.0f,\n                c2 = 1.0f; // maybe a constant, maybe a proportion between costCandidateGeneration and sum(subScorer_to_be_advanced.cost())\n    return (long) (\n           c1 * costCandidateGeneration +        // heap-merge cost\n           c2 * costCandidateGeneration * (mm-1) // advance() cost\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","sourceNew":"  @Override\n  public long cost() {\n    return cost;\n  }\n\n","sourceOld":"  @Override\n  public long cost() {\n    // cost for merging of lists analog to DisjunctionSumScorer\n    long costCandidateGeneration = 0;\n    for (int i = 0; i < nrInHeap; i++)\n      costCandidateGeneration += subScorers[i].cost();\n    // TODO is cost for advance() different to cost for iteration + heap merge\n    //      and how do they compare overall to pure disjunctions? \n    final float c1 = 1.0f,\n                c2 = 1.0f; // maybe a constant, maybe a proportion between costCandidateGeneration and sum(subScorer_to_be_advanced.cost())?\n    return (long) (\n           c1 * costCandidateGeneration +        // heap-merge cost\n           c2 * costCandidateGeneration * (mm-1) // advance() cost\n           );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#cost().mjava","sourceNew":null,"sourceOld":"  @Override\n  public long cost() {\n    return cost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["681329f0d8aa847be84b952db62031b9c15f96c5"],"34960be55e437a6c96fe66046bf22d33346059f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"681329f0d8aa847be84b952db62031b9c15f96c5":["34960be55e437a6c96fe66046bf22d33346059f6"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"34960be55e437a6c96fe66046bf22d33346059f6":["681329f0d8aa847be84b952db62031b9c15f96c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960be55e437a6c96fe66046bf22d33346059f6"],"681329f0d8aa847be84b952db62031b9c15f96c5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}