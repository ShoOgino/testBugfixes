{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /*  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","sourceOld":"  /*  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /*  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","sourceOld":"  /*  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fc020cd239811c4a96b9f17061ee6889091b003","date":1348151508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","sourceOld":"  /*  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","date":1367321736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n    reverseMul = queue.getReverseMul();\n    compEnd = comparators.length - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) throws IOException {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#ToParentBlockJoinCollector(Sort,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**  Creates a ToParentBlockJoinCollector.  The provided sort must\n   *  not be null.  If you pass true trackScores, all\n   *  ToParentBlockQuery instances must not use\n   *  ScoreMode.None. */\n  public ToParentBlockJoinCollector(Sort sort, int numParentHits, boolean trackScores, boolean trackMaxScore) {\n    // TODO: allow null sort to be specialized to relevance\n    // only collector\n    this.sort = sort;\n    this.trackMaxScore = trackMaxScore;\n    if (trackMaxScore) {\n      maxScore = Float.MIN_VALUE;\n    }\n    //System.out.println(\"numParentHits=\" + numParentHits);\n    this.trackScores = trackScores;\n    this.numParentHits = numParentHits;\n    queue = FieldValueHitQueue.create(sort.getSort(), numParentHits);\n    comparators = queue.getComparators();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85d41890f2bad879e6a04c6dd7d2cf276f973994":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03e38c6374c23083c93e212a9498ff0a9c255476":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"901e951cec2e6af4e503209a6721c8834db23279":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["8fc020cd239811c4a96b9f17061ee6889091b003"],"8fc020cd239811c4a96b9f17061ee6889091b003":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["03e38c6374c23083c93e212a9498ff0a9c255476"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["901e951cec2e6af4e503209a6721c8834db23279","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"]},"commit2Childs":{"85d41890f2bad879e6a04c6dd7d2cf276f973994":["8fc020cd239811c4a96b9f17061ee6889091b003"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"03e38c6374c23083c93e212a9498ff0a9c255476":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"901e951cec2e6af4e503209a6721c8834db23279":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["901e951cec2e6af4e503209a6721c8834db23279"],"8fc020cd239811c4a96b9f17061ee6889091b003":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}