{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","commits":[{"id":"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13","date":1113264693,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionnary(Dictionary).mjava","sourceNew":"    /**\n     * Index a Dictionary\n     * @param dict the dictionary to index\n     * @throws IOException\n     */\n    public void indexDictionary (Dictionary dict) throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","sourceOld":"    /**\n     * Index a Dictionnary\n     * @param dict the dictionnary to index\n     * @throws IOException\n     */\n    public void indexDictionnary (Dictionary dict) throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellindex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n\n    // close reader\n    //        reader.close();\n    //        reader=null;\n  }\n\n","sourceOld":"    /**\n     * Index a Dictionary\n     * @param dict the dictionary to index\n     * @throws IOException\n     */\n    public void indexDictionary (Dictionary dict) throws IOException {\n        IndexReader.unlock(spellindex);\n        IndexWriter writer=new IndexWriter(spellindex, new WhitespaceAnalyzer(), !IndexReader.indexExists(spellindex));\n        writer.setMergeFactor(300);\n        writer.setMaxBufferedDocs(150);\n\n        Iterator iter=dict.getWordsIterator();\n        while (iter.hasNext()) {\n            String word=(String) iter.next();\n\n            int len=word.length();\n            if (len<3) {\n                continue; // too short we bail but \"too long\" is fine...\n            }\n\n            if (this.exist(word)) { // if the word already exist in the gramindex\n                continue;\n            }\n\n            // ok index the word\n            Document doc=createDocument(word, getMin(len), getMax(len));\n            writer.addDocument(doc);\n        }\n        // close writer\n        writer.optimize();\n        writer.close();\n\n        // close reader\n        reader.close();\n        reader=null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d6c8635b7359c78703bca99eed29c45ed44ac7f","date":1153471142,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellindex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellindex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n\n    // close reader\n    //        reader.close();\n    //        reader=null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c292217d2a7f861d59267155332967568e371fc1","date":1161990036,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellindex);\n    IndexWriter writer = new IndexWriter(spellindex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellindex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b","ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f139fa2403eda7f1fc816cd70ebf37185647632","date":1179574074,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // close reader so it will be re-opened (and see the new content) when exist()\n    // is called the next time:\n    if (reader != null) {\n      reader.close();\n      reader = null;\n    }\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ede03d537cd6c85c921eb49cdd7fbc49daa602d0","date":1200589243,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    if (IndexReader.isLocked(spellIndex)){\n      IndexReader.unlock(spellIndex);\n    }\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // close reader so it will be re-opened (and see the new content) when exist()\n    // is called the next time:\n    if (reader != null) {\n      reader.close();\n      reader = null;\n    }\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexReader.unlock(spellIndex);\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // close reader so it will be re-opened (and see the new content) when exist()\n    // is called the next time:\n    if (reader != null) {\n      reader.close();\n      reader = null;\n    }\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":["c292217d2a7f861d59267155332967568e371fc1"],"bugIntro":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc4f7f30315d5744c6daa02827f50fc21065ff0b","date":1211437277,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    if (IndexReader.isLocked(spellIndex)){\n      IndexReader.unlock(spellIndex);\n    }\n    IndexWriter writer = new IndexWriter(spellIndex, new WhitespaceAnalyzer(),\n        !IndexReader.indexExists(spellIndex));\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // close reader so it will be re-opened (and see the new content) when exist()\n    // is called the next time:\n    if (reader != null) {\n      reader.close();\n      reader = null;\n    }\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":["8f139fa2403eda7f1fc816cd70ebf37185647632","c292217d2a7f861d59267155332967568e371fc1","ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce612a40143b896fdbe465b45011e4540ce963","date":1211438856,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    indexDictionary(dict, 300, 10);\n  }\n\n","sourceOld":"  /**\n   * Index a Dictionary\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    IndexWriter writer = new IndexWriter(spellIndex, true, new WhitespaceAnalyzer());\n    writer.setMergeFactor(300);\n    writer.setMaxBufferedDocs(150);\n\n    Iterator iter = dict.getWordsIterator();\n    while (iter.hasNext()) {\n      String word = (String) iter.next();\n\n      int len = word.length();\n      if (len < 3) {\n        continue; // too short we bail but \"too long\" is fine...\n      }\n\n      if (this.exist(word)) { // if the word already exist in the gramindex\n        continue;\n      }\n\n      // ok index the word\n      Document doc = createDocument(word, getMin(len), getMax(len));\n      writer.addDocument(doc);\n    }\n    // close writer\n    writer.optimize();\n    writer.close();\n    // also re-open the spell index to see our own changes when the next suggestion\n    // is fetched:\n    searcher.close();\n    searcher = new IndexSearcher(this.spellIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    indexDictionary(dict, 300, 10);\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict the dictionary to index\n   * @throws IOException\n   */\n  public void indexDictionary(Dictionary dict) throws IOException {\n    indexDictionary(dict, 300, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52ce612a40143b896fdbe465b45011e4540ce963":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["49bc77405d3c80cb8b2a22edfe7c769dca9c7a13"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"c292217d2a7f861d59267155332967568e371fc1":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f139fa2403eda7f1fc816cd70ebf37185647632":["c292217d2a7f861d59267155332967568e371fc1"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["8f139fa2403eda7f1fc816cd70ebf37185647632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["52ce612a40143b896fdbe465b45011e4540ce963"]},"commit2Childs":{"52ce612a40143b896fdbe465b45011e4540ce963":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"bc4f7f30315d5744c6daa02827f50fc21065ff0b":["52ce612a40143b896fdbe465b45011e4540ce963"],"c292217d2a7f861d59267155332967568e371fc1":["8f139fa2403eda7f1fc816cd70ebf37185647632"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49bc77405d3c80cb8b2a22edfe7c769dca9c7a13"],"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["c292217d2a7f861d59267155332967568e371fc1"],"8f139fa2403eda7f1fc816cd70ebf37185647632":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["bc4f7f30315d5744c6daa02827f50fc21065ff0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}