{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","commits":[{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","date":1493430356,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    // nothing to do here\n  }\n\n","sourceOld":"  public void open() throws IOException {\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    // nothing to do here\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31","date":1540236013,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    this.tup = new Tuple(values);\n    tup.fieldNames = fieldNames;\n    tup.fieldLabels = fieldLabels;\n    // nothing to do here\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    // nothing to do here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    if(values.size() == 1) {\n      for(Object o :values.values()) {\n        if(o instanceof Tuple) {\n          unnestedTuple = (Tuple)o;\n        } else if(o instanceof List) {\n          List l = (List)o;\n          if(l.size() > 0 && l.get(0) instanceof Tuple) {\n            List<Tuple> tl = (List<Tuple>)l;\n            unnestedTuples = tl.iterator();\n          }\n        }\n      }\n    }\n    this.tup = new Tuple(values);\n    tup.fieldNames = fieldNames;\n    tup.fieldLabels = fieldLabels;\n    // nothing to do here\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    this.tup = new Tuple(values);\n    tup.fieldNames = fieldNames;\n    tup.fieldLabels = fieldLabels;\n    // nothing to do here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    if(values.size() == 1) {\n      for(Object o :values.values()) {\n        if(o instanceof Tuple) {\n          unnestedTuple = (Tuple)o;\n        } else if(o instanceof List) {\n          List l = (List)o;\n          if(l.size() > 0 && l.get(0) instanceof Tuple) {\n            List<Tuple> tl = (List<Tuple>)l;\n            unnestedTuples = tl.iterator();\n          }\n        }\n      }\n    }\n    this.tup = new Tuple(values);\n    tup.setFieldNames(fieldNames);\n    tup.setFieldLabels(fieldLabels);\n    // nothing to do here\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    if(values.size() == 1) {\n      for(Object o :values.values()) {\n        if(o instanceof Tuple) {\n          unnestedTuple = (Tuple)o;\n        } else if(o instanceof List) {\n          List l = (List)o;\n          if(l.size() > 0 && l.get(0) instanceof Tuple) {\n            List<Tuple> tl = (List<Tuple>)l;\n            unnestedTuples = tl.iterator();\n          }\n        }\n      }\n    }\n    this.tup = new Tuple(values);\n    tup.fieldNames = fieldNames;\n    tup.fieldLabels = fieldLabels;\n    // nothing to do here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#open().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList<>();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    if(values.size() == 1) {\n      for(Object o :values.values()) {\n        if(o instanceof Tuple) {\n          unnestedTuple = (Tuple)o;\n        } else if(o instanceof List) {\n          @SuppressWarnings({\"rawtypes\"})\n          List l = (List)o;\n          if(l.size() > 0 && l.get(0) instanceof Tuple) {\n            List<Tuple> tl = (List<Tuple>)l;\n            unnestedTuples = tl.iterator();\n          }\n        }\n      }\n    }\n    this.tup = new Tuple(values);\n    tup.setFieldNames(fieldNames);\n    tup.setFieldLabels(fieldLabels);\n    // nothing to do here\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> values = new HashMap<>();\n\n    // add all string based params\n    // these could come from the context, or they will just be treated as straight strings\n    for(Entry<String,String> param : stringParams.entrySet()){\n      if(streamContext.getLets().containsKey(param.getValue())){\n        values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n      }\n      else{\n        values.put(param.getKey(), param.getValue());\n      }\n    }\n\n    // add all evaluators\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      values.put(param.getKey(), param.getValue().evaluateOverContext());\n    }\n\n    // Add all streams\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n\n      try{\n        List<Tuple> streamTuples = new ArrayList();\n        // open the stream, closed in finally block\n        param.getValue().open();\n\n        // read all values from stream (memory expensive)\n        Tuple streamTuple = param.getValue().read();\n        while(!streamTuple.EOF){\n          streamTuples.add(streamTuple);\n          streamTuple = param.getValue().read();\n        }\n\n        values.put(param.getKey(), streamTuples);\n      }\n      finally{\n        // safely close the stream\n        param.getValue().close();\n      }\n    }\n\n    if(values.size() == 1) {\n      for(Object o :values.values()) {\n        if(o instanceof Tuple) {\n          unnestedTuple = (Tuple)o;\n        } else if(o instanceof List) {\n          List l = (List)o;\n          if(l.size() > 0 && l.get(0) instanceof Tuple) {\n            List<Tuple> tl = (List<Tuple>)l;\n            unnestedTuples = tl.iterator();\n          }\n        }\n      }\n    }\n    this.tup = new Tuple(values);\n    tup.setFieldNames(fieldNames);\n    tup.setFieldLabels(fieldLabels);\n    // nothing to do here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"804a8d5358fe7b7563b85ee7838714d720b89272":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["804a8d5358fe7b7563b85ee7838714d720b89272"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["e9017cf144952056066919f1ebc7897ff9bd71b1","16eed9af98b54bb6cee521e4828ab5c2b9cb0d31"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"16eed9af98b54bb6cee521e4828ab5c2b9cb0d31":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}