{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","commits":[{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3aebee6cb78722e5bc6e2baced39db7a5412eb","date":1345028634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PACKED_INTS_VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PACKED_INTS_VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, PACKED_INTS_VERSION, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51a4c2476a0a1187d1b045d8a7eec795e1231bf6","date":1345464713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PACKED_INTS_VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PACKED_INTS_VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    if (packedIntsVersion != PackedInts.VERSION_START) {\n      throw new CorruptIndexException(\"expected version=\" + PackedInts.VERSION_START + \" but got version=\" + packedIntsVersion);\n    }\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51a4c2476a0a1187d1b045d8a7eec795e1231bf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"51a4c2476a0a1187d1b045d8a7eec795e1231bf6":["dc3aebee6cb78722e5bc6e2baced39db7a5412eb"],"dc3aebee6cb78722e5bc6e2baced39db7a5412eb":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"51a4c2476a0a1187d1b045d8a7eec795e1231bf6":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"dc3aebee6cb78722e5bc6e2baced39db7a5412eb":["51a4c2476a0a1187d1b045d8a7eec795e1231bf6"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["dc3aebee6cb78722e5bc6e2baced39db7a5412eb"]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}