{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"    // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fe59e831a8e6dd46d16a75a9fd0612b99e9f5cc","date":1280408212,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8094275ab70a7610ebe89e2f3b3132e47a46d673","date":1281226774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory(random);\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory(random);\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      // reduce risk of too many open files\n      lmp.setMergeFactor(5);\n    }\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      // reduce risk of too many open files\n      lmp.setMergeFactor(5);\n    }\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35fccc6fabc57267490c7aef14b9e52c67feef82","date":1290263266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      // reduce risk of too many open files\n      lmp.setMergeFactor(5);\n    }\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac","date":1290886721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["35fccc6fabc57267490c7aef14b9e52c67feef82","1f653cfcf159baeaafe5d01682a911e95bba4012","d572389229127c297dd1fa5ce4758e1cec41e799"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( \n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      // reduce risk of too many open files\n      lmp.setMergeFactor(5);\n    }\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig( \n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"8094275ab70a7610ebe89e2f3b3132e47a46d673":["6fe59e831a8e6dd46d16a75a9fd0612b99e9f5cc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["8094275ab70a7610ebe89e2f3b3132e47a46d673"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","4b103252dee6afa1b6d7a622c773d178788eb85a"],"2a186ae8733084223c22044e935e4ef848a143d1":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["d572389229127c297dd1fa5ce4758e1cec41e799","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["132903c28af3aa6f67284b78de91c0f0a99488c2","2a186ae8733084223c22044e935e4ef848a143d1"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"35fccc6fabc57267490c7aef14b9e52c67feef82":["2a186ae8733084223c22044e935e4ef848a143d1"],"6fe59e831a8e6dd46d16a75a9fd0612b99e9f5cc":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac":["35fccc6fabc57267490c7aef14b9e52c67feef82"]},"commit2Childs":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"8094275ab70a7610ebe89e2f3b3132e47a46d673":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","6fe59e831a8e6dd46d16a75a9fd0612b99e9f5cc"],"2a186ae8733084223c22044e935e4ef848a143d1":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","35fccc6fabc57267490c7aef14b9e52c67feef82"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"6fe59e831a8e6dd46d16a75a9fd0612b99e9f5cc":["8094275ab70a7610ebe89e2f3b3132e47a46d673"],"35fccc6fabc57267490c7aef14b9e52c67feef82":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}