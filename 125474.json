{"path":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","sourceNew":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","sourceOld":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","sourceNew":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","sourceOld":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}