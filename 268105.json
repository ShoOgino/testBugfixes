{"path":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n      tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n      checkValidFormat(tvx);\n      tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n      tvdFormat = checkValidFormat(tvd);\n      tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n      tvfFormat = checkValidFormat(tvf);\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = (int) (tvx.length() / 8);\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (tvx.length()/8)) >= size + docStoreOffset;\n      }\n    }\n\n    this.fieldInfos = fieldInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290ddf70ef4230015d4b5ff6758c630a466d757c","date":1183739680,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n      tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n      checkValidFormat(tvx);\n      tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n      tvdFormat = checkValidFormat(tvd);\n      tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n      tvfFormat = checkValidFormat(tvf);\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = (int) (tvx.length() >> 3);\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (tvx.length()/8)) >= size + docStoreOffset;\n      }\n    }\n\n    this.fieldInfos = fieldInfos;\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n      tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n      checkValidFormat(tvx);\n      tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n      tvdFormat = checkValidFormat(tvd);\n      tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n      tvfFormat = checkValidFormat(tvf);\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = (int) (tvx.length() / 8);\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (tvx.length()/8)) >= size + docStoreOffset;\n      }\n    }\n\n    this.fieldInfos = fieldInfos;\n  }\n\n","bugFix":null,"bugIntro":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c95bb07ec2e477432344309d35ab2d6b7c9aeff","date":1187430141,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n        tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n        checkValidFormat(tvx);\n        tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n        tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n        tvfFormat = checkValidFormat(tvf);\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = (int) (tvx.length() >> 3);\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert ((int) (tvx.length() / 8)) >= size + docStoreOffset;\n        }\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n      tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n      checkValidFormat(tvx);\n      tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n      tvdFormat = checkValidFormat(tvd);\n      tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n      tvfFormat = checkValidFormat(tvf);\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = (int) (tvx.length() >> 3);\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (tvx.length()/8)) >= size + docStoreOffset;\n      }\n    }\n\n    this.fieldInfos = fieldInfos;\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","290ddf70ef4230015d4b5ff6758c630a466d757c"],"bugIntro":["11764865fb318bf86302eab36bdf9cd00c50c110"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        tvfFormat = checkValidFormat(tvf);\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = (int) (tvx.length() >> 3);\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert ((int) (tvx.length() / 8)) >= size + docStoreOffset;\n        }\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + TermVectorsWriter.TVX_EXTENSION)) {\n        tvx = d.openInput(segment + TermVectorsWriter.TVX_EXTENSION, readBufferSize);\n        checkValidFormat(tvx);\n        tvd = d.openInput(segment + TermVectorsWriter.TVD_EXTENSION, readBufferSize);\n        tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + TermVectorsWriter.TVF_EXTENSION, readBufferSize);\n        tvfFormat = checkValidFormat(tvf);\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = (int) (tvx.length() >> 3);\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert ((int) (tvx.length() / 8)) >= size + docStoreOffset;\n        }\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        tvfFormat = checkValidFormat(tvf);\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = (int) (tvx.length() >> 3);\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert ((int) (tvx.length() / 8)) >= size + docStoreOffset;\n        }\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["49adbad5232116eb2448ea8166464e6a68bca007"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49adbad5232116eb2448ea8166464e6a68bca007","date":1202851885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      if (d.fileExists(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION)) {\n        tvx = d.openInput(segment + \".\" + IndexFileNames.VECTORS_INDEX_EXTENSION, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(segment + \".\" + IndexFileNames.VECTORS_DOCUMENTS_EXTENSION, readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(segment + \".\" + IndexFileNames.VECTORS_FIELDS_EXTENSION, readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#TermVectorsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermVectorsReader(Directory d, String segment, FieldInfos fieldInfos, int readBufferSize, int docStoreOffset, int size)\n    throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_INDEX_EXTENSION);\n      if (d.fileExists(idxName)) {\n        tvx = d.openInput(idxName, readBufferSize);\n        format = checkValidFormat(tvx);\n        tvd = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_DOCUMENTS_EXTENSION), readBufferSize);\n        final int tvdFormat = checkValidFormat(tvd);\n        tvf = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.VECTORS_FIELDS_EXTENSION), readBufferSize);\n        final int tvfFormat = checkValidFormat(tvf);\n\n        assert format == tvdFormat;\n        assert format == tvfFormat;\n\n        if (format >= FORMAT_VERSION2) {\n          assert (tvx.length()-FORMAT_SIZE) % 16 == 0;\n          numTotalDocs = (int) (tvx.length() >> 4);\n        } else {\n          assert (tvx.length()-FORMAT_SIZE) % 8 == 0;\n          numTotalDocs = (int) (tvx.length() >> 3);\n        }\n\n        if (-1 == docStoreOffset) {\n          this.docStoreOffset = 0;\n          this.size = numTotalDocs;\n          assert size == 0 || numTotalDocs == size;\n        } else {\n          this.docStoreOffset = docStoreOffset;\n          this.size = size;\n          // Verify the file is long enough to hold all of our\n          // docs\n          assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n        }\n      } else\n        format = 0;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49adbad5232116eb2448ea8166464e6a68bca007":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["11764865fb318bf86302eab36bdf9cd00c50c110"],"775efee7f959e0dd3df7960b93767d9e00b78751":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"11764865fb318bf86302eab36bdf9cd00c50c110":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["49adbad5232116eb2448ea8166464e6a68bca007"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"],"0c95bb07ec2e477432344309d35ab2d6b7c9aeff":["290ddf70ef4230015d4b5ff6758c630a466d757c"]},"commit2Childs":{"49adbad5232116eb2448ea8166464e6a68bca007":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["49adbad5232116eb2448ea8166464e6a68bca007"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"11764865fb318bf86302eab36bdf9cd00c50c110":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["775efee7f959e0dd3df7960b93767d9e00b78751"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"0c95bb07ec2e477432344309d35ab2d6b7c9aeff":["11764865fb318bf86302eab36bdf9cd00c50c110"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}