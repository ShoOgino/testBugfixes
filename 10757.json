{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","commits":[{"id":"fbf673cc117fc27d2c820811d2a886119346b0c9","date":1302615417,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName, state.context);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    //this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels,\n          state.numDocs, freqOut, proxOut);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, freqOut, proxOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#StandardPostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName, state.context);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public StandardPostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    if (state.fieldInfos.hasProx()) {\n      // At least one field does not omit TF, so create the\n      // prox file\n      fileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, StandardCodec.PROX_EXTENSION);\n      proxOut = state.directory.createOutput(fileName, state.context);\n    } else {\n      // Every field omits TF so we will write no prox file\n      proxOut = null;\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new DefaultSkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"efb7a19703a037c29e30440260d393500febc1f4":["fbf673cc117fc27d2c820811d2a886119346b0c9"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbf673cc117fc27d2c820811d2a886119346b0c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"962d04139994fce5193143ef35615499a9a96d78":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","fbf673cc117fc27d2c820811d2a886119346b0c9","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["60ba444201d2570214b6fcf1d15600dc1a01f548","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","962d04139994fce5193143ef35615499a9a96d78","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}