{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,BiConsumer[String,Map[String,Object]]).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,BiConsumer[String,Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  public static void toNamedMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                BiConsumer<String, Map<String, Object>> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, counterToMap(counter));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, gaugeToMap(gauge));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, meterToMap(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, timerToMap(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, histogramToMap(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, aggregateMetricToMap((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,BiConsumer[String,Map[String,Object]]).mjava","sourceNew":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact,\n                            BiConsumer<String, Object> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, convertCounter(counter, compact));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, convertGauge(gauge, compact));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, convertMeter(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, convertTimer(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, convertHistogram(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, convertAggregateMetric((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","sourceOld":"  public static void toNamedMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                BiConsumer<String, Map<String, Object>> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, counterToMap(counter));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, gaugeToMap(gauge));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, meterToMap(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, timerToMap(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, histogramToMap(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, aggregateMetricToMap((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,BiConsumer[String,Map[String,Object]]).mjava","sourceNew":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact,\n                            BiConsumer<String, Object> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, convertCounter(counter, compact));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, convertGauge(gauge, compact));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, convertMeter(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, convertTimer(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, convertHistogram(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, convertAggregateMetric((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","sourceOld":"  public static void toNamedMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                BiConsumer<String, Map<String, Object>> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, counterToMap(counter));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, gaugeToMap(gauge));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, meterToMap(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, timerToMap(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, histogramToMap(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, aggregateMetricToMap((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedMaps(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,BiConsumer[String,Map[String,Object]]).mjava","sourceNew":"  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                            boolean compact,\n                            BiConsumer<String, Object> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, convertCounter(counter, compact));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, convertGauge(gauge, compact));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, convertMeter(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, convertTimer(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, convertHistogram(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, convertAggregateMetric((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","sourceOld":"  public static void toNamedMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,\n                BiConsumer<String, Map<String, Object>> consumer) {\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          if (metric instanceof Counter) {\n            Counter counter = (Counter) metric;\n            consumer.accept(n, counterToMap(counter));\n          } else if (metric instanceof Gauge) {\n            Gauge gauge = (Gauge) metric;\n            consumer.accept(n, gaugeToMap(gauge));\n          } else if (metric instanceof Meter) {\n            Meter meter = (Meter) metric;\n            consumer.accept(n, meterToMap(meter));\n          } else if (metric instanceof Timer) {\n            Timer timer = (Timer) metric;\n            consumer.accept(n, timerToMap(timer, skipHistograms));\n          } else if (metric instanceof Histogram) {\n            if (!skipHistograms) {\n              Histogram histogram = (Histogram) metric;\n              consumer.accept(n, histogramToMap(histogram));\n            }\n          } else if (metric instanceof AggregateMetric) {\n            consumer.accept(n, aggregateMetricToMap((AggregateMetric)metric, skipAggregateValues));\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"ab68488225b6a6c357dda72ed11dedca9914a192":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}