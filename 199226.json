{"path":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#payloadFilteringSpanQuery().mjava","commits":[{"id":"4a7ab38c291565c0fabdbd2946cd2f614dea29ff","date":1421069415,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#payloadFilteringSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void payloadFilteringSpanQuery() throws IOException {\n    clearIndex();\n\n    String FIELD_NAME = \"payloadDelimited\";\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"word|7 word|2\"));\n    assertU(commit());\n\n    //We search at a lower level than typical Solr tests because there's no QParser for payloads\n\n    //Create query matching this payload\n    Query query = new SpanPayloadCheckQuery(new SpanTermQuery(new Term(FIELD_NAME, \"word\")),\n        Collections.singleton(new byte[]{0,0,0,7}));//bytes for integer 7\n\n    //invoke highlight component... the hard way\n    final SearchComponent hlComp = h.getCore().getSearchComponent(\"highlight\");\n    SolrQueryRequest req = req(\"hl\", \"true\", \"hl.fl\", FIELD_NAME, HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\");\n    try {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, Collections.singletonList(hlComp));\n      rb.setHighlightQuery(query);\n      rb.setResults(req.getSearcher().getDocListAndSet(query, (DocSet) null, null, 0, 1));\n      //highlight:\n      hlComp.prepare(rb);\n      hlComp.process(rb);\n      //inspect response\n      final String[] snippets = (String[]) resp.getValues().findRecursive(\"highlighting\", \"0\", FIELD_NAME);\n      assertEquals(\"<em>word|7</em> word|2\", snippets[0]);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#payloadFilteringSpanQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#payloadFilteringSpanQuery().mjava","sourceNew":"  @Test\n  public void payloadFilteringSpanQuery() throws IOException {\n    clearIndex();\n\n    String FIELD_NAME = \"payloadDelimited\";\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"word|7 word|2\"));\n    assertU(commit());\n\n    //We search at a lower level than typical Solr tests because there's no QParser for payloads\n\n    //Create query matching this payload\n    Query query = new SpanPayloadCheckQuery(new SpanTermQuery(new Term(FIELD_NAME, \"word\")),\n        Collections.singletonList(new BytesRef(new byte[]{0, 0, 0, 7})));//bytes for integer 7\n\n    //invoke highlight component... the hard way\n    final SearchComponent hlComp = h.getCore().getSearchComponent(\"highlight\");\n    SolrQueryRequest req = req(\"hl\", \"true\", \"hl.fl\", FIELD_NAME, HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\");\n    try {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, Collections.singletonList(hlComp));\n      rb.setHighlightQuery(query);\n      rb.setResults(req.getSearcher().getDocListAndSet(query, (DocSet) null, null, 0, 1));\n      //highlight:\n      hlComp.prepare(rb);\n      hlComp.process(rb);\n      //inspect response\n      final String[] snippets = (String[]) resp.getValues().findRecursive(\"highlighting\", \"0\", FIELD_NAME);\n      assertEquals(\"<em>word|7</em> word|2\", snippets[0]);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void payloadFilteringSpanQuery() throws IOException {\n    clearIndex();\n\n    String FIELD_NAME = \"payloadDelimited\";\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"word|7 word|2\"));\n    assertU(commit());\n\n    //We search at a lower level than typical Solr tests because there's no QParser for payloads\n\n    //Create query matching this payload\n    Query query = new SpanPayloadCheckQuery(new SpanTermQuery(new Term(FIELD_NAME, \"word\")),\n        Collections.singleton(new byte[]{0,0,0,7}));//bytes for integer 7\n\n    //invoke highlight component... the hard way\n    final SearchComponent hlComp = h.getCore().getSearchComponent(\"highlight\");\n    SolrQueryRequest req = req(\"hl\", \"true\", \"hl.fl\", FIELD_NAME, HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\");\n    try {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, Collections.singletonList(hlComp));\n      rb.setHighlightQuery(query);\n      rb.setResults(req.getSearcher().getDocListAndSet(query, (DocSet) null, null, 0, 1));\n      //highlight:\n      hlComp.prepare(rb);\n      hlComp.process(rb);\n      //inspect response\n      final String[] snippets = (String[]) resp.getValues().findRecursive(\"highlighting\", \"0\", FIELD_NAME);\n      assertEquals(\"<em>word|7</em> word|2\", snippets[0]);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a7ab38c291565c0fabdbd2946cd2f614dea29ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["4a7ab38c291565c0fabdbd2946cd2f614dea29ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"]},"commit2Childs":{"4a7ab38c291565c0fabdbd2946cd2f614dea29ff":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a7ab38c291565c0fabdbd2946cd2f614dea29ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}