{"path":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","commits":[{"id":"4513731041236fcf659e5bfc43d8862e1721a310","date":1504022253,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"LongValueFacetCounts totCount=\");\n    b.append(totCount);\n    b.append(\":\\n\");\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] != 0) {\n        b.append(\"  \");\n        b.append(i);\n        b.append(\" -> count=\");\n        b.append(counts[i]);\n        b.append('\\n');\n      }\n    }\n\n    if (hashCounts.size != 0) {\n      for (int i = 0; i < hashCounts.values.length; i++) {\n        if (hashCounts.counts[i] != 0) {\n          b.append(\"  \");\n          b.append(hashCounts.values[i]);\n          b.append(\" -> count=\");\n          b.append(hashCounts.counts[i]);\n          b.append('\\n');\n        }\n      }\n    }\n\n    return b.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6028626aa0f7c266ef725110257eed11e5b3d1d7","date":1504104056,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"LongValueFacetCounts totCount=\");\n    b.append(totCount);\n    b.append(\":\\n\");\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] != 0) {\n        b.append(\"  \");\n        b.append(i);\n        b.append(\" -> count=\");\n        b.append(counts[i]);\n        b.append('\\n');\n      }\n    }\n\n    if (hashCounts.size != 0) {\n      for (int i = 0; i < hashCounts.values.length; i++) {\n        if (hashCounts.counts[i] != 0) {\n          b.append(\"  \");\n          b.append(hashCounts.values[i]);\n          b.append(\" -> count=\");\n          b.append(hashCounts.counts[i]);\n          b.append('\\n');\n        }\n      }\n    }\n\n    return b.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"LongValueFacetCounts totCount=\");\n    b.append(totCount);\n    b.append(\":\\n\");\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] != 0) {\n        b.append(\"  \");\n        b.append(i);\n        b.append(\" -> count=\");\n        b.append(counts[i]);\n        b.append('\\n');\n      }\n    }\n\n    if (hashCounts.size != 0) {\n      for (int i = 0; i < hashCounts.values.length; i++) {\n        if (hashCounts.counts[i] != 0) {\n          b.append(\"  \");\n          b.append(hashCounts.values[i]);\n          b.append(\" -> count=\");\n          b.append(hashCounts.counts[i]);\n          b.append('\\n');\n        }\n      }\n    }\n\n    return b.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7","date":1509555533,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"LongValueFacetCounts totCount=\");\n    b.append(totCount);\n    b.append(\":\\n\");\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] != 0) {\n        b.append(\"  \");\n        b.append(i);\n        b.append(\" -> count=\");\n        b.append(counts[i]);\n        b.append('\\n');\n      }\n    }\n\n    if (hashCounts.size() != 0) {\n      for (LongIntCursor c : hashCounts) {\n        if (c.value != 0) {\n          b.append(\"  \");\n          b.append(c.key);\n          b.append(\" -> count=\");\n          b.append(c.value);\n          b.append('\\n');\n        }\n      }\n    }\n\n    return b.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder b = new StringBuilder();\n    b.append(\"LongValueFacetCounts totCount=\");\n    b.append(totCount);\n    b.append(\":\\n\");\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] != 0) {\n        b.append(\"  \");\n        b.append(i);\n        b.append(\" -> count=\");\n        b.append(counts[i]);\n        b.append('\\n');\n      }\n    }\n\n    if (hashCounts.size != 0) {\n      for (int i = 0; i < hashCounts.values.length; i++) {\n        if (hashCounts.counts[i] != 0) {\n          b.append(\"  \");\n          b.append(hashCounts.values[i]);\n          b.append(\" -> count=\");\n          b.append(hashCounts.counts[i]);\n          b.append('\\n');\n        }\n      }\n    }\n\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6028626aa0f7c266ef725110257eed11e5b3d1d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4513731041236fcf659e5bfc43d8862e1721a310"],"4513731041236fcf659e5bfc43d8862e1721a310":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6028626aa0f7c266ef725110257eed11e5b3d1d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["6028626aa0f7c266ef725110257eed11e5b3d1d7"]},"commit2Childs":{"6028626aa0f7c266ef725110257eed11e5b3d1d7":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"4513731041236fcf659e5bfc43d8862e1721a310":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6028626aa0f7c266ef725110257eed11e5b3d1d7","4513731041236fcf659e5bfc43d8862e1721a310","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}