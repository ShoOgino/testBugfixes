{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newLongRange(String,FieldCache.LongParser,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getLongs(AtomicReader,String,FieldCache.LongParser,boolean)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Long> newLongRange(String field, FieldCache.LongParser parser, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Long>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Longs values = FieldCache.DEFAULT.getLongs(context.reader(), field, (FieldCache.LongParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newLongRange(String,FieldCache.LongParser,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link FieldCache#getLongs(AtomicReader,String,FieldCache.LongParser,boolean)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<Long> newLongRange(String field, FieldCache.LongParser parser, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<Long>(field, parser, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final FieldCache.Longs values = FieldCache.DEFAULT.getLongs(context.reader(), field, (FieldCache.LongParser) parser, false);\n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a numeric range filter using {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a numeric range filter using {@link AtomicReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a numeric range filter using {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)}. This works with all\n   * long fields containing exactly one numeric term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static DocValuesRangeFilter<Long> newLongRange(String field, Long lowerVal, Long upperVal, boolean includeLower, boolean includeUpper) {\n    return new DocValuesRangeFilter<Long>(field, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final long inclusiveLowerPoint, inclusiveUpperPoint;\n        if (lowerVal != null) {\n          long i = lowerVal.longValue();\n          if (!includeLower && i == Long.MAX_VALUE)\n            return null;\n          inclusiveLowerPoint = includeLower ? i : (i + 1L);\n        } else {\n          inclusiveLowerPoint = Long.MIN_VALUE;\n        }\n        if (upperVal != null) {\n          long i = upperVal.longValue();\n          if (!includeUpper && i == Long.MIN_VALUE)\n            return null;\n          inclusiveUpperPoint = includeUpper ? i : (i - 1L);\n        } else {\n          inclusiveUpperPoint = Long.MAX_VALUE;\n        }\n        \n        if (inclusiveLowerPoint > inclusiveUpperPoint)\n          return null;\n        \n        final NumericDocValues values = DocValues.getNumeric(context.reader(), field);\n        return new DocValuesDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected boolean matchDoc(int doc) {\n            final long value = values.get(doc);\n            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9274621789ce990dbfef455dabdf026bb3184821"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}