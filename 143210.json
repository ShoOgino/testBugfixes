{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCodedBytes(int,int,BytesRef).mjava","commits":[{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCodedBytes(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCodedBytes(final int val, final int shift, final BytesRef bytes) {\n    if ((shift & ~0x1f) != 0)  // ensure shift is 0..31\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.offset = 0;\n    bytes.length = nChars+1;   // one extra for the byte that contains the shift info\n    if (bytes.bytes.length < bytes.length) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_LONG];  // use the max\n    }\n    bytes.bytes[0] = (byte)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCodedBytes(int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCodedBytes(final int val, final int shift, final BytesRef bytes) {\n    if ((shift & ~0x1f) != 0)  // ensure shift is 0..31\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.offset = 0;\n    bytes.length = nChars+1;   // one extra for the byte that contains the shift info\n    if (bytes.bytes.length < bytes.length) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_LONG];  // use the max\n    }\n    bytes.bytes[0] = (byte)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCodedBytes(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCodedBytes(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCodedBytes(final int val, final int shift, final BytesRefBuilder bytes) {\n    if ((shift & ~0x1f) != 0)  // ensure shift is 0..31\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(NumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCodedBytes(final int val, final int shift, final BytesRef bytes) {\n    if ((shift & ~0x1f) != 0)  // ensure shift is 0..31\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.offset = 0;\n    bytes.length = nChars+1;   // one extra for the byte that contains the shift info\n    if (bytes.bytes.length < bytes.length) {\n      bytes.bytes = new byte[NumericUtils.BUF_SIZE_LONG];  // use the max\n    }\n    bytes.bytes[0] = (byte)(SHIFT_START_INT + shift);\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"22abfa0c2df167320b9c97d1bdbb19347ff95402":["dd45d4a2ee01a1932d33eec42f5272c2402da679","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}