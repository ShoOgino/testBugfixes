{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/PForUtil#encode(long[],DataOutput).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/PForUtil#encode(long[],DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Encode 128 integers from {@code longs} into {@code out}.\n   */\n  void encode(long[] longs, DataOutput out) throws IOException {\n    // At most 3 exceptions\n    final long[] top4 = new long[4];\n    Arrays.fill(top4, -1L);\n    for (int i = 0; i < ForUtil.BLOCK_SIZE; ++i) {\n      if (longs[i] > top4[0]) {\n        top4[0] = longs[i];\n        Arrays.sort(top4); // For only 4 entries we just sort on every iteration instead of maintaining a PQ\n      }\n    }\n\n    final int maxBitsRequired = PackedInts.bitsRequired(top4[3]);\n    // We store the patch on a byte, so we can't decrease the number of bits required by more than 8\n    final int patchedBitsRequired =  Math.max(PackedInts.bitsRequired(top4[0]), maxBitsRequired - 8);\n    int numExceptions = 0;\n    final long maxUnpatchedValue = (1L << patchedBitsRequired) - 1;\n    for (int i = 1; i < 4; ++i) {\n      if (top4[i] > maxUnpatchedValue) {\n        numExceptions++;\n      }\n    }\n    final byte[] exceptions = new byte[numExceptions*2];\n    if (numExceptions > 0) {\n      int exceptionCount = 0;\n      for (int i = 0; i < ForUtil.BLOCK_SIZE; ++i) {\n        if (longs[i] > (1L << patchedBitsRequired) - 1) {\n          exceptions[exceptionCount*2] = (byte) i;\n          exceptions[exceptionCount*2+1] = (byte) (longs[i] >>> patchedBitsRequired);\n          longs[i] &= maxUnpatchedValue;\n          exceptionCount++;\n        }\n      }\n      assert exceptionCount == numExceptions : exceptionCount + \" \" + numExceptions;\n    }\n\n    if (allEqual(longs) && maxBitsRequired <= 8) {\n      for (int i = 0; i < numExceptions; ++i) {\n        exceptions[2*i + 1] = (byte) (Byte.toUnsignedLong(exceptions[2*i + 1]) << patchedBitsRequired);\n      }\n      out.writeByte((byte) (numExceptions << 5));\n      out.writeVLong(longs[0]);\n    } else {\n      final int token = (numExceptions << 5) | patchedBitsRequired;\n      out.writeByte((byte) token);\n      forUtil.encode(longs, patchedBitsRequired, out);\n    }\n    out.writeBytes(exceptions, exceptions.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}