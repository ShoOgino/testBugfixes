{"path":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","commits":[{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#build(FieldInfos,CodecProvider).mjava","sourceNew":"    SegmentCodecsBuilder tryAddAndSet(FieldInfo fi) {\n      if (fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n      return this;\n    }\n\n","sourceOld":"  static SegmentCodecs build(FieldInfos infos, CodecProvider provider) {\n    final Map<Codec, Integer> codecRegistry = new IdentityHashMap<Codec, Integer>();\n    final ArrayList<Codec> codecs = new ArrayList<Codec>();\n\n    for (FieldInfo fi : infos) {\n      if (fi.isIndexed) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n    }\n    return new SegmentCodecs(provider, codecs.toArray(Codec.EMPTY));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    SegmentCodecsBuilder tryAddAndSet(FieldInfo fi) {\n      if (fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    SegmentCodecsBuilder tryAddAndSet(FieldInfo fi) {\n      if (fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs.SegmentCodecsBuilder#tryAddAndSet(FieldInfo).mjava","sourceNew":null,"sourceOld":"    SegmentCodecsBuilder tryAddAndSet(FieldInfo fi) {\n      if (fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n        final Codec fieldCodec = provider.lookup(provider\n            .getFieldCodec(fi.name));\n        Integer ord = codecRegistry.get(fieldCodec);\n        if (ord == null) {\n          ord = Integer.valueOf(codecs.size());\n          codecRegistry.put(fieldCodec, ord);\n          codecs.add(fieldCodec);\n        }\n        fi.setCodecId(ord.intValue());\n      }\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e92442af786151ee55bc283eb472f629e3c7b52b"],"e92442af786151ee55bc283eb472f629e3c7b52b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e92442af786151ee55bc283eb472f629e3c7b52b":["7b91922b55d15444d554721b352861d028eb8278","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92442af786151ee55bc283eb472f629e3c7b52b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}