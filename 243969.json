{"path":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","commits":[{"id":"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88","date":1309095400,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever#test().mjava","sourceNew":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires merging:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.forceMerge(1);\n    doStop.set(true);\n    t.join();\n    assertTrue(\"merge count is \" + w.mergeCount.get(), w.mergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final Directory d = newDirectory();\n    final MyIndexWriter w = new MyIndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // Try to make an index that requires optimizing:\n    w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 11));\n    final int numStartDocs = atLeast(20);\n    final LineFileDocs docs = new LineFileDocs(random);\n    for(int docIDX=0;docIDX<numStartDocs;docIDX++) {\n      w.addDocument(docs.nextDoc());\n    }\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    final int mergeAtOnce = 1+w.segmentInfos.size();\n    if (mp instanceof TieredMergePolicy) {\n      ((TieredMergePolicy) mp).setMaxMergeAtOnce(mergeAtOnce);\n    } else if (mp instanceof LogMergePolicy) {\n      ((LogMergePolicy) mp).setMergeFactor(mergeAtOnce);\n    } else {\n      // skip test\n      w.close();\n      d.close();\n      return;\n    }\n\n    final AtomicBoolean doStop = new AtomicBoolean();\n    w.getConfig().setMaxBufferedDocs(2);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while (!doStop.get()) {\n            w.updateDocument(new Term(\"docid\", \"\" + random.nextInt(numStartDocs)),\n                             docs.nextDoc());\n            // Force deletes to apply\n            w.getReader().close();\n          }\n        } catch (Throwable t) {\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    t.start();\n    w.optimize();\n    doStop.set(true);\n    t.join();\n    assertTrue(\"optimize count is \" + w.optimizeMergeCount.get(), w.optimizeMergeCount.get() <= 1);\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06584e6e98d592b34e1329b384182f368d2025e8":["e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88":["06584e6e98d592b34e1329b384182f368d2025e8","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7ca9acad3ff1db8085aa83c6726b7f86b90dd88","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}