{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","commits":[{"id":"87bed47fd547f864e7fe055b2a3df19fa4b151dc","date":1478615788,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    if (s instanceof Utf8CharSequence) {\n      writeUTF8Str((Utf8CharSequence) s);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"]},"commit2Childs":{"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["0b2ba7b58bce0f80c97a5eb2f11febac26681566","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}