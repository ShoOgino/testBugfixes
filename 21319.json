{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d0f2582ab0674df97eaf6051d9d4e7d3c54f98b","date":1332507014,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> if the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48febfe26002aa6a27ecd13bbb9348e2f8a6435","date":1332510095,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  public static boolean isLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(Directory directory) throws IOException {\n    return directory.makeLock(WRITE_LOCK_NAME).isLocked();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897721e7324f7b1722ba6c325683d4a53cf756e2","date":1472142878,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#isWriterLocked(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  private static boolean isWriterLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(IndexWriter.WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  public static boolean isLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#isWriterLocked(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  private static boolean isWriterLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(IndexWriter.WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  public static boolean isLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#isLocked(Directory).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use of this method can only lead to race conditions. Try\n   *             to actually obtain a lock instead.\n   */\n  @Deprecated\n  public static boolean isLocked(Directory directory) throws IOException {\n    try {\n      directory.obtainLock(WRITE_LOCK_NAME).close();\n      return false;\n    } catch (LockObtainFailedException failed) {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["b48febfe26002aa6a27ecd13bbb9348e2f8a6435"],"b48febfe26002aa6a27ecd13bbb9348e2f8a6435":["7d0f2582ab0674df97eaf6051d9d4e7d3c54f98b"],"897721e7324f7b1722ba6c325683d4a53cf756e2":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7d0f2582ab0674df97eaf6051d9d4e7d3c54f98b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["618635065f043788c9e034f96ca5cd5cea1b4592","897721e7324f7b1722ba6c325683d4a53cf756e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["618635065f043788c9e034f96ca5cd5cea1b4592","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["897721e7324f7b1722ba6c325683d4a53cf756e2","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b48febfe26002aa6a27ecd13bbb9348e2f8a6435":["618635065f043788c9e034f96ca5cd5cea1b4592"],"897721e7324f7b1722ba6c325683d4a53cf756e2":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"7d0f2582ab0674df97eaf6051d9d4e7d3c54f98b":["b48febfe26002aa6a27ecd13bbb9348e2f8a6435"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d0f2582ab0674df97eaf6051d9d4e7d3c54f98b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}