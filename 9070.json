{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","commits":[{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"/dev/null","sourceNew":"  public ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      ThreadState state = perThreads[numThreadStatesActive];\n      numThreadStatesActive++;\n      return state;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887ebb5154a7eae4b7d25093a57200c6860ea7fd","date":1294910578,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      ThreadState state = perThreads[numThreadStatesActive];\n      numThreadStatesActive++;\n      return state;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      ThreadState state = perThreads[numThreadStatesActive];\n      numThreadStatesActive++;\n      return state;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      return perThreads[numThreadStatesActive++];\n    }\n    return null;\n  }\n\n","sourceOld":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      ThreadState state = perThreads[numThreadStatesActive];\n      numThreadStatesActive++;\n      return state;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.perThread.initialize();\n      numThreadStatesActive++;\n      return threadState;\n    }\n    return null;\n  }\n\n","sourceOld":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      return perThreads[numThreadStatesActive++];\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":null,"sourceOld":"  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.perThread.initialize();\n      numThreadStatesActive++;\n      return threadState;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["7a5e335ca550a22534d8ca9fd0914f14091e47ee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78248211b373c5a9b53071bf888805d4fab51bd3","date":1303919265,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState(boolean).mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      numThreadStatesActive++; // increment will publish the ThreadState\n      threadState.perThread.initialize();\n      return threadState;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * \n   * @param lock\n   *          <code>true</code> iff the new {@link ThreadState} should be locked\n   *          before published otherwise <code>false</code>.\n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState(boolean lock) {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock();\n      threadState.perThread.initialize();\n      numThreadStatesActive++; // increment will publish the ThreadState\n      return threadState;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      numThreadStatesActive++; // increment will publish the ThreadState\n      threadState.perThread.initialize();\n      return threadState;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      numThreadStatesActive++; // increment will publish the ThreadState\n      threadState.perThread.initialize();\n      return threadState;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      numThreadStatesActive++; // increment will publish the ThreadState\n      threadState.perThread.initialize();\n      return threadState;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a5e335ca550a22534d8ca9fd0914f14091e47ee","date":1317456750,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      numThreadStatesActive++; // increment will publish the ThreadState\n      threadState.perThread.initialize();\n      return threadState;\n    }\n    return null;\n  }\n\n","bugFix":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","78248211b373c5a9b53071bf888805d4fab51bd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"887ebb5154a7eae4b7d25093a57200c6860ea7fd":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7a5e335ca550a22534d8ca9fd0914f14091e47ee"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78248211b373c5a9b53071bf888805d4fab51bd3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["887ebb5154a7eae4b7d25093a57200c6860ea7fd"],"7a5e335ca550a22534d8ca9fd0914f14091e47ee":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78248211b373c5a9b53071bf888805d4fab51bd3":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["887ebb5154a7eae4b7d25093a57200c6860ea7fd"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["78248211b373c5a9b53071bf888805d4fab51bd3"],"887ebb5154a7eae4b7d25093a57200c6860ea7fd":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7a5e335ca550a22534d8ca9fd0914f14091e47ee","a3776dccca01c11e7046323cfad46a3b4a471233"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"7a5e335ca550a22534d8ca9fd0914f14091e47ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff78505662c0b741e2663a9f38a4889c12a32c9f","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"78248211b373c5a9b53071bf888805d4fab51bd3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}