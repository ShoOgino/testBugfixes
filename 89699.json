{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","sourceNew":"      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","sourceOld":"      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","sourceNew":"      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","sourceOld":"      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","sourceNew":"      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","sourceOld":"      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector.GroupSortedBR.FacetSortedBR#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {\n        if (segmentFacetCounts != null) {\n          segmentResults.add(createSegmentResult());\n        }\n\n        groupFieldSource = getDocValuesSortedSource(groupField, groupDvType, groupDiskResident, context.reader());\n        facetFieldSource = getDocValuesSortedSource(facetField, facetFieldDvType, facetDiskResident, context.reader());\n        segmentFacetCounts = new int[facetFieldSource.getValueCount()];\n        segmentTotalCount = 0;\n\n        segmentGroupedFacetHits.clear();\n        for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n          int facetOrd = facetFieldSource.getOrdByValue(groupedFacetHit.facetValue, facetSpare);\n          if (facetOrd < 0) {\n            continue;\n          }\n\n          int groupOrd = groupFieldSource.getOrdByValue(groupedFacetHit.groupValue, groupSpare);\n          if (groupOrd < 0) {\n            continue;\n          }\n\n          int segmentGroupedFacetsIndex = (groupOrd * facetFieldSource.getValueCount()) + facetOrd;\n          segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n        }\n\n        if (facetPrefix != null) {\n          startFacetOrd = facetFieldSource.getOrdByValue(facetPrefix, facetSpare);\n          if (startFacetOrd < 0) {\n            // Points to the ord one higher than facetPrefix\n            startFacetOrd = -startFacetOrd - 1;\n          }\n          BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n          facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n          endFacetOrd = facetFieldSource.getOrdByValue(facetEndPrefix, facetSpare);\n          endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = facetFieldSource.getValueCount();\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0837ab0472feecb3a54260729d845f839e1cbd72"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}