{"path":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n        \n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n        \n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n        \n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54c40f2a4f8741ec845d55de05ea762e631b5c90","date":1294602494,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  protected boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      //System.out.println(\"TS: collect doc=\" + doc);\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e765231acfcd7799726d3b89c8ad84c426eee475","date":1318454615,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      //System.out.println(\"TS: collect doc=\" + doc);\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        pointerMax = docsEnum.read();  // refill\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      //System.out.println(\"TS: collect doc=\" + doc);\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        refillBuffer();\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermScorer#score(Collector,int,int).mjava","sourceNew":null,"sourceOld":"  // firstDocID is ignored since nextDoc() sets 'doc'\n  @Override\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      //System.out.println(\"TS: collect doc=\" + doc);\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        pointerMax = docsEnum.read();  // refill\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e765231acfcd7799726d3b89c8ad84c426eee475":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["54c40f2a4f8741ec845d55de05ea762e631b5c90"],"54c40f2a4f8741ec845d55de05ea762e631b5c90":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["e765231acfcd7799726d3b89c8ad84c426eee475"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e765231acfcd7799726d3b89c8ad84c426eee475":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["e765231acfcd7799726d3b89c8ad84c426eee475"],"54c40f2a4f8741ec845d55de05ea762e631b5c90":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["54c40f2a4f8741ec845d55de05ea762e631b5c90","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}