{"path":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == field.numPostings)\n      return false;\n\n    p = postings[postingUpto];\n    docID = 0;\n\n    text = field.threadState.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    if (p.freqUpto > p.freqStart)\n      freq.init(field.threadState.postingsPool, p.freqStart, p.freqUpto);\n    else\n      freq.bufferOffset = freq.upto = freq.endIndex = 0;\n\n    prox.init(field.threadState.postingsPool, p.proxStart, p.proxUpto);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTf)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTf)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextTerm().mjava","sourceNew":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","sourceOld":"  boolean nextTerm() throws IOException {\n    postingUpto++;\n    if (postingUpto == numPostings)\n      return false;\n\n    p = (FreqProxTermsWriter.PostingList) postings[postingUpto];\n    docID = 0;\n\n    text = charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    textOffset = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    field.termsHashPerField.initReader(freq, p, 0);\n    if (!field.fieldInfo.omitTermFreqAndPositions)\n      field.termsHashPerField.initReader(prox, p, 1);\n\n    // Should always be true\n    boolean result = nextDoc();\n    assert result;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"5350389bf83287111f7760b9e3db3af8e3648474":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}