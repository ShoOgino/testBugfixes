{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String,String> args = new HashMap<String, String>();\n      args.put( CommonParams.Q, query );\n      args.put( CommonParams.QT, \"/elevate\" );\n      args.put( CommonParams.FL, \"id,score\" );\n      args.put( \"indent\", \"true\" );\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n      assertQ(\"Make sure standard sort works as expected\", req\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='a']\"\n              ,\"//result/doc[2]/str[@name='id'][.='b']\"\n              ,\"//result/doc[3]/str[@name='id'][.='c']\"\n              );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n      assertQ(\"All six should make it\", req\n              ,\"//*[@numFound='6']\"\n              ,\"//result/doc[1]/str[@name='id'][.='x']\"\n              ,\"//result/doc[2]/str[@name='id'][.='y']\"\n              ,\"//result/doc[3]/str[@name='id'][.='z']\"\n              ,\"//result/doc[4]/str[@name='id'][.='a']\"\n              ,\"//result/doc[5]/str[@name='id'][.='b']\"\n              ,\"//result/doc[6]/str[@name='id'][.='c']\"\n              );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n      assertQ(\"All four should make it\", req\n              ,\"//*[@numFound='4']\"\n              ,\"//result/doc[1]/str[@name='id'][.='a']\"\n              ,\"//result/doc[2]/str[@name='id'][.='x']\"\n              ,\"//result/doc[3]/str[@name='id'][.='b']\"\n              ,\"//result/doc[4]/str[@name='id'][.='c']\"\n              );\n\n      // Test reverse sort\n      args.put( CommonParams.SORT, \"score asc\" );\n      assertQ(\"All four should make it\", req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[4]/str[@name='id'][.='a']\"\n          ,\"//result/doc[3]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[1]/str[@name='id'][.='c']\"\n          );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals( false, booster.forceElevation );\n      args.put( CommonParams.SORT, \"str_s1 asc\" );\n      assertQ( null, req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[1]/str[@name='id'][.='a']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[3]/str[@name='id'][.='c']\"\n          ,\"//result/doc[4]/str[@name='id'][.='x']\"\n          );\n\n      booster.forceElevation = true;\n      assertQ( null, req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[1]/str[@name='id'][.='a']\"\n          ,\"//result/doc[2]/str[@name='id'][.='x']\"\n          ,\"//result/doc[3]/str[@name='id'][.='b']\"\n          ,\"//result/doc[4]/str[@name='id'][.='c']\"\n          );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n      assertQ( null, req\n          ,\"//*[@numFound='2']\"\n          ,\"//result/doc[1]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='a']\"\n          );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove( CommonParams.SORT );\n      args.remove( QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n      assertQ( null, req\n          ,\"//*[@numFound='3']\"\n          ,\"//result/doc[1]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[3]/str[@name='id'][.='c']\"\n          );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String,String> args = new HashMap<String, String>();\n      args.put( CommonParams.Q, query );\n      args.put( CommonParams.QT, \"/elevate\" );\n      args.put( CommonParams.FL, \"id,score\" );\n      args.put( \"indent\", \"true\" );\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n      assertQ(\"Make sure standard sort works as expected\", req\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='a']\"\n              ,\"//result/doc[2]/str[@name='id'][.='b']\"\n              ,\"//result/doc[3]/str[@name='id'][.='c']\"\n              );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n      assertQ(\"All six should make it\", req\n              ,\"//*[@numFound='6']\"\n              ,\"//result/doc[1]/str[@name='id'][.='x']\"\n              ,\"//result/doc[2]/str[@name='id'][.='y']\"\n              ,\"//result/doc[3]/str[@name='id'][.='z']\"\n              ,\"//result/doc[4]/str[@name='id'][.='a']\"\n              ,\"//result/doc[5]/str[@name='id'][.='b']\"\n              ,\"//result/doc[6]/str[@name='id'][.='c']\"\n              );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n      assertQ(\"All four should make it\", req\n              ,\"//*[@numFound='4']\"\n              ,\"//result/doc[1]/str[@name='id'][.='a']\"\n              ,\"//result/doc[2]/str[@name='id'][.='x']\"\n              ,\"//result/doc[3]/str[@name='id'][.='b']\"\n              ,\"//result/doc[4]/str[@name='id'][.='c']\"\n              );\n\n      // Test reverse sort\n      args.put( CommonParams.SORT, \"score asc\" );\n      assertQ(\"All four should make it\", req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[4]/str[@name='id'][.='a']\"\n          ,\"//result/doc[3]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[1]/str[@name='id'][.='c']\"\n          );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals( false, booster.forceElevation );\n      args.put( CommonParams.SORT, \"str_s1 asc\" );\n      assertQ( null, req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[1]/str[@name='id'][.='a']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[3]/str[@name='id'][.='c']\"\n          ,\"//result/doc[4]/str[@name='id'][.='x']\"\n          );\n\n      booster.forceElevation = true;\n      assertQ( null, req\n          ,\"//*[@numFound='4']\"\n          ,\"//result/doc[1]/str[@name='id'][.='a']\"\n          ,\"//result/doc[2]/str[@name='id'][.='x']\"\n          ,\"//result/doc[3]/str[@name='id'][.='b']\"\n          ,\"//result/doc[4]/str[@name='id'][.='c']\"\n          );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n      assertQ( null, req\n          ,\"//*[@numFound='2']\"\n          ,\"//result/doc[1]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='a']\"\n          );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove( CommonParams.SORT );\n      args.remove( QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n      assertQ( null, req\n          ,\"//*[@numFound='3']\"\n          ,\"//result/doc[1]/str[@name='id'][.='x']\"\n          ,\"//result/doc[2]/str[@name='id'][.='b']\"\n          ,\"//result/doc[3]/str[@name='id'][.='c']\"\n          );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f81e6aaeb4d151ea5abc89ebcb951a7414b44e6","date":1332192176,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70944c2a43908e32d54fb0ba4e51a9dad195b4e6","date":1389291298,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<String, String>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e3c8e456182d5691063c0c6aee4fca5c60c36a2","date":1426449982,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          // NOTE REVERSED doc[X] indices\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[1]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='c']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[5]/str[@name='id'][.='c']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          // NOTE REVERSED doc[X] indices\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[1]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          // NOTE REVERSED doc[X] indices\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[1]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\"));\n      assertU(commit());\n\n      String query = \"title:ipod\";\n\n      Map<String, String> args = new HashMap<>();  // reusing args & requests this way is a solr-test-antipattern.  PLEASE DO NOT COPY THIS CODE\n      args.put(CommonParams.Q, query);\n      args.put(CommonParams.QT, \"/elevate\");\n      args.put(CommonParams.FL, \"id,score\");\n      args.put(\"indent\", \"true\");\n      //args.put( CommonParams.FL, \"id,title,score\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent booster = (QueryElevationComponent) req.getCore().getSearchComponent(\"elevate\");\n\n      assertQ(\"Make sure standard sort works as expected\", req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.elevationCache.clear();\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"y\", \"z\"}, null);\n\n\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All six should make it\", req\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      booster.elevationCache.clear();\n\n      // now switch the order:\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"a\", \"x\"}, null);\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Test reverse sort\n      args.put(CommonParams.SORT, \"score asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          // NOTE REVERSED doc[X] indices\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n          , \"//result/doc[3]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[1]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      args.put(CommonParams.SORT, \"str_s1 asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      booster.forceElevation = true;\n      args.put(CommonParams.SORT, \"id asc\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(null, req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(null, req\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.elevationCache.clear();\n      args.remove(CommonParams.SORT);\n      args.remove(QueryElevationParams.EXCLUSIVE);\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      booster.setTopQueryResults(reader, query, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(null, req\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.elevationCache.clear();\n      args.put(QueryElevationParams.IDS, \"x,y,z\");\n      args.put(QueryElevationParams.EXCLUDE, \"b\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All five should make it\", req\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      args.put(QueryElevationParams.IDS, \"x,z,y\");\n      args.put(QueryElevationParams.EXCLUDE, \"b,c\");\n      req.close(); req = new LocalSolrQueryRequest(h.getCore(), new MapSolrParams(args));\n      assertQ(\"All four should make it\", req\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n      req.close();\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertFalse(booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertFalse(booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"a\", \"title\", \"ipod trash trash\", \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod  trash\", \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod  ipod \", \"str_s1\", \"group2\"));\n\n      assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"group1\"));\n      assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"group2\"));\n      assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"group2\"));\n      assertU(commit());\n\n      final String query = \"title:ipod\";\n\n      final SolrParams baseParams = params(\n          \"qt\", \"/elevate\",\n          \"q\", query,\n          \"fl\", \"id,score\",\n          \"indent\", \"true\");\n\n      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent(\"elevate\");\n      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n\n      assertQ(\"Make sure standard sort works as expected\", req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='c']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='a']\"\n      );\n\n      // Explicitly set what gets boosted\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"y\", \"z\"}, null);\n\n      assertQ(\"All six should make it\", req(baseParams)\n          , \"//*[@numFound='6']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='b']\"\n          , \"//result/doc[6]/str[@name='id'][.='a']\"\n      );\n\n      // now switch the order:\n      booster.setTopQueryResults(reader, query, false, new String[]{\"a\", \"x\"}, null);\n      assertQ(req(baseParams)\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      // Try normal sort by 'id'\n      // default 'forceBoost' should be false\n      assertEquals(false, booster.forceElevation);\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='b']\"\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='x']\"\n      );\n\n      assertQ(\"useConfiguredElevatedOrder=false\",\n          req(baseParams, \"sort\", \"str_s1 asc,id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"//group1\n          , \"//result/doc[2]/str[@name='id'][.='a']\"//group1\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(req(baseParams, \"sort\", \"id asc\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='a']\"\n          , \"//result/doc[2]/str[@name='id'][.='x']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n      );\n\n      booster.forceElevation = true;\n      assertQ(\"useConfiguredElevatedOrder=false and forceElevation\",\n          req(baseParams, \"sort\", \"id desc\", \"useConfiguredElevatedOrder\", \"false\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\" // force elevated\n          , \"//result/doc[2]/str[@name='id'][.='a']\" // force elevated\n          , \"//result/doc[3]/str[@name='id'][.='c']\"\n          , \"//result/doc[4]/str[@name='id'][.='b']\"\n      );\n\n      //Test exclusive (not to be confused with exclusion)\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\", \"a\"}, new String[]{});\n      assertQ(req(baseParams, \"exclusive\", \"true\")\n          , \"//*[@numFound='2']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='a']\"\n      );\n\n      // Test exclusion\n      booster.setTopQueryResults(reader, query, false, new String[]{\"x\"}, new String[]{\"a\"});\n      assertQ(req(baseParams)\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='c']\"\n          , \"//result/doc[3]/str[@name='id'][.='b']\"\n      );\n\n\n      // Test setting ids and excludes from http parameters\n\n      booster.clearElevationProviderCache();\n      assertQ(\"All five should make it\", req(baseParams, \"elevateIds\", \"x,y,z\", \"excludeIds\", \"b\")\n          , \"//*[@numFound='5']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='y']\"\n          , \"//result/doc[3]/str[@name='id'][.='z']\"\n          , \"//result/doc[4]/str[@name='id'][.='c']\"\n          , \"//result/doc[5]/str[@name='id'][.='a']\"\n      );\n\n      assertQ(\"All four should make it\", req(baseParams, \"elevateIds\", \"x,z,y\", \"excludeIds\", \"b,c\")\n          , \"//*[@numFound='4']\"\n          , \"//result/doc[1]/str[@name='id'][.='x']\"\n          , \"//result/doc[2]/str[@name='id'][.='z']\"\n          , \"//result/doc[3]/str[@name='id'][.='y']\"\n          , \"//result/doc[4]/str[@name='id'][.='a']\"\n      );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["70944c2a43908e32d54fb0ba4e51a9dad195b4e6"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["5e3c8e456182d5691063c0c6aee4fca5c60c36a2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["c26f00b574427b55127e869b935845554afde1fa"],"1d0561cea94adff1867218e77bb763c7583be279":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["2ad458affd82a1d762eb506003907d9363a333cb"],"5e3c8e456182d5691063c0c6aee4fca5c60c36a2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5e3c8e456182d5691063c0c6aee4fca5c60c36a2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["49dd2950028d6b59839f54d3801d77f769fa22ef","2ad458affd82a1d762eb506003907d9363a333cb"],"1f81e6aaeb4d151ea5abc89ebcb951a7414b44e6":["1d0561cea94adff1867218e77bb763c7583be279"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70944c2a43908e32d54fb0ba4e51a9dad195b4e6":["1f81e6aaeb4d151ea5abc89ebcb951a7414b44e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["2ad458affd82a1d762eb506003907d9363a333cb","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["49dd2950028d6b59839f54d3801d77f769fa22ef","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5e3c8e456182d5691063c0c6aee4fca5c60c36a2","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c26f00b574427b55127e869b935845554afde1fa":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["1d0561cea94adff1867218e77bb763c7583be279"],"1d0561cea94adff1867218e77bb763c7583be279":["1f81e6aaeb4d151ea5abc89ebcb951a7414b44e6"],"5e3c8e456182d5691063c0c6aee4fca5c60c36a2":["49dd2950028d6b59839f54d3801d77f769fa22ef","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1f81e6aaeb4d151ea5abc89ebcb951a7414b44e6":["70944c2a43908e32d54fb0ba4e51a9dad195b4e6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"70944c2a43908e32d54fb0ba4e51a9dad195b4e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["e6046c615b67e878b7c0ab9257d01dd759493f06","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}