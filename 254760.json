{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(Path).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(Path).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(SolrResourceLoader).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(Path solrHome) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", solrHome)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(SolrResourceLoader loader) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", loader)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb87985079ab034ce215661202801376f614a8c","date":1595969187,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(Path).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#buildTestNodeConfig(Path).mjava","sourceNew":"  public static NodeConfig buildTestNodeConfig(Path solrHome) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[]{defaultPlugin})\n        .setHistoryHandler(\n            Boolean.getBoolean(\"metricsHistory\")\n                ? null : new PluginInfo(\"typeUnused\", Collections.singletonMap(\"enable\", \"false\")))\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", solrHome)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","sourceOld":"  public static NodeConfig buildTestNodeConfig(Path solrHome) {\n    CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(System.getProperty(\"host\"),\n                                                                 Integer.getInteger(\"hostPort\", 8983),\n                                                                 System.getProperty(\"hostContext\", \"\"))\n        .setZkClientTimeout(Integer.getInteger(\"zkClientTimeout\", 30000))\n        .build();\n    if (System.getProperty(\"zkHost\") == null)\n      cloudConfig = null;\n    UpdateShardHandlerConfig updateShardHandlerConfig = new UpdateShardHandlerConfig(\n        HttpClientUtil.DEFAULT_MAXCONNECTIONS,\n        HttpClientUtil.DEFAULT_MAXCONNECTIONSPERHOST,\n        30000, 30000,\n        UpdateShardHandlerConfig.DEFAULT_METRICNAMESTRATEGY, UpdateShardHandlerConfig.DEFAULT_MAXRECOVERYTHREADS);\n    // universal default metric reporter\n    Map<String,Object> attributes = new HashMap<>();\n    attributes.put(\"name\", \"default\");\n    attributes.put(\"class\", SolrJmxReporter.class.getName());\n    PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n    MetricsConfig metricsConfig = new MetricsConfig.MetricsConfigBuilder()\n        .setMetricReporterPlugins(new PluginInfo[] {defaultPlugin})\n        .build();\n\n    return new NodeConfig.NodeConfigBuilder(\"testNode\", solrHome)\n        .setUseSchemaCache(Boolean.getBoolean(\"shareSchema\"))\n        .setCloudConfig(cloudConfig)\n        .setUpdateShardHandlerConfig(updateShardHandlerConfig)\n        .setMetricsConfig(metricsConfig)\n        .build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb87985079ab034ce215661202801376f614a8c":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb87985079ab034ce215661202801376f614a8c"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["2bb87985079ab034ce215661202801376f614a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"2bb87985079ab034ce215661202801376f614a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}