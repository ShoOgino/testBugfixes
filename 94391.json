{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStream().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testDaemonUpdateStream() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    {\n      final String expr\n        // NOTE: inspite of what is implied by 'terminate=true', this daemon will\n        // NEVER terminate on it's own as long as the updates are successful\n        // (aparently that requires usage of anest topic() stream to set a \"sleepMillis\"?!?!?!)\n        = \"daemon(id=daemonId,runInterval=1000,terminate=true,           \"\n        + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n        ;\n      final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size()); // daemon starting status\n    }\n    try {\n      // We have to poll the daemon 'list' to know once it's run...\n      long iterations = 0;\n      final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while ( ! timeout.hasTimedOut() ) {\n        final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                      params(\"qt\", \"/stream\",\n                                                             \"action\", \"list\"));\n        daemonCheck.setCredentials(WRITE_X_USER, WRITE_X_USER);\n        final List<Tuple> tuples = getTuples(daemonCheck);\n        assertEquals(1, tuples.size()); // our daemon;\n        iterations = tuples.get(0).getLong(\"iterations\");\n        if (1 < iterations) {\n          // once the daemon has had a chance to run, break out of TimeOut\n          break;\n        }\n        Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n      }\n      assertTrue(\"Didn't see any iterations after waiting an excessive amount of time: \" + iterations,\n                 0 < iterations);\n    } finally {\n      // kill the damon...\n      final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"action\", \"kill\",\n                                                            \"id\", \"daemonId\"));\n      daemonKiller.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(daemonKiller);\n      assertEquals(1, tuples.size()); // daemon death status\n    }\n    \n    assertEquals(1L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d959ec4c6f38b465c2b853271aecb516e06e7d94"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}