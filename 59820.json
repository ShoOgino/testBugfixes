{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    qb.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    qb.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(qb.build(), 0);\n    qb.setSlop(1);\n    doTestZeroPosIncrSloppy(qb.build(), 0);\n    qb.setSlop(2);\n    doTestZeroPosIncrSloppy(qb.build(), 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testZeroPosIncrSloppyParsedAnd().mjava","sourceNew":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery.Builder qb = new MultiPhraseQuery.Builder();\n    qb.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    qb.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    qb.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(qb.build(), 0);\n    qb.setSlop(1);\n    doTestZeroPosIncrSloppy(qb.build(), 0);\n    qb.setSlop(2);\n    doTestZeroPosIncrSloppy(qb.build(), 1);\n  }\n\n","sourceOld":"  /**\n   * using query parser, MPQ will be created, and will not be strict about having all query terms \n   * in each position - one of each position is sufficient (OR logic)\n   */\n  public void testZeroPosIncrSloppyParsedAnd() throws IOException {\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    q.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    q.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(1);\n    doTestZeroPosIncrSloppy(q, 0);\n    q.setSlop(2);\n    doTestZeroPosIncrSloppy(q, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}