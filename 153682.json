{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71c829ee5e576456cad997d255191ad7f276daa5","date":1459792750,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a194542b1c5c677348d17a32265a1ad342f3caa0","date":1461081975,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ac273b4e4637e6dd8cf5f2d90a474f897884d7","date":1505963386,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    int type = shapeGenerator.randomShapeType();\n    GeoAreaShape areaShape = shapeGenerator.randomGeoAreaShape(type, planetModel);\n    return new Geo3dShape<>(areaShape, ctx);\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    int type = shapeGenerator.randomShapeType();\n    GeoAreaShape areaShape = shapeGenerator.randomGeoAreaShape(type, planetModel);\n    return new Geo3dShape<>(areaShape, ctx);\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints);\n            if (shape == null) {\n              continue;\n            }\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPoint();\n            points[i] = new GeoPoint(PlanetModel.SPHERE, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["71c829ee5e576456cad997d255191ad7f276daa5"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"71c829ee5e576456cad997d255191ad7f276daa5":["af2638813028b254a88b418ebeafb541afb49653"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["af2638813028b254a88b418ebeafb541afb49653","760628478e121972168791a2afa6af915192c4a6"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a194542b1c5c677348d17a32265a1ad342f3caa0","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["a194542b1c5c677348d17a32265a1ad342f3caa0"],"414425421ced68c7064f08c9da6a2c95399226d9":["760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a194542b1c5c677348d17a32265a1ad342f3caa0":["414425421ced68c7064f08c9da6a2c95399226d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ac273b4e4637e6dd8cf5f2d90a474f897884d7"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","414425421ced68c7064f08c9da6a2c95399226d9"],"af2638813028b254a88b418ebeafb541afb49653":["71c829ee5e576456cad997d255191ad7f276daa5","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"71c829ee5e576456cad997d255191ad7f276daa5":["760628478e121972168791a2afa6af915192c4a6"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"414425421ced68c7064f08c9da6a2c95399226d9":["a194542b1c5c677348d17a32265a1ad342f3caa0"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"a194542b1c5c677348d17a32265a1ad342f3caa0":["6240b74b884c5587f2a4062dd27d6c32bf228889","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}