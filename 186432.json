{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(ReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(ReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n        int newDoc = docs.advance(doc);\n        if (newDoc == doc) {\n          int freq = docs.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n        int newDoc = docs.advance(doc);\n        if (newDoc == doc) {\n          int freq = docs.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n        int newDoc = docs.advance(doc);\n        if (newDoc == doc) {\n          int freq = docs.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc)\n      throws IOException {\n      final IndexReader reader = context.reader;\n\n      ComplexExplanation result = new ComplexExplanation();\n      result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n\n      Explanation expl = new Explanation(idf, idfExp.explain());\n\n      // explain query weight\n      Explanation queryExpl = new Explanation();\n      queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n      Explanation boostExpl = new Explanation(getBoost(), \"boost\");\n      if (getBoost() != 1.0f)\n        queryExpl.addDetail(boostExpl);\n      queryExpl.addDetail(expl);\n\n      Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n      queryExpl.addDetail(queryNormExpl);\n\n      queryExpl.setValue(boostExpl.getValue() *\n                         expl.getValue() *\n                         queryNormExpl.getValue());\n\n      result.addDetail(queryExpl);\n\n      // explain field weight\n      String field = term.field();\n      ComplexExplanation fieldExpl = new ComplexExplanation();\n      fieldExpl.setDescription(\"fieldWeight(\"+term+\" in \"+doc+\n                               \"), product of:\");\n\n      Explanation tfExplanation = new Explanation();\n      int tf = 0;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n          int newDoc = docs.advance(doc);\n          if (newDoc == doc) {\n            tf = docs.freq();\n          }\n        tfExplanation.setValue(similarity.tf(tf));\n        tfExplanation.setDescription(\"tf(termFreq(\"+term+\")=\"+tf+\")\");\n      } else {\n        tfExplanation.setValue(0.0f);\n        tfExplanation.setDescription(\"no matching term\");\n      }\n      fieldExpl.addDetail(tfExplanation);\n      fieldExpl.addDetail(expl);\n\n      Explanation fieldNormExpl = new Explanation();\n      final byte[] fieldNorms = reader.norms(field);\n      float fieldNorm =\n        fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n      fieldNormExpl.setValue(fieldNorm);\n      fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n      fieldExpl.addDetail(fieldNormExpl);\n      \n      fieldExpl.setMatch(Boolean.valueOf(tfExplanation.isMatch()));\n      fieldExpl.setValue(tfExplanation.getValue() *\n                         expl.getValue() *\n                         fieldNormExpl.getValue());\n\n      result.addDetail(fieldExpl);\n      result.setMatch(fieldExpl.getMatch());\n      \n      // combine them\n      result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n      if (queryExpl.getValue() == 1.0f)\n        return fieldExpl;\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n        int newDoc = docs.advance(doc);\n        if (newDoc == doc) {\n          int freq = docs.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(context.reader.getLiveDocs(), term.field(), term.bytes());\n      if (docs != null) {\n        int newDoc = docs.advance(doc);\n        if (newDoc == doc) {\n          int freq = docs.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactDocScorer docScorer = similarity.exactDocScorer(stats, term.field(), context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#explain(AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          ExactSimScorer docScorer = similarity.exactSimScorer(stats, context);\n          ComplexExplanation result = new ComplexExplanation();\n          result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"termFreq=\" + freq));\n          result.addDetail(scoreExplanation);\n          result.setValue(scoreExplanation.getValue());\n          result.setMatch(true);\n          return result;\n        }\n      }\n      return new ComplexExplanation(false, 0.0f, \"no matching term\");      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["fa1a999d6674423e5c4ac858b410283f6fe03f20","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["872cff1d3a554e0cd64014cd97f88d3002b0f491","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["fa1a999d6674423e5c4ac858b410283f6fe03f20","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["0f3cee3d20b0c786e6fca20539454262e29edcab","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["872cff1d3a554e0cd64014cd97f88d3002b0f491","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","b65b350ca9588f9fc76ce7d6804160d06c45ff42","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}