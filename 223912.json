{"path":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","commits":[{"id":"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c","date":1475421873,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b","date":1485551348,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30000)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30000)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","date":1485624051,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#testThreadSafety().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30000)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30000)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.common.cloud.SolrZkClient=debug\")\n  public void testThreadSafety() throws Exception {\n\n    final String configsetName = \"managed-config\";//\n\n    try (SolrZkClient client = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n      // we can pick any to load configs, I suppose, but here we check\n      client.upConfig(configset(\"cloud-managed-upgrade\"), configsetName);\n    }\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    \n    try (SolrZkClient raceJudge = new SuspendingZkClient(zkServer.getZkHost(), 30)) {\n\n      ZkController zkController = createZkController(raceJudge);\n\n      List<Future<?>> futures = new ArrayList<>();\n      for (int i = 0; i < 2; i++) {\n        futures.add(executor.submit(indexSchemaLoader(configsetName, zkController)));\n      }\n\n      for (Future<?> future : futures) {\n        future.get();\n      }\n    }\n    finally {\n      ExecutorUtil.shutdownAndAwaitTermination(executor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c"],"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b"]},"commit2Childs":{"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b":["f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}