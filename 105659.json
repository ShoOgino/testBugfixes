{"path":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","commits":[{"id":"beea4d4bbebcfb6689ed31936553c5e98bce2871","date":1393882670,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    createTempDir();\n    solrHome = new File(TEMP_DIR, TestSearcherReuse.class.getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    createTempDir();\n    solrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    createTempDir();\n    solrHome = new File(TEMP_DIR, TestSearcherReuse.class.getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = new File(dataDir, TestSearcherReuse.class.getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    createTempDir();\n    solrHome = new File(TEMP_DIR, TestSearcherReuse.class.getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = createTempDir();\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    createTempDir();\n    solrHome = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = createTempDir();\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = new File(dataDir, TestSearcherReuse.class.getSimpleName());\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearcherReuse#setupTempDirAndCoreWithManagedSchema().mjava","sourceNew":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = createTempDir().toFile();\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","sourceOld":"  /**\n   * We're using a Managed schema so we can confirm that opening a new searcher \n   * after a schema modification results in getting a new searcher with the new \n   * schema linked to it.\n   */\n  @BeforeClass\n  private static void setupTempDirAndCoreWithManagedSchema() throws Exception {\n    solrHome = createTempDir();\n    solrHome = solrHome.getAbsoluteFile();\n\n    File confDir = new File(solrHome, confPath);\n    File testHomeConfDir = new File(TEST_HOME(), confPath);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig-managed-schema.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"solrconfig.snippet.randomindexconfig.xml\"), confDir);\n    FileUtils.copyFileToDirectory(new File(testHomeConfDir, \"schema-id-and-version-fields-only.xml\"), confDir);\n\n    // initCore will trigger an upgrade to managed schema, since the solrconfig has\n    // <schemaFactory class=\"ManagedIndexSchemaFactory\" ... />\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-id-and-version-fields-only.xml\", \n             solrHome.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"beea4d4bbebcfb6689ed31936553c5e98bce2871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["beea4d4bbebcfb6689ed31936553c5e98bce2871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["beea4d4bbebcfb6689ed31936553c5e98bce2871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"beea4d4bbebcfb6689ed31936553c5e98bce2871":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["beea4d4bbebcfb6689ed31936553c5e98bce2871"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}