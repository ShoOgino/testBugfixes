{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries().mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\");\n\n    //Test SOLR-5773 with max field collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\");\n\n\n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n\n    //Test collapse by min int field and sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_tl asc,id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"score desc,id asc\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                          \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                          \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testCollapseQueries() throws Exception {\n    final String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n    \n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"group1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"group2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"group2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\");\n\n    //Test SOLR-5773 with max field collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\");\n\n\n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n\n    //Test collapse by min int field and sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti}\");\n    params.add(\"sort\", \"test_tl asc,id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti}\");\n    params.add(\"sort\", \"score desc,id asc\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                          \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                          \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n\n\n    //Test collapse by min long field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n    //Test collapse by max long field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\");\n\n    //Test SOLR-5773 with max field collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"1,5\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='5.0']\",\n        \"//result/doc[3]/float[@name='id'][.='4.0']\");\n\n\n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n\n    //Test collapse by min int field and sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_tl asc,id desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"score desc,id asc\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                          \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                          \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0201bd24de8c2e43ffd97115399c48fbcc83836","date":1447713745,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases, so index order applies\n    for (String selector : new String[] {\n        \" min=bogus_ti \", \" sort='bogus_ti asc' \",\n        \" max=bogus_ti \", \" sort='bogus_ti desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":["0c601c0f72166d843af2e558c0d60962810f8bdb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c601c0f72166d843af2e558c0d60962810f8bdb","date":1447784285,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_ti \", \" sort='bogus_ti asc' \",\n        \" max=bogus_ti \", \" sort='bogus_ti desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases, so index order applies\n    for (String selector : new String[] {\n        \" min=bogus_ti \", \" sort='bogus_ti asc' \",\n        \" max=bogus_ti \", \" sort='bogus_ti desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":["a0201bd24de8c2e43ffd97115399c48fbcc83836"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ea826cad27aae1c1287b70d2eaf0202ec6aa754","date":1490169633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_ti \", \" sort='bogus_ti asc' \",\n        \" max=bogus_ti \", \" sort='bogus_ti desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa09e86cb64347ee96ff0a59f09b539abd620e57","date":1490280013,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"50\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"4\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"8\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_ti)\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_ti))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_ti \", \" sort='test_ti desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_ti)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_ti desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_ti \", \" sort='test_ti asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_tl asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_ti\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tl\"+hint+\"}\");\n      params.add(\"sort\", \"test_ti desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"sort\", \"test_ti asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_ti \", \" sort='bogus_ti asc' \",\n        \" max=bogus_ti \", \" sort='bogus_ti desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_tl,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_tf max=test_tf}\",\n        \"{!collapse field=\"+group+\" min=test_tf sort='test_tf asc'}\",\n        \"{!collapse field=\"+group+\" max=test_tf sort='test_tf asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_ti asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_ti desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_tf nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"fq\",\"{!tag=test_ti}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_ti}test_ti\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_ti']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_ti)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                       \"//result/doc[2]/float[@name='id'][.='6.0']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='4.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/float[@name='id'][.='1.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='3.0']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\",\n              \"//result/doc[3]/float[@name='id'][.='4.0']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='3.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='2.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='5.0']\",\n            \"//result/doc[2]/float[@name='id'][.='4.0']\",\n            \"//result/doc[3]/float[@name='id'][.='1.0']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='3.0']\",\n            \"//result/doc[3]/float[@name='id'][.='2.0']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='1.0']\",\n              \"//result/doc[2]/float[@name='id'][.='5.0']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/float[@name='id'][.='5.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='2.0']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/float[@name='id'][.='1.0']\",\n          \"//result/doc[2]/float[@name='id'][.='5.0']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                           \"//result/doc[2]/float[@name='id'][.='6.0']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='2.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/float[@name='id'][.='5.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='1.0']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/float[@name='id'][.='4.0']\",\n              \"//result/doc[2]/float[@name='id'][.='1.0']\",\n              \"//result/doc[3]/float[@name='id'][.='5.0']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='3.0']\",\n        \"//result/doc[4]/float[@name='id'][.='1.0']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/float[@name='id'][.='5.0']\",\n        \"//result/doc[2]/float[@name='id'][.='4.0']\",\n        \"//result/doc[3]/float[@name='id'][.='1.0']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/float[@name='id'][.='3.0']\",\n                         \"//result/doc[2]/float[@name='id'][.='6.0']\",\n                         \"//result/doc[3]/float[@name='id'][.='7.0']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equally valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equivilently valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","bugFix":["0325de99180d346d61d36938843a5c8451fe26ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6457ab2a0e58432fae0f4816844575d9fdf4fc00","date":1576126280,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equally valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-13970\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      h.query(req(params(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+group+hint+\"}\", \"group\", \"true\", \"group.field\", \"id\")));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertThat(ex.getMessage(), containsString(\"Can not use collapse with Grouping enabled\"));\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equally valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testCollapseQueries(String,String,boolean).mjava","sourceNew":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equally valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-13970\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      h.query(req(params(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+group+hint+\"}\", \"group\", \"true\", \"group.field\", \"id\")));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertThat(ex.getMessage(), containsString(\"Can not use collapse with Grouping enabled\"));\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n  }\n\n","sourceOld":"  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n\n    //Test collapse by score and following sort by score\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n                       \"//result/doc[1]/str[@name='id'][.='2']\",\n                       \"//result/doc[2]/str[@name='id'][.='6']\"\n        );\n\n\n    // SOLR-5544 test ordering with empty sort param\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand min=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"sort\",\"\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\"\n    );\n\n    // Test value source collapse criteria\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=field(test_i)\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    // Test value source collapse criteria with cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n    \n    // Test value source collapse criteria with cscore function but no top level score sort\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=cscore()\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fl\", \"id\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n\n    // Test value source collapse criteria with compound cscore function\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=sum(cscore(),field(test_i))\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='4']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\"\n    );\n\n    //Test collapse by score with elevation\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n                         \"//result/doc[1]/str[@name='id'][.='1']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\",\n                         \"//result/doc[3]/str[@name='id'][.='3']\",\n                         \"//result/doc[4]/str[@name='id'][.='6']\");\n\n    //Test SOLR-5773 with score collapse criteria\n    // try both default & sort localparams as alternate ways to ask for max score\n    for (String maxscore : new String[] {\"  \", \" sort='score desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\"+group + maxscore + \" nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with max field collapse criteria\n    // try both max & sort localparams as alternate ways to ask for max group head\n    for (String max : new String[] {\" max=test_i \", \" sort='test_i desc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + max + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='3']\");\n    }\n    \n    //Test SOLR-5773 with min field collapse criteria\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"YYYY\");\n      params.add(\"fq\", \"{!collapse field=\" + group + min + \"nullPolicy=collapse\"+hint+\"}\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(test_i)\");\n      params.add(\"qf\", \"term_s\");\n      params.add(\"qt\", \"/elevate\");\n      params.add(\"elevateIds\", \"1,5\");\n      assertQ(req(params), \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\",\n              \"//result/doc[3]/str[@name='id'][.='4']\");\n    }\n    \n    //Test SOLR-5773 elevating documents with null group\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\"\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"elevateIds\", \"3,4\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='3']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='2']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\");\n\n\n    // Non trivial sort local param for picking group head\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i asc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='5']\",\n            \"//result/doc[2]/str[@name='id'][.='4']\",\n            \"//result/doc[3]/str[@name='id'][.='1']\"\n    );\n    // \n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='term_s asc, test_i desc' \"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params),\n            \"*[count(//doc)=3]\",\n            \"//result/doc[1]/str[@name='id'][.='6']\",\n            \"//result/doc[2]/str[@name='id'][.='3']\",\n            \"//result/doc[3]/str[@name='id'][.='2']\"\n    );\n    \n\n\n    // Test collapse by min int field and top level sort\n    // try both min & sort localparams as alternate ways to ask for min group head\n    for (String min : new String[] {\" min=test_i \", \" sort='test_i asc' \"}) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"id_i asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='1']\",\n              \"//result/doc[2]/str[@name='id'][.='5']\");\n      \n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"test_l asc,id_i desc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + min + hint+\"}\");\n      params.add(\"sort\", \"score desc,id_i asc\");\n      params.add(\"defType\", \"edismax\");\n      params.add(\"bf\", \"field(id_i)\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              \"//result/doc[1]/str[@name='id'][.='5']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\");\n    }\n\n\n    //Test collapse by max int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_i\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='6']\",\n                         \"//result/doc[2]/str[@name='id'][.='2']\"\n        );\n\n    try {\n      //Test collapse by min long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='5']\");\n\n\n      //Test collapse by max long field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_l\"+hint+\"}\");\n      params.add(\"sort\", \"test_i desc\");\n      assertQ(req(params), \"*[count(//doc)=2]\",\n                           \"//result/doc[1]/str[@name='id'][.='2']\",\n                           \"//result/doc[2]/str[@name='id'][.='6']\");\n    } catch (Exception e) {\n      if(!numeric) {\n        throw e;\n      }\n    }\n\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" min=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i desc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='2']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\");\n\n    //Test collapse by min float field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"sort\", \"test_i asc\");\n    assertQ(req(params), \"*[count(//doc)=2]\",\n                         \"//result/doc[1]/str[@name='id'][.='5']\",\n                         \"//result/doc[2]/str[@name='id'][.='1']\");\n\n    //Test collapse by min float field sort by score\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f\"+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(id_i)\");\n    params.add(\"fl\", \"score, id\");\n    params.add(\"facet\",\"true\");\n    params.add(\"fq\", \"{!tag=test}term_s:YYYY\");\n    params.add(\"facet.field\", \"{!ex=test}term_s\");\n\n    assertQ(req(params), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='1']\");\n    \n    // Test collapse using selector field in no docs\n    // tie selector in all of these cases\n    for (String selector : new String[] {\n        \" min=bogus_i \", \" sort='bogus_i asc' \",\n        \" max=bogus_i \", \" sort='bogus_i desc' \",\n        \" min=bogus_tf \", \" sort='bogus_tf asc' \",\n        \" max=bogus_tf \", \" sort='bogus_tf desc' \",\n        \" sort='bogus_td asc' \", \" sort='bogus_td desc' \",\n        \" sort='bogus_s asc' \", \" sort='bogus_s desc' \", \n      }) {\n      params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      params.add(\"fq\", \"{!collapse field=\"+group + selector + hint+\"}\");\n      params.add(\"sort\", group + \" asc\");\n      assertQ(req(params),\n              \"*[count(//doc)=2]\",\n              // since selector is bogus, group head is undefined\n              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)\n              // key assertion is that there is one doc from each group & groups are in order\n              \"//result/doc[1]/*[@name='\"+group+\"'][starts-with(.,'1')]\",\n              \"//result/doc[2]/*[@name='\"+group+\"'][starts-with(.,'2')]\");\n    }\n    \n    // attempting to use cscore() in sort local param should fail\n    assertQEx(\"expected error trying to sort on a function that includes cscore()\",\n              req(params(\"q\", \"{!func}sub(sub(test_l,1000),id_i)\",\n                         \"fq\", \"{!collapse field=\"+group+\" sort='abs(cscore()) asc, id_i asc'}\",\n                         \"sort\", \"score asc\")),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // multiple params for picking groupHead should all fail\n    for (String bad : new String[] {\n        \"{!collapse field=\"+group+\" min=test_f max=test_f}\",\n        \"{!collapse field=\"+group+\" min=test_f sort='test_f asc'}\",\n        \"{!collapse field=\"+group+\" max=test_f sort='test_f asc'}\" }) {\n      assertQEx(\"Expected error: \" + bad, req(params(\"q\", \"*:*\", \"fq\", bad)),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n\n    // multiple params for picking groupHead should work as long as only one is non-null\n    // sort used\n    for (SolrParams collapse : new SolrParams[] {\n        // these should all be equally valid\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse max='' sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\"),\n        params(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=collapse min=$x sort='test_i asc'\"+hint+\"}\",\n               \"x\",\"\"),\n      }) {\n      \n      assertQ(req(collapse, \"q\", \"*:*\", \"sort\", \"test_i desc\"),\n              \"*[count(//doc)=3]\",\n              \"//result/doc[1]/str[@name='id'][.='4']\",\n              \"//result/doc[2]/str[@name='id'][.='1']\",\n              \"//result/doc[3]/str[@name='id'][.='5']\");\n    }\n    \n\n    //Test nullPolicy expand\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=expand\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=4]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[4]/str[@name='id'][.='1']\");\n\n    //Test nullPolicy collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" max=test_f nullPolicy=collapse\"+hint+\"}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[2]/str[@name='id'][.='4']\",\n        \"//result/doc[3]/str[@name='id'][.='1']\");\n\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"fq\",\"{!tag=test_i}id:5\");\n    params.add(\"facet\",\"true\");\n    params.add(\"facet.field\",\"{!ex=test_i}test_i\");\n    params.add(\"facet.mincount\", \"1\");\n    assertQ(req(params), \"*[count(//doc)=1]\", \"*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]\");\n\n    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\"}\");\n    params.add(\"group\", \"true\");\n    params.add(\"group.field\", \"id\");\n    assertQ(req(params), \"*[count(//doc)=2]\");\n\n\n    // delete the elevated docs, confirm collapsing still works\n    assertU(delI(\"1\"));\n    assertU(delI(\"2\"));\n    assertU(commit());\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"YYYY\");\n    params.add(\"fq\", \"{!collapse field=\"+group+hint+\" nullPolicy=collapse}\");\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    params.add(\"qf\", \"term_s\");\n    params.add(\"qt\", \"/elevate\");\n    assertQ(req(params), \"*[count(//doc)=3]\",\n                         \"//result/doc[1]/str[@name='id'][.='3']\",\n                         \"//result/doc[2]/str[@name='id'][.='6']\",\n                         \"//result/doc[3]/str[@name='id'][.='7']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["28288370235ed02234a64753cdbf0c6ec096304a"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"0c601c0f72166d843af2e558c0d60962810f8bdb":["a0201bd24de8c2e43ffd97115399c48fbcc83836"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754","a71f63026529f3c1f03cfdd664910873ab2369ae"],"a0201bd24de8c2e43ffd97115399c48fbcc83836":["0325de99180d346d61d36938843a5c8451fe26ae"],"df724d84dab24a0cc54bec95a8680867adc7f171":["9f4251f14d2db68330fc1e6f0495c053a905d560","6457ab2a0e58432fae0f4816844575d9fdf4fc00"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6457ab2a0e58432fae0f4816844575d9fdf4fc00":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["0c601c0f72166d843af2e558c0d60962810f8bdb"],"0325de99180d346d61d36938843a5c8451fe26ae":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fa09e86cb64347ee96ff0a59f09b539abd620e57","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6457ab2a0e58432fae0f4816844575d9fdf4fc00"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["0c601c0f72166d843af2e558c0d60962810f8bdb"]},"commit2Childs":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["df724d84dab24a0cc54bec95a8680867adc7f171","6457ab2a0e58432fae0f4816844575d9fdf4fc00"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0c601c0f72166d843af2e558c0d60962810f8bdb":["fa09e86cb64347ee96ff0a59f09b539abd620e57","5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"28288370235ed02234a64753cdbf0c6ec096304a":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"a0201bd24de8c2e43ffd97115399c48fbcc83836":["0c601c0f72166d843af2e558c0d60962810f8bdb"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["0325de99180d346d61d36938843a5c8451fe26ae"],"6457ab2a0e58432fae0f4816844575d9fdf4fc00":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0325de99180d346d61d36938843a5c8451fe26ae":["a0201bd24de8c2e43ffd97115399c48fbcc83836"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}