{"path":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToFloatMapTest#testEquals().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToFloatMapTest#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/ObjectToFloatMapTest#testEquals().mjava","sourceNew":"  @Test\n  public void testEquals() {\n    ObjectToFloatMap<Integer> map1 = new ObjectToFloatMap<Integer>(100);\n    ObjectToFloatMap<Integer> map2 = new ObjectToFloatMap<Integer>(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testEquals() {\n    ObjectToFloatMap<Integer> map1 = new ObjectToFloatMap<Integer>(100);\n    ObjectToFloatMap<Integer> map2 = new ObjectToFloatMap<Integer>(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToFloatMapTest#testEquals().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEquals() {\n    ObjectToFloatMap<Integer> map1 = new ObjectToFloatMap<Integer>(100);\n    ObjectToFloatMap<Integer> map2 = new ObjectToFloatMap<Integer>(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToFloatMapTest#testEquals().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEquals() {\n    ObjectToFloatMap<Integer> map1 = new ObjectToFloatMap<Integer>(100);\n    ObjectToFloatMap<Integer> map2 = new ObjectToFloatMap<Integer>(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}