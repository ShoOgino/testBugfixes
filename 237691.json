{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    IndexReader[] subs = r2.getSequentialSubReaders();\n    for(int i=0;i<subs.length;i++) {\n      assertEquals(36, ((AtomicReader) subs[i]).getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    List<? extends AtomicReader> subs = r2.getSequentialSubReaders();\n    for(AtomicReader s : subs) {\n      assertEquals(36, s.getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca5f6409bcf8211cae1732125479d212adb0acac","date":1345559953,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(36, r1.getUniqueTermCount());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(36, s.reader().getUniqueTermCount());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(LeafReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    AtomicReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(AtomicReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testUniqueTermCount().mjava","sourceNew":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlyLeafReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(LeafReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1586: getUniqueTermCount\n  public void testUniqueTermCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.commit();\n  \n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader r1 = getOnlySegmentReader(r);\n    assertEquals(26, r1.terms(\"field\").size());\n    assertEquals(10, r1.terms(\"number\").size());\n    writer.addDocument(doc);\n    writer.commit();\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n  \n    for(LeafReaderContext s : r2.leaves()) {\n      assertEquals(26, s.reader().terms(\"field\").size());\n      assertEquals(10, s.reader().terms(\"number\").size());\n    }\n    r2.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ca5f6409bcf8211cae1732125479d212adb0acac"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ca5f6409bcf8211cae1732125479d212adb0acac":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ca5f6409bcf8211cae1732125479d212adb0acac"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["001b25b42373b22a52f399dbf072f1224632e8e6"],"ca5f6409bcf8211cae1732125479d212adb0acac":["001b25b42373b22a52f399dbf072f1224632e8e6","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ca5f6409bcf8211cae1732125479d212adb0acac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","b05c56a41b733e02a189c48895922b5bd8c7f3d1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}