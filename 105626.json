{"path":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"/dev/null","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(url + PATH + \"?wt=json&omitHeader=true\"));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944","946009ad0fba506337041a368b0a74d2edd59e2c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e76c7a05748b87468b5ccbcf325482013e002a3d","date":1448547807,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(url + PATH + \"?wt=json&omitHeader=true\"));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext(this));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext(this));\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient().execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1214bb624eb41181e5c8e260e0050c7e973ba0f4","date":1487943042,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url, uri = null;\n    if (cores.isZooKeeperAware()) {\n      url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    } else {\n      url = getBaseUrlForNodeNameLocal(nodename);\n    }\n    try {\n      uri += PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + uri, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","date":1487979822,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url, uri = null;\n    if (cores.isZooKeeperAware()) {\n      url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    } else {\n      url = getBaseUrlForNodeNameLocal(nodename);\n    }\n    try {\n      uri += PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + uri, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["946009ad0fba506337041a368b0a74d2edd59e2c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7edc4312b62a65d1df10e5c3e98494c22a1e49d","date":1493876581,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      byte[] bytes = EntityUtils.toByteArray(rsp.getEntity());\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    }\n\n  }\n\n","bugFix":["b3a34dae868734612eb6329aa0ef754f30bd2036","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"946009ad0fba506337041a368b0a74d2edd59e2c","date":1528114477,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","bugFix":["b3a34dae868734612eb6329aa0ef754f30bd2036","b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from {} {}\", url, PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : {}\", url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from \" + url + PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : \" + url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#getRemotePublicKey(String).mjava","sourceNew":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from {} {}\", url, PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : {}\", url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","sourceOld":"  PublicKey getRemotePublicKey(String nodename) {\n    if (!cores.getZkController().getZkStateReader().getClusterState().getLiveNodes().contains(nodename)) return null;\n    String url = cores.getZkController().getZkStateReader().getBaseUrlForNodeName(nodename);\n    HttpEntity entity = null;\n    try {\n      String uri = url + PublicKeyHandler.PATH + \"?wt=json&omitHeader=true\";\n      log.debug(\"Fetching fresh public key from : {}\",uri);\n      HttpResponse rsp = cores.getUpdateShardHandler().getDefaultHttpClient()\n          .execute(new HttpGet(uri), HttpClientUtil.createNewHttpClientRequestContext());\n      entity  = rsp.getEntity();\n      byte[] bytes = EntityUtils.toByteArray(entity);\n      Map m = (Map) Utils.fromJSON(bytes);\n      String key = (String) m.get(\"key\");\n      if (key == null) {\n        log.error(\"No key available from {} {}\", url, PublicKeyHandler.PATH);\n        return null;\n      } else {\n        log.info(\"New Key obtained from  node: {} / {}\", nodename, key);\n      }\n      PublicKey pubKey = CryptoKeys.deserializeX509PublicKey(key);\n      keyCache.put(nodename, pubKey);\n      return pubKey;\n    } catch (Exception e) {\n      log.error(\"Exception trying to get public key from : {}\", url, e);\n      return null;\n    } finally {\n      Utils.consumeFully(entity);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["859081acf00749f5dd462772c571d611d4a4d2db"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"946009ad0fba506337041a368b0a74d2edd59e2c":["3646ead588297558973dbd1162e69791e822b944"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","a7edc4312b62a65d1df10e5c3e98494c22a1e49d"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["946009ad0fba506337041a368b0a74d2edd59e2c"],"859081acf00749f5dd462772c571d611d4a4d2db":["e76c7a05748b87468b5ccbcf325482013e002a3d"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"3646ead588297558973dbd1162e69791e822b944":["a7edc4312b62a65d1df10e5c3e98494c22a1e49d"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["3646ead588297558973dbd1162e69791e822b944","946009ad0fba506337041a368b0a74d2edd59e2c"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a7edc4312b62a65d1df10e5c3e98494c22a1e49d":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"f592209545c71895260367152601e9200399776d":["3646ead588297558973dbd1162e69791e822b944","946009ad0fba506337041a368b0a74d2edd59e2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["e9017cf144952056066919f1ebc7897ff9bd71b1","a7edc4312b62a65d1df10e5c3e98494c22a1e49d"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["e76c7a05748b87468b5ccbcf325482013e002a3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"946009ad0fba506337041a368b0a74d2edd59e2c":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"859081acf00749f5dd462772c571d611d4a4d2db":["070b525fb213c5643ba35e1b60f1a1d4f7b23312","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"e76c7a05748b87468b5ccbcf325482013e002a3d":["859081acf00749f5dd462772c571d611d4a4d2db"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"3646ead588297558973dbd1162e69791e822b944":["946009ad0fba506337041a368b0a74d2edd59e2c","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7edc4312b62a65d1df10e5c3e98494c22a1e49d":["e9017cf144952056066919f1ebc7897ff9bd71b1","3646ead588297558973dbd1162e69791e822b944"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}