{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","pathOld":"/dev/null","sourceNew":"  private void validateHeatmapResult(Rectangle inputRange, int facetLevel, HeatmapFacetCounter.Heatmap heatmap)\n      throws IOException {\n    final Rectangle heatRect = heatmap.region;\n    assertTrue(heatRect.relate(inputRange) == SpatialRelation.CONTAINS || heatRect.equals(inputRange));\n    final double cellWidth = heatRect.getWidth() / heatmap.columns;\n    final double cellHeight = heatRect.getHeight() / heatmap.rows;\n    for (int c = 0; c < heatmap.columns; c++) {\n      for (int r = 0; r < heatmap.rows; r++) {\n        final int facetCount = heatmap.getCount(c, r);\n        double x = DistanceUtils.normLonDEG(heatRect.getMinX() + c * cellWidth + cellWidth / 2);\n        double y = DistanceUtils.normLatDEG(heatRect.getMinY() + r * cellHeight + cellHeight / 2);\n        Point pt =  ctx.makePoint(x, y);\n        assertEquals(countMatchingDocsAtLevel(pt, facetLevel), facetCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","sourceNew":"  private void validateHeatmapResult(Rectangle inputRange, int facetLevel, HeatmapFacetCounter.Heatmap heatmap)\n      throws IOException {\n    final Rectangle heatRect = heatmap.region;\n    assertTrue(heatRect.relate(inputRange) == SpatialRelation.CONTAINS || heatRect.equals(inputRange));\n    final double cellWidth = heatRect.getWidth() / heatmap.columns;\n    final double cellHeight = heatRect.getHeight() / heatmap.rows;\n    for (int c = 0; c < heatmap.columns; c++) {\n      for (int r = 0; r < heatmap.rows; r++) {\n        final int facetCount = heatmap.getCount(c, r);\n        double x = DistanceUtils.normLonDEG(heatRect.getMinX() + c * cellWidth + cellWidth / 2);\n        double y = DistanceUtils.normLatDEG(heatRect.getMinY() + r * cellHeight + cellHeight / 2);\n        Point pt =  ctx.makePoint(x, y);\n        assertEquals(countMatchingDocsAtLevel(pt, facetLevel), facetCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void validateHeatmapResult(Rectangle inputRange, int facetLevel, HeatmapFacetCounter.Heatmap heatmap)\n      throws IOException {\n    final Rectangle heatRect = heatmap.region;\n    assertTrue(heatRect.relate(inputRange) == SpatialRelation.CONTAINS || heatRect.equals(inputRange));\n    final double cellWidth = heatRect.getWidth() / heatmap.columns;\n    final double cellHeight = heatRect.getHeight() / heatmap.rows;\n    for (int c = 0; c < heatmap.columns; c++) {\n      for (int r = 0; r < heatmap.rows; r++) {\n        final int facetCount = heatmap.getCount(c, r);\n        double x = DistanceUtils.normLonDEG(heatRect.getMinX() + c * cellWidth + cellWidth / 2);\n        double y = DistanceUtils.normLatDEG(heatRect.getMinY() + r * cellHeight + cellHeight / 2);\n        Point pt =  ctx.makePoint(x, y);\n        assertEquals(countMatchingDocsAtLevel(pt, facetLevel), facetCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResult(Rectangle,int,HeatmapFacetCounter.Heatmap).mjava","sourceNew":"  private void validateHeatmapResult(Rectangle inputRange, int facetLevel, HeatmapFacetCounter.Heatmap heatmap)\n      throws IOException {\n    final Rectangle heatRect = heatmap.region;\n    assertTrue(heatRect.relate(inputRange) == SpatialRelation.CONTAINS || heatRect.equals(inputRange));\n    final double cellWidth = heatRect.getWidth() / heatmap.columns;\n    final double cellHeight = heatRect.getHeight() / heatmap.rows;\n    for (int c = 0; c < heatmap.columns; c++) {\n      for (int r = 0; r < heatmap.rows; r++) {\n        final int facetCount = heatmap.getCount(c, r);\n        double x = DistanceUtils.normLonDEG(heatRect.getMinX() + c * cellWidth + cellWidth / 2);\n        double y = DistanceUtils.normLatDEG(heatRect.getMinY() + r * cellHeight + cellHeight / 2);\n        Point pt =  ctx.makePoint(x, y);\n        assertEquals(countMatchingDocsAtLevel(pt, facetLevel), facetCount);\n      }\n    }\n  }\n\n","sourceOld":"  private void validateHeatmapResult(Rectangle inputRange, int facetLevel, HeatmapFacetCounter.Heatmap heatmap)\n      throws IOException {\n    final Rectangle heatRect = heatmap.region;\n    assertTrue(heatRect.relate(inputRange) == SpatialRelation.CONTAINS || heatRect.equals(inputRange));\n    final double cellWidth = heatRect.getWidth() / heatmap.columns;\n    final double cellHeight = heatRect.getHeight() / heatmap.rows;\n    for (int c = 0; c < heatmap.columns; c++) {\n      for (int r = 0; r < heatmap.rows; r++) {\n        final int facetCount = heatmap.getCount(c, r);\n        double x = DistanceUtils.normLonDEG(heatRect.getMinX() + c * cellWidth + cellWidth / 2);\n        double y = DistanceUtils.normLatDEG(heatRect.getMinY() + r * cellHeight + cellHeight / 2);\n        Point pt =  ctx.makePoint(x, y);\n        assertEquals(countMatchingDocsAtLevel(pt, facetLevel), facetCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d19946da5b8a6505034a72adcb5bae87dd043ddd","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}