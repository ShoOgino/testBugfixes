{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":null,"sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":null,"sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#remap(MergeDocIDRemapper,SegmentInfos,int[][],int[],MergePolicy.OneMerge,int).mjava","sourceNew":null,"sourceOld":"  // Remaps all buffered deletes based on a completed\n  // merge\n  synchronized void remap(MergeDocIDRemapper mapper,\n                          SegmentInfos infos,\n                          int[][] docMaps,\n                          int[] delCounts,\n                          MergePolicy.OneMerge merge,\n                          int mergeDocCount) {\n\n    final Map<Term,Num> newDeleteTerms;\n\n    // Remap delete-by-term\n    if (terms.size() > 0) {\n      if (doTermSort) {\n        newDeleteTerms = new TreeMap<Term,Num>();\n      } else {\n        newDeleteTerms = new HashMap<Term,Num>();\n      }\n      for(Entry<Term,Num> entry : terms.entrySet()) {\n        Num num = entry.getValue();\n        newDeleteTerms.put(entry.getKey(),\n                           new Num(mapper.remap(num.getNum())));\n      }\n    } else \n      newDeleteTerms = null;\n    \n\n    // Remap delete-by-docID\n    final List<Integer> newDeleteDocIDs;\n\n    if (docIDs.size() > 0) {\n      newDeleteDocIDs = new ArrayList<Integer>(docIDs.size());\n      for (Integer num : docIDs) {\n        newDeleteDocIDs.add(Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else \n      newDeleteDocIDs = null;\n    \n\n    // Remap delete-by-query\n    final HashMap<Query,Integer> newDeleteQueries;\n    \n    if (queries.size() > 0) {\n      newDeleteQueries = new HashMap<Query, Integer>(queries.size());\n      for(Entry<Query,Integer> entry: queries.entrySet()) {\n        Integer num = entry.getValue();\n        newDeleteQueries.put(entry.getKey(),\n                             Integer.valueOf(mapper.remap(num.intValue())));\n      }\n    } else\n      newDeleteQueries = null;\n\n    if (newDeleteTerms != null)\n      terms = newDeleteTerms;\n    if (newDeleteDocIDs != null)\n      docIDs = newDeleteDocIDs;\n    if (newDeleteQueries != null)\n      queries = newDeleteQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}