{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","commits":[{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newSlowRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5a412a7808b2815566cb17117ebe6638112b9a31","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["5a412a7808b2815566cb17117ebe6638112b9a31"],"5a412a7808b2815566cb17117ebe6638112b9a31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a412a7808b2815566cb17117ebe6638112b9a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9970073fd3c04efd7374f975e45a61084b169ce9"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"5a412a7808b2815566cb17117ebe6638112b9a31":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}