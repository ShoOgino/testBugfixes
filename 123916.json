{"path":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"/dev/null","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, toMultiVS(x_td, y_td), toMultiVS(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, toMultiVS(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 0.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f318977384b8fd3c45640b867df84cab29aea8cc","date":1261917960,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, toMultiVS(x_td, y_td), toMultiVS(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, toMultiVS(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, toMultiVS(x_td, y_td), toMultiVS(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, toMultiVS(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 0.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5703611aa66d862b378d511ccaa2e6d68bab5326","date":1262011278,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, toMultiVS(x_td, y_td), toMultiVS(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, toMultiVS(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testVector().mjava","sourceNew":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","sourceOld":"  public void testVector() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", \"1\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"3\", \"x_td\", \"1\", \"y_td\", \"1\", \"z_td\", \"1\", \"w_td\", \"1\"));\n    assertU(adoc(\"id\", \"4\", \"x_td\", \"1\", \"y_td\", \"0\", \"z_td\", \"0\", \"w_td\", \"0\"));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"2.3\", \"y_td\", \"5.5\", \"z_td\", \"7.9\", \"w_td\", \"-2.4\"));\n    assertU(adoc(\"id\", \"6\", \"point\", \"1.0,0.0\"));\n    assertU(adoc(\"id\", \"7\", \"point\", \"5.5,10.9\"));\n    assertU(commit());\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 2.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5) + \"'\");\n\n    //three dimensions, notice how we pass in 6 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 3.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9) + \"'\");\n\n    //four dimensions, notice how we pass in 8 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + 4.0f + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 * 2.3 + 5.5 * 5.5 + 7.9 * 7.9 + 2.4 * 2.4) + \"'\");\n    //Pass in imbalanced list, throw exception\n    try {\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}sqedist(x_td, y_td, z_td, w_td, 0, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n      assertTrue(\"should throw an exception\", false);\n    } catch (Exception e) {\n      Throwable cause = e.getCause();\n      assertNotNull(cause);\n      assertTrue(cause instanceof SolrException);\n    }\n    //do one test of Euclidean\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) Math.sqrt(2.0) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(2, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) Math.sqrt((2.3 * 2.3 + 5.5 * 5.5)) + \"'\");\n\n    //do one test of Manhattan\n    //two dimensions, notice how we only pass in 4 value sources\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) 2.0 + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, x_td, y_td, 0, 0)\", \"fq\", \"id:5\"), \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n\n    //Do point tests:\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, vector(x_td, y_td), vector(0, 0))\", \"fq\", \"id:5\"),\n            \"//float[@name='score']='\" + (float) (2.3 + 5.5) + \"'\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}dist(1, point, vector(0, 0))\", \"fq\", \"id:6\"),\n            \"//float[@name='score']='\" + 1.0f + \"'\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"5703611aa66d862b378d511ccaa2e6d68bab5326":["f318977384b8fd3c45640b867df84cab29aea8cc"],"f318977384b8fd3c45640b867df84cab29aea8cc":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5703611aa66d862b378d511ccaa2e6d68bab5326"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["f318977384b8fd3c45640b867df84cab29aea8cc"],"5703611aa66d862b378d511ccaa2e6d68bab5326":["ad94625fb8d088209f46650c8097196fec67f00c"],"f318977384b8fd3c45640b867df84cab29aea8cc":["5703611aa66d862b378d511ccaa2e6d68bab5326"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}