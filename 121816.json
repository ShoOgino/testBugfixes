{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#handleLegacyCollectionNames().mjava","commits":[{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#handleLegacyCollectionNames().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Need to ensure that the existing TRA's gracefully handle, old, new and mixtures thereof. TRA's with\n   * an autoDeleteAge setting will gracefully convert to the new format over time.\n   */\n  @Test\n  public void handleLegacyCollectionNames() throws Exception {\n    manuallyConstructLegacyTRA();\n\n    // OK we now have an alias with legacy names and 2 documents. Let's try to query it to ensure query time back compat\n\n    QueryResponse resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n\n    assertEquals(2,resp.getResults().getNumFound());\n\n    // verify that we can still add documents to it.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"3\",\"timestamp_dt\", \"2017-10-23T00:00:01Z\")\n    ));\n    solrClient.commit(alias);\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(3,resp.getResults().getNumFound());\n\n\n    // verify that it can create new collections\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"4\",\"timestamp_dt\", \"2017-10-24T23:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n    waitColAndAlias(alias, TRA, \"2017-10-25\",1);\n\n    // verify that mixed old/new collections works for update/query\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(4,resp.getResults().getNumFound());\n\n    // verify that documents go to the right collections\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"5\",\"timestamp_dt\", \"2017-10-25T12:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n\n    resp = solrClient.query(\"myalias_2017-10-23\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"1\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"3\");\n\n    resp = solrClient.query(\"myalias_2017-10-24\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"2\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"4\");\n\n    resp = solrClient.query(\"myalias\" + TRA + \"2017-10-25\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(1,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"5\");\n\n    // verify that auto-delete will age out old collections\n    checkCollectionCountIs(3);\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"6\",\"timestamp_dt\", \"2017-10-26T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-26\",1);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias_2017-10-23\",\n            \"myalias_2017-10-24\",\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\"));\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"7\",\"timestamp_dt\", \"2017-10-27T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-27\",1);\n    waitCoreCount(\"myalias_2017-10-23\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias_2017-10-24\",\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\"));\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"8\",\"timestamp_dt\", \"2017-10-28T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-28\",1);\n    waitCoreCount(\"myalias_2017-10-24\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\",\n            \"myalias\" + TRA + \"2017-10-28\"));\n\n    // verify that auto-delete works on new collections.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"9\",\"timestamp_dt\", \"2017-10-29T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-29\",1);\n    waitCoreCount(\"myalias\" + TRA + \"2017-10-25\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\",\n            \"myalias\" + TRA + \"2017-10-28\",\n            \"myalias\" + TRA + \"2017-10-29\"));\n\n    solrClient.commit(alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(4,resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#handleLegacyCollectionNames().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#handleLegacyCollectionNames().mjava","sourceNew":"  /**\n   * Need to ensure that the existing TRA's gracefully handle, old, new and mixtures thereof. TRA's with\n   * an autoDeleteAge setting will gracefully convert to the new format over time.\n   */\n  @Test\n  public void handleLegacyCollectionNames() throws Exception {\n    manuallyConstructLegacyTRA();\n\n    // OK we now have an alias with legacy names and 2 documents. Let's try to query it to ensure query time back compat\n\n    QueryResponse resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n\n    assertEquals(2,resp.getResults().getNumFound());\n\n    // verify that we can still add documents to it.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"3\",\"timestamp_dt\", \"2017-10-23T00:00:01Z\")\n    ));\n    solrClient.commit(alias);\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(3,resp.getResults().getNumFound());\n\n\n    // verify that it can create new collections\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"4\",\"timestamp_dt\", \"2017-10-24T23:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n    waitColAndAlias(alias, TRA, \"2017-10-25\",1);\n\n    // verify that mixed old/new collections works for update/query\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(4,resp.getResults().getNumFound());\n\n    // verify that documents go to the right collections\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"5\",\"timestamp_dt\", \"2017-10-25T12:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n\n    resp = solrClient.query(\"myalias_2017-10-23\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"1\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"3\");\n\n    resp = solrClient.query(\"myalias_2017-10-24\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"2\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"4\");\n\n    resp = solrClient.query(\"myalias\" + TRA + \"2017-10-25\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(1,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"5\");\n\n    // verify that auto-delete will age out old collections\n    checkCollectionCountIs(3);\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"6\",\"timestamp_dt\", \"2017-10-26T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-26\",1);\n    checkCollectionCountIs(3)\n        .containsAll(Arrays.asList(\n            \"myalias_2017-10-24\",\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\"));\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"7\",\"timestamp_dt\", \"2017-10-27T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-27\",1);\n    waitCoreCount(\"myalias_2017-10-23\",0);\n    checkCollectionCountIs(3)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\"));\n\n    // verify that auto-delete works on new collections.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"8\",\"timestamp_dt\", \"2017-10-28T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-28\",1);\n    waitCoreCount(\"myalias_2017-10-24\",0);\n    checkCollectionCountIs(3)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\",\n            \"myalias\" + TRA + \"2017-10-28\"));\n\n\n    solrClient.commit(alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(3,resp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  /**\n   * Need to ensure that the existing TRA's gracefully handle, old, new and mixtures thereof. TRA's with\n   * an autoDeleteAge setting will gracefully convert to the new format over time.\n   */\n  @Test\n  public void handleLegacyCollectionNames() throws Exception {\n    manuallyConstructLegacyTRA();\n\n    // OK we now have an alias with legacy names and 2 documents. Let's try to query it to ensure query time back compat\n\n    QueryResponse resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n\n    assertEquals(2,resp.getResults().getNumFound());\n\n    // verify that we can still add documents to it.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"3\",\"timestamp_dt\", \"2017-10-23T00:00:01Z\")\n    ));\n    solrClient.commit(alias);\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(3,resp.getResults().getNumFound());\n\n\n    // verify that it can create new collections\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"4\",\"timestamp_dt\", \"2017-10-24T23:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n    waitColAndAlias(alias, TRA, \"2017-10-25\",1);\n\n    // verify that mixed old/new collections works for update/query\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(4,resp.getResults().getNumFound());\n\n    // verify that documents go to the right collections\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"5\",\"timestamp_dt\", \"2017-10-25T12:00:01Z\") // preemptive\n    ));\n    solrClient.commit(alias);\n\n    resp = solrClient.query(\"myalias_2017-10-23\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"1\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"3\");\n\n    resp = solrClient.query(\"myalias_2017-10-24\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(2,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"2\");\n    assertEquals(resp.getResults().get(1).getFirstValue(\"id\"), \"4\");\n\n    resp = solrClient.query(\"myalias\" + TRA + \"2017-10-25\", params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\",\n        \"sort\", \"id asc\"\n    ));\n    assertEquals(1,resp.getResults().getNumFound());\n    assertEquals(resp.getResults().get(0).getFirstValue(\"id\"), \"5\");\n\n    // verify that auto-delete will age out old collections\n    checkCollectionCountIs(3);\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"6\",\"timestamp_dt\", \"2017-10-26T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-26\",1);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias_2017-10-23\",\n            \"myalias_2017-10-24\",\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\"));\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"7\",\"timestamp_dt\", \"2017-10-27T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-27\",1);\n    waitCoreCount(\"myalias_2017-10-23\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias_2017-10-24\",\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\"));\n\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"8\",\"timestamp_dt\", \"2017-10-28T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-28\",1);\n    waitCoreCount(\"myalias_2017-10-24\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-25\",\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\",\n            \"myalias\" + TRA + \"2017-10-28\"));\n\n    // verify that auto-delete works on new collections.\n    assertUpdateResponse(solrClient.add(alias,\n        sdoc(\"id\",\"9\",\"timestamp_dt\", \"2017-10-29T12:00:01Z\") // preemptive\n    ));\n    waitColAndAlias(alias, TRA,\"2017-10-29\",1);\n    waitCoreCount(\"myalias\" + TRA + \"2017-10-25\",0);\n    checkCollectionCountIs(4)\n        .containsAll(Arrays.asList(\n            \"myalias\" + TRA + \"2017-10-26\",\n            \"myalias\" + TRA + \"2017-10-27\",\n            \"myalias\" + TRA + \"2017-10-28\",\n            \"myalias\" + TRA + \"2017-10-29\"));\n\n    solrClient.commit(alias);\n\n    resp = solrClient.query(alias, params(\n        \"q\", \"*:*\",\n        \"rows\", \"10\"\n    ));\n    assertEquals(4,resp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}