{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","sourceNew":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","sourceOld":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","sourceNew":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      return reader.docFreq(field, bytes) == 0;\n    }\n\n","sourceOld":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      final Terms terms = reader.terms(field);\n      return terms == null || terms.docFreq(bytes) == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(AtomicIndexReader,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","sourceNew":"    private boolean termNotInReader(AtomicIndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      return reader.docFreq(field, bytes) == 0;\n    }\n\n","sourceOld":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      return reader.docFreq(field, bytes) == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#termNotInReader(IndexReader,String,BytesRef).mjava","sourceNew":"    private boolean termNotInReader(AtomicReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      return reader.docFreq(field, bytes) == 0;\n    }\n\n","sourceOld":"    private boolean termNotInReader(IndexReader reader, String field, BytesRef bytes) throws IOException {\n      // only called from assert\n      //System.out.println(\"TQ.termNotInReader reader=\" + reader + \" term=\" + field + \":\" + bytes.utf8ToString());\n      return reader.docFreq(field, bytes) == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e2297162a22c55456e200caef2cbcb00fe381120","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e2297162a22c55456e200caef2cbcb00fe381120"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e2297162a22c55456e200caef2cbcb00fe381120":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}