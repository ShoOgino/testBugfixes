{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","sourceOld":"  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","sourceOld":"  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","sourceOld":"  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileNameExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileNameExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    if (VERBOSE) {\n      System.out.println(\"nrtdir.openInput name=\" + name);\n    }\n    if (cache.fileNameExists(name)) {\n      if (VERBOSE) {\n        System.out.println(\"  from cache\");\n      }\n      return cache.createSlicer(name, context);\n    } else {\n      return delegate.createSlicer(name, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}