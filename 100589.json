{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(String).mjava","sourceNew":null,"sourceOld":"  /* Open pre-lockless index, add docs, do a delete &\n   * setNorm, and search */\n  public void changeIndexWithAdds(String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 45;\n    } else {\n      expected = 46;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.maxDoc());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    testHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this\n    // pre-lockless segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    testHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    testHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}