{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","commits":[{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //while (next() != null && term.compareTo(target) < 0) {} if (true) return term;\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (stack.size() > 1) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (stack.size() > 1 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b1c6dfde5c14fc13ffb78626073d55020636fe","date":1374636171,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (stack.size() > 1) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (stack.size() > 1 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //while (next() != null && term.compareTo(target) < 0) {} if (true) return term;\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (stack.size() > 1) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (stack.size() > 1 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b955911cf637357102623569adc4d9332fc4650","date":1374653945,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (stack.size() > 1) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (stack.size() > 1 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#doSeekCeil(BytesRef).mjava","sourceNew":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private BytesRef doSeekCeil(BytesRef target) throws IOException {\n        //if (DEBUG) System.out.println(\"Enum doSeekCeil()\");\n        Frame frame= null;\n        int label, upto = 0, limit = target.length;\n        while (upto < limit) {  // to target prefix, or ceil label (rewind prefix)\n          frame = newFrame();\n          label = target.bytes[upto] & 0xff;\n          frame = loadCeilFrame(label, topFrame(), frame);\n          if (frame == null || frame.fstArc.label != label) {\n            break;\n          }\n          assert isValid(frame);  // target must be fetched from automaton\n          pushFrame(frame);\n          upto++;\n        }\n        if (upto == limit) {  // got target\n          return term;\n        }\n        if (frame != null) {  // got larger term('s prefix)\n          pushFrame(frame);\n          return isAccept(frame) ? term : next();\n        }\n        while (level > 0) {  // got target's prefix, advance to larger term\n          frame = popFrame();\n          while (level > 0 && !canRewind(frame)) {\n            frame = popFrame();\n          }\n          if (loadNextFrame(topFrame(), frame) != null) {\n            pushFrame(frame);\n            return isAccept(frame) ? term : next();\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["3b955911cf637357102623569adc4d9332fc4650"],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["050ba1ba249733cac50c2612418b7179591d2df9"],"3b955911cf637357102623569adc4d9332fc4650":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","050ba1ba249733cac50c2612418b7179591d2df9"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["3b955911cf637357102623569adc4d9332fc4650"],"3b955911cf637357102623569adc4d9332fc4650":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"050ba1ba249733cac50c2612418b7179591d2df9":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}