{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","commits":[{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f90c0381cfc00b7f9b911c80ed6411a34ba843","date":1408554983,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n\n    double rectMinX = world.getMinX() + deltaLeft;\n    double rectMaxX = world.getMaxX() - deltaRight;\n    if (ctx.isGeo()) {\n      int shift = 0;\n      if ((deltaLeft != 0 || deltaRight != 0)) {\n        //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n        shift = nextIntInclusive(360);\n      }\n      rectMinX = DistanceUtils.normLonDEG(rectMinX + shift);\n      rectMaxX = DistanceUtils.normLonDEG(rectMaxX + shift);\n      if (rectMinX == 180 && rectMaxX == 180) {\n        // Work-around for https://github.com/spatial4j/spatial4j/issues/85\n        rectMinX = -180;\n        rectMaxX = -180;\n      }\n    }\n    return ctx.makeRectangle(\n        rectMinX,\n        rectMaxX,\n        world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5e612561242a48ae4523531000b80864f864cf","date":1442976403,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n\n    double rectMinX = world.getMinX() + deltaLeft;\n    double rectMaxX = world.getMaxX() - deltaRight;\n    if (ctx.isGeo()) {\n      int shift = 0;\n      if ((deltaLeft != 0 || deltaRight != 0)) {\n        //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n        shift = nextIntInclusive(360);\n      }\n      rectMinX = DistanceUtils.normLonDEG(rectMinX + shift);\n      rectMaxX = DistanceUtils.normLonDEG(rectMaxX + shift);\n      if (rectMinX == 180 && rectMaxX == 180) {\n        // Work-around for https://github.com/spatial4j/spatial4j/issues/85\n        rectMinX = -180;\n        rectMaxX = -180;\n      }\n    }\n    return ctx.makeRectangle(\n        rectMinX,\n        rectMaxX,\n        world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["bf5e612561242a48ae4523531000b80864f864cf","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["bf5e612561242a48ae4523531000b80864f864cf"],"bf5e612561242a48ae4523531000b80864f864cf":["13f90c0381cfc00b7f9b911c80ed6411a34ba843"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"13f90c0381cfc00b7f9b911c80ed6411a34ba843":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"bf5e612561242a48ae4523531000b80864f864cf":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["13f90c0381cfc00b7f9b911c80ed6411a34ba843"],"13f90c0381cfc00b7f9b911c80ed6411a34ba843":["bf5e612561242a48ae4523531000b80864f864cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}