{"path":"lucene/backwards/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}