{"path":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      CacheStats stats = cache.stats();\n      long insertCount = inserts.sum();\n\n      map.put(LOOKUPS_PARAM, stats.requestCount());\n      map.put(HITS_PARAM, stats.hitCount());\n      map.put(HIT_RATIO_PARAM, stats.hitRate());\n      map.put(INSERTS_PARAM, insertCount);\n      map.put(EVICTIONS_PARAM, stats.evictionCount());\n      map.put(SIZE_PARAM, cache.asMap().size());\n      map.put(\"warmupTime\", warmupTime);\n      map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n      map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n      CacheStats cumulativeStats = priorStats.plus(stats);\n      map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n      map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n      map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n      map.put(\"cumulative_inserts\", priorInserts + insertCount);\n      map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165bd30d84a09af4848397dadf2c361016c8c417","date":1570129904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        CacheStats stats = cache.stats();\n        long insertCount = inserts.sum();\n\n        map.put(LOOKUPS_PARAM, stats.requestCount());\n        map.put(HITS_PARAM, stats.hitCount());\n        map.put(HIT_RATIO_PARAM, stats.hitRate());\n        map.put(INSERTS_PARAM, insertCount);\n        map.put(EVICTIONS_PARAM, stats.evictionCount());\n        map.put(SIZE_PARAM, cache.asMap().size());\n        map.put(\"warmupTime\", warmupTime);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n        CacheStats cumulativeStats = priorStats.plus(stats);\n        map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n        map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n        map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n        map.put(\"cumulative_inserts\", priorInserts + insertCount);\n        map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      CacheStats stats = cache.stats();\n      long insertCount = inserts.sum();\n\n      map.put(LOOKUPS_PARAM, stats.requestCount());\n      map.put(HITS_PARAM, stats.hitCount());\n      map.put(HIT_RATIO_PARAM, stats.hitRate());\n      map.put(INSERTS_PARAM, insertCount);\n      map.put(EVICTIONS_PARAM, stats.evictionCount());\n      map.put(SIZE_PARAM, cache.asMap().size());\n      map.put(\"warmupTime\", warmupTime);\n      map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n      map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n      CacheStats cumulativeStats = priorStats.plus(stats);\n      map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n      map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n      map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n      map.put(\"cumulative_inserts\", priorInserts + insertCount);\n      map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        CacheStats stats = cache.stats();\n        long insertCount = inserts.sum();\n\n        map.put(LOOKUPS_PARAM, stats.requestCount());\n        map.put(HITS_PARAM, stats.hitCount());\n        map.put(HIT_RATIO_PARAM, stats.hitRate());\n        map.put(INSERTS_PARAM, insertCount);\n        map.put(EVICTIONS_PARAM, stats.evictionCount());\n        map.put(SIZE_PARAM, cache.asMap().size());\n        map.put(\"warmupTime\", warmupTime);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n        CacheStats cumulativeStats = priorStats.plus(stats);\n        map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n        map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n        map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n        map.put(\"cumulative_inserts\", priorInserts + insertCount);\n        map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CaffeineCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        CacheStats stats = cache.stats();\n        long insertCount = inserts.sum();\n\n        map.put(LOOKUPS_PARAM, stats.requestCount());\n        map.put(HITS_PARAM, stats.hitCount());\n        map.put(HIT_RATIO_PARAM, stats.hitRate());\n        map.put(INSERTS_PARAM, insertCount);\n        map.put(EVICTIONS_PARAM, stats.evictionCount());\n        map.put(SIZE_PARAM, cache.asMap().size());\n        map.put(\"warmupTime\", warmupTime);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n        CacheStats cumulativeStats = priorStats.plus(stats);\n        map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n        map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n        map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n        map.put(\"cumulative_inserts\", priorInserts + insertCount);\n        map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n      }\n    });\n    solrMetricsContext.gauge(this, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        CacheStats stats = cache.stats();\n        long insertCount = inserts.sum();\n\n        map.put(LOOKUPS_PARAM, stats.requestCount());\n        map.put(HITS_PARAM, stats.hitCount());\n        map.put(HIT_RATIO_PARAM, stats.hitRate());\n        map.put(INSERTS_PARAM, insertCount);\n        map.put(EVICTIONS_PARAM, stats.evictionCount());\n        map.put(SIZE_PARAM, cache.asMap().size());\n        map.put(\"warmupTime\", warmupTime);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_RAM_MB_PARAM, getMaxRamMB());\n\n        CacheStats cumulativeStats = priorStats.plus(stats);\n        map.put(\"cumulative_lookups\", cumulativeStats.requestCount());\n        map.put(\"cumulative_hits\", cumulativeStats.hitCount());\n        map.put(\"cumulative_hitratio\", cumulativeStats.hitRate());\n        map.put(\"cumulative_inserts\", priorInserts + insertCount);\n        map.put(\"cumulative_evictions\", cumulativeStats.evictionCount());\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["165bd30d84a09af4848397dadf2c361016c8c417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"165bd30d84a09af4848397dadf2c361016c8c417":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","165bd30d84a09af4848397dadf2c361016c8c417"]},"commit2Childs":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["165bd30d84a09af4848397dadf2c361016c8c417"],"165bd30d84a09af4848397dadf2c361016c8c417":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}