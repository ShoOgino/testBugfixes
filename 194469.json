{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","commits":[{"id":"b4d01dd8bb594fcd007a358009375967f9333d0a","date":1425496373,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    int oldPos = data.position();\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    } finally {\n      //Signature.update resets the position. set it back to old\n      data.position(oldPos);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    int oldPos = data.position();\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    } finally {\n      //Signature.update resets the position. set it back to old\n      data.position(oldPos);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    data = ByteBuffer.wrap(data.array(), data.arrayOffset(), data.limit());\n    try {\n      Signature signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      return signature.verify(sig);\n    } catch (NoSuchAlgorithmException e) {\n      //wil not happen\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    int oldPos = data.position();\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    } finally {\n      //Signature.update resets the position. set it back to old\n      data.position(oldPos);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    int oldPos = data.position();\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    } finally {\n      //Signature.update resets the position. set it back to old\n      data.position(oldPos);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    data = ByteBuffer.wrap(data.array(), data.arrayOffset(), data.limit());\n    try {\n      Signature signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      return signature.verify(sig);\n    } catch (NoSuchAlgorithmException e) {\n      //wil not happen\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(PublicKey,byte[],ByteBuffer).mjava","sourceNew":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    data = ByteBuffer.wrap(data.array(), data.arrayOffset(), data.limit());\n    try {\n      Signature signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      return signature.verify(sig);\n    } catch (NoSuchAlgorithmException e) {\n      //wil not happen\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Verify the signature of a file\n   *\n   * @param publicKey the public key used to sign this\n   * @param sig       the signature\n   * @param data      The data tha is signed\n   */\n  public static boolean verify(PublicKey publicKey, byte[] sig, ByteBuffer data) throws InvalidKeyException, SignatureException {\n    int oldPos = data.position();\n    Signature signature = null;\n    try {\n      signature = Signature.getInstance(\"SHA1withRSA\");\n      signature.initVerify(publicKey);\n      signature.update(data);\n      boolean verify = signature.verify(sig);\n      return verify;\n\n    } catch (NoSuchAlgorithmException e) {\n      //will not happen\n    } finally {\n      //Signature.update resets the position. set it back to old\n      data.position(oldPos);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fb50877dc038c021eba3a70999fd1f6ed85001c1"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b4d01dd8bb594fcd007a358009375967f9333d0a"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}