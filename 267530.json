{"path":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","commits":[{"id":"488ddee53b8f555fe7c97322cdf3f356d5e49503","date":1310649459,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetRawFile() throws SolrServerException, IOException {\n    SolrServer server = getSolrServer();\n    //assertQ(req(\"qt\", \"/admin/file\")); TODO file bug that SolrJettyTestBase extends SolrTestCaseJ4\n    QueryRequest request = new QueryRequest(params(\"file\",\"schema.xml\"));\n    request.setPath(\"/admin/file\");\n    final AtomicBoolean readFile = new AtomicBoolean();\n    request.setResponseParser(new ResponseParser() {\n      @Override\n      public String getWriterType() {\n        return \"mock\";//unfortunately this gets put onto params wt=mock but it apparently has no effect\n      }\n\n      @Override\n      public NamedList<Object> processResponse(InputStream body, String encoding) {\n        try {\n          if (body.read() >= 0)\n            readFile.set(true);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return null;\n      }\n\n      @Override\n      public NamedList<Object> processResponse(Reader reader) {\n        throw new UnsupportedOperationException(\"TODO unimplemented\");//TODO\n      }\n    });\n\n    server.request( request );//runs request\n    //request.process(server); but we don't have a NamedList response\n    assertTrue(readFile.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","sourceNew":"  public void testGetRawFile() throws SolrServerException, IOException {\n    SolrClient client = getSolrClient();\n    //assertQ(req(\"qt\", \"/admin/file\")); TODO file bug that SolrJettyTestBase extends SolrTestCaseJ4\n    QueryRequest request = new QueryRequest(params(\"file\",\"schema.xml\"));\n    request.setPath(\"/admin/file\");\n    final AtomicBoolean readFile = new AtomicBoolean();\n    request.setResponseParser(new ResponseParser() {\n      @Override\n      public String getWriterType() {\n        return \"mock\";//unfortunately this gets put onto params wt=mock but it apparently has no effect\n      }\n\n      @Override\n      public NamedList<Object> processResponse(InputStream body, String encoding) {\n        try {\n          if (body.read() >= 0)\n            readFile.set(true);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return null;\n      }\n\n      @Override\n      public NamedList<Object> processResponse(Reader reader) {\n        throw new UnsupportedOperationException(\"TODO unimplemented\");//TODO\n      }\n    });\n\n    client.request(request);//runs request\n    //request.process(client); but we don't have a NamedList response\n    assertTrue(readFile.get());\n  }\n\n","sourceOld":"  public void testGetRawFile() throws SolrServerException, IOException {\n    SolrServer server = getSolrServer();\n    //assertQ(req(\"qt\", \"/admin/file\")); TODO file bug that SolrJettyTestBase extends SolrTestCaseJ4\n    QueryRequest request = new QueryRequest(params(\"file\",\"schema.xml\"));\n    request.setPath(\"/admin/file\");\n    final AtomicBoolean readFile = new AtomicBoolean();\n    request.setResponseParser(new ResponseParser() {\n      @Override\n      public String getWriterType() {\n        return \"mock\";//unfortunately this gets put onto params wt=mock but it apparently has no effect\n      }\n\n      @Override\n      public NamedList<Object> processResponse(InputStream body, String encoding) {\n        try {\n          if (body.read() >= 0)\n            readFile.set(true);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return null;\n      }\n\n      @Override\n      public NamedList<Object> processResponse(Reader reader) {\n        throw new UnsupportedOperationException(\"TODO unimplemented\");//TODO\n      }\n    });\n\n    server.request( request );//runs request\n    //request.process(server); but we don't have a NamedList response\n    assertTrue(readFile.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cd2239be52b443d5348781402d9474cece93334","date":1449473561,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ShowFileRequestHandlerTest#testGetRawFile().mjava","sourceNew":"  public void testGetRawFile() throws SolrServerException, IOException {\n    SolrClient client = getSolrClient();\n    //assertQ(req(\"qt\", \"/admin/file\")); TODO file bug that SolrJettyTestBase extends SolrTestCaseJ4\n    QueryRequest request = new QueryRequest(params(\"file\", \"managed-schema\"));\n    request.setPath(\"/admin/file\");\n    final AtomicBoolean readFile = new AtomicBoolean();\n    request.setResponseParser(new ResponseParser() {\n      @Override\n      public String getWriterType() {\n        return \"mock\";//unfortunately this gets put onto params wt=mock but it apparently has no effect\n      }\n\n      @Override\n      public NamedList<Object> processResponse(InputStream body, String encoding) {\n        try {\n          if (body.read() >= 0)\n            readFile.set(true);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return null;\n      }\n\n      @Override\n      public NamedList<Object> processResponse(Reader reader) {\n        throw new UnsupportedOperationException(\"TODO unimplemented\");//TODO\n      }\n    });\n\n    client.request(request);//runs request\n    //request.process(client); but we don't have a NamedList response\n    assertTrue(readFile.get());\n  }\n\n","sourceOld":"  public void testGetRawFile() throws SolrServerException, IOException {\n    SolrClient client = getSolrClient();\n    //assertQ(req(\"qt\", \"/admin/file\")); TODO file bug that SolrJettyTestBase extends SolrTestCaseJ4\n    QueryRequest request = new QueryRequest(params(\"file\",\"schema.xml\"));\n    request.setPath(\"/admin/file\");\n    final AtomicBoolean readFile = new AtomicBoolean();\n    request.setResponseParser(new ResponseParser() {\n      @Override\n      public String getWriterType() {\n        return \"mock\";//unfortunately this gets put onto params wt=mock but it apparently has no effect\n      }\n\n      @Override\n      public NamedList<Object> processResponse(InputStream body, String encoding) {\n        try {\n          if (body.read() >= 0)\n            readFile.set(true);\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        return null;\n      }\n\n      @Override\n      public NamedList<Object> processResponse(Reader reader) {\n        throw new UnsupportedOperationException(\"TODO unimplemented\");//TODO\n      }\n    });\n\n    client.request(request);//runs request\n    //request.process(client); but we don't have a NamedList response\n    assertTrue(readFile.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cd2239be52b443d5348781402d9474cece93334":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["488ddee53b8f555fe7c97322cdf3f356d5e49503"],"488ddee53b8f555fe7c97322cdf3f356d5e49503":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cd2239be52b443d5348781402d9474cece93334"]},"commit2Childs":{"6cd2239be52b443d5348781402d9474cece93334":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["488ddee53b8f555fe7c97322cdf3f356d5e49503"],"bafca15d8e408346a67f4282ad1143b88023893b":["6cd2239be52b443d5348781402d9474cece93334"],"488ddee53b8f555fe7c97322cdf3f356d5e49503":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}