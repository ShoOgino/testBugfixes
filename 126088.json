{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","sourceNew":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","sourceOld":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}