{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef3d86b6056488ff26e1494fee064353e63d291e","date":1317021224,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":["7cdac6591b64f43f87663e70518d79dd137454b4","243885d7a8da5b172092cfac738e33970bec02e1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f","date":1328286380,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      //System.out.println(\"The latest index gen is:\" + commitPoint.getGeneration() + \" \" + core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName());\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, core.getDeletionPolicy().getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","date":1399457549,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c89c6c3774e38c725fbfffcb911d466a97f9364","date":1407895788,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa112cb510d1bdb66c944fe9ba78679974d3c14","date":1415631115,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.setDaemon(false);\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.setDaemon(false);\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.setDaemon(false);\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.setDaemon(false);\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread puller = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      puller.setDaemon(false);\n      puller.start();\n      if (solrParams.getBool(WAIT, false)) {\n        puller.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      SnapPuller temp = tempSnapPuller;\n      if (temp != null){\n        temp.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n \n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n      \n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc69baf14413994ccde897681e5ce1d393cf7156","date":1468245555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()){\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()){\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()){\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(\"explicit-fetchindex-cmd\") {\n        @Override\n        public void run() {\n          doFetch(paramsCopy, false);\n        }\n      };\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null){\n        fetcher.abortFetch();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.required().get(COMMAND);\n\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n        rsp.add(STATUS, OK_STATUS);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      populateRestoreStatus(rsp);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      fetchIndex(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      disablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      enablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, \"No slave configured\", null);\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      populateCommitInfo(rsp);\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp, solrParams.getBool(\"slave\", true));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      rsp.add(CMD_RESTORE_STATUS, getRestoreStatus());\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams));\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      Thread fetchThread = new Thread(() -> doFetch(paramsCopy, false), \"explicit-fetchindex-cmd\") ;\n      fetchThread.setDaemon(false);\n      fetchThread.start();\n      if (solrParams.getBool(WAIT, false)) {\n        fetchThread.join();\n      }\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (pollingIndexFetcher != null){\n        enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()){\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\", true)));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","20f6b7cff3771384f27af0f059795d7e64aff6b9","dea8e36e8c36d610840396c282a5affe3f722f4e","7b13106276bb5ea342253dbf6aae7b675adb38d3","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c","464eee4bbfeec9402812d9f2d13af9665931a402","cc69baf14413994ccde897681e5ce1d393cf7156","25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.required().get(COMMAND);\n\n    // This command does not give the current index version of the leader\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n        rsp.add(STATUS, OK_STATUS);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      populateRestoreStatus(rsp);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      fetchIndex(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      disablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      enablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, \"No follower configured\", null);\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      populateCommitInfo(rsp);\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp, getBoolWithBackwardCompatibility(solrParams, \"follower\", \"slave\", true));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.required().get(COMMAND);\n\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n\n      if (commitPoint == null) {\n        // if this handler is 'lazy', we may not have tracked the last commit\n        // because our commit listener is registered on inform\n        commitPoint = core.getDeletionPolicy().getLatestCommit();\n      }\n\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getGeneration(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, IndexDeletionPolicyWrapper.getCommitTimestamp(commitPoint));\n        rsp.add(GENERATION, commitPoint.getGeneration());\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n        rsp.add(STATUS, OK_STATUS);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE)) {\n      restore(new ModifiableSolrParams(solrParams), rsp, req);\n    } else if (command.equalsIgnoreCase(CMD_RESTORE_STATUS)) {\n      populateRestoreStatus(rsp);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      fetchIndex(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      disablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      enablePoll(rsp);\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (abortFetch()) {\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        reportErrorOnResponse(rsp, \"No slave configured\", null);\n      }\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      populateCommitInfo(rsp);\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp, solrParams.getBool(\"slave\", true));\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"5c89c6c3774e38c725fbfffcb911d466a97f9364":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cc69baf14413994ccde897681e5ce1d393cf7156":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["ef3d86b6056488ff26e1494fee064353e63d291e"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"f2126b84bd093fa3d921582a109a0ee578c28126":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f"],"72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["cc69baf14413994ccde897681e5ce1d393cf7156"],"ef3d86b6056488ff26e1494fee064353e63d291e":["c26f00b574427b55127e869b935845554afde1fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b13106276bb5ea342253dbf6aae7b675adb38d3","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"0fa112cb510d1bdb66c944fe9ba78679974d3c14":["5c89c6c3774e38c725fbfffcb911d466a97f9364"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["0d22ac6a4146774c1bc8400160fc0b6150294e92","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["0fa112cb510d1bdb66c944fe9ba78679974d3c14"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["cc69baf14413994ccde897681e5ce1d393cf7156","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["5b6fdfce35d0adb18836cf8711abe487a934df33","72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f","817882884229bace7dc5d1b75f6b0e4aa1e47122"],"c26f00b574427b55127e869b935845554afde1fa":["ef3d86b6056488ff26e1494fee064353e63d291e"],"a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c":["5c89c6c3774e38c725fbfffcb911d466a97f9364"],"5c89c6c3774e38c725fbfffcb911d466a97f9364":["0fa112cb510d1bdb66c944fe9ba78679974d3c14"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"cc69baf14413994ccde897681e5ce1d393cf7156":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["817882884229bace7dc5d1b75f6b0e4aa1e47122"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72e8cbcba45a8893fa8d6f1894edd5ed30a4ae0f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"ef3d86b6056488ff26e1494fee064353e63d291e":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5cb65c1c2f90852e718f86c8be09beb1c4dba408","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0fa112cb510d1bdb66c944fe9ba78679974d3c14":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["a5bb2e653b3f6992c26fe4cc0f3fbdce37b21c3c"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["cc69baf14413994ccde897681e5ce1d393cf7156","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","5b6fdfce35d0adb18836cf8711abe487a934df33","f2126b84bd093fa3d921582a109a0ee578c28126","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","817882884229bace7dc5d1b75f6b0e4aa1e47122","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}