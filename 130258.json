{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene50PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene50PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#writeTermState(DataOutput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a {@link BlockTermState} to the provided {@link DataOutput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsWriter#encodeTerm(long[], DataOutput, FieldInfo, BlockTermState, boolean)}.\n   */\n  public void writeTermState(DataOutput termStatesOutput, FieldInfo fieldInfo, BlockTermState termState) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean hasPayloads = fieldInfo.hasPayloads();\n\n    IntBlockTermState intTermState = (IntBlockTermState) termState;\n\n    termStatesOutput.writeVInt(intTermState.docFreq);\n    if (hasFreqs) {\n      assert intTermState.totalTermFreq >= intTermState.docFreq;\n      termStatesOutput.writeVLong(intTermState.totalTermFreq - intTermState.docFreq);\n    }\n\n    if (intTermState.singletonDocID != -1) {\n      termStatesOutput.writeVInt(intTermState.singletonDocID);\n    } else {\n      if (baseDocStartFP == 0) {\n        baseDocStartFP = intTermState.docStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.docStartFP - baseDocStartFP);\n    }\n\n    if (hasPositions) {\n      if (basePosStartFP == 0) {\n        basePosStartFP = intTermState.posStartFP;\n      }\n      termStatesOutput.writeVLong(intTermState.posStartFP - basePosStartFP);\n      if (hasPayloads || hasOffsets) {\n        if (basePayStartFP == 0) {\n          basePayStartFP = intTermState.payStartFP;\n        }\n        termStatesOutput.writeVLong(intTermState.payStartFP - basePayStartFP);\n      }\n      if (intTermState.lastPosBlockOffset != -1) {\n        termStatesOutput.writeVLong(intTermState.lastPosBlockOffset);\n      }\n    }\n    if (intTermState.skipOffset != -1) {\n      termStatesOutput.writeVLong(intTermState.skipOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}