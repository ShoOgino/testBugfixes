{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80249aaf913769676b1d45cdf0859ca70bd04fc8","date":1353440934,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    LOG.info(String.format(Locale.ROOT,\n        \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n        resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    LOG.info(String.format(Locale.ROOT,\n        \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n        resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk))\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery returned a row with null for primary key %s\", pk));\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(\n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null)\n      throw new IllegalArgumentException(\n        String.format(\"deltaQuery has no column to resolve to declared primary key pk='%s'\", pk));\n    LOG.info(String.format(\"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\", resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    log.info(String.format(Locale.ROOT,\n        \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n        resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    LOG.info(String.format(Locale.ROOT,\n        \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n        resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ROOT,\n          \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n          resolvedPk, pk));\n    }\n    return resolvedPk;\n  }\n\n","sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    log.info(String.format(Locale.ROOT,\n        \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n        resolvedPk, pk));\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#findMatchingPkColumn(String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private String findMatchingPkColumn(String pk, Map<String, Object> row) {\n    if (row.containsKey(pk)) {\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\n          \"deltaQuery returned a row with null for primary key %s\", pk));\n    }\n    String resolvedPk = null;\n    for (String columnName : row.keySet()) {\n      if (columnName.endsWith(\".\" + pk) || pk.endsWith(\".\" + columnName)) {\n        if (resolvedPk != null)\n          throw new IllegalArgumentException(\n            String.format(Locale.ROOT, \n              \"deltaQuery has more than one column (%s and %s) that might resolve to declared primary key pk='%s'\",\n              resolvedPk, columnName, pk));\n        resolvedPk = columnName;\n      }\n    }\n    if (resolvedPk == null) {\n      throw new IllegalArgumentException(\n          String\n              .format(\n                  Locale.ROOT,\n                  \"deltaQuery has no column to resolve to declared primary key pk='%s'\",\n                  pk));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ROOT,\n          \"Resolving deltaQuery column '%s' to match entity's declared pk '%s'\",\n          resolvedPk, pk));\n    }\n    return resolvedPk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["c26f00b574427b55127e869b935845554afde1fa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["80249aaf913769676b1d45cdf0859ca70bd04fc8"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["407687e67faf6e1f02a211ca078d8e3eed631027","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}