{"path":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      Iterator it = commits.iterator();\n      // Make sure we can open a reader on each commit:\n      while(it.hasNext()) {\n        IndexCommit commit = (IndexCommit) it.next();\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      Iterator it = commits.iterator();\n      // Make sure we can open a reader on each commit:\n      while(it.hasNext()) {\n        IndexCommit commit = (IndexCommit) it.next();\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      Iterator it = commits.iterator();\n      // Make sure we can open a reader on each commit:\n      while(it.hasNext()) {\n        IndexCommit commit = (IndexCommit) it.next();\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.LIMITED);\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}