{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","commits":[{"id":"0613e0740833ec755a71c81b0046b97df797e9ce","date":1428263071,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanPositionRangeQuery([A B], M, N) ⊆ SpanNearQuery([A B]) */\n  public void testSpanRangeNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2) };\n    SpanQuery nearQuery = new SpanNearQuery(subquery, 10, true);\n    for (int i = 0; i < 5; i++) {\n      for (int j = 0; j < 5; j++) {\n        Query q1 = new SpanPositionRangeQuery(nearQuery, i, i+j);\n        Query q2 = nearQuery;\n        assertSubsetOf(q1, q2);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","sourceNew":"  /** SpanPositionRangeQuery([A B], M, N) ⊆ SpanNearQuery([A B]) */\n  public void testSpanRangeNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)) \n                           };\n    SpanQuery nearQuery = span(new SpanNearQuery(subquery, 10, true));\n    for (int i = 0; i < 5; i++) {\n      for (int j = 0; j < 5; j++) {\n        Query q1 = span(new SpanPositionRangeQuery(nearQuery, i, i+j));\n        Query q2 = nearQuery;\n        assertSubsetOf(q1, q2);\n      }\n    }\n  }\n\n","sourceOld":"  /** SpanPositionRangeQuery([A B], M, N) ⊆ SpanNearQuery([A B]) */\n  public void testSpanRangeNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { new SpanTermQuery(t1), new SpanTermQuery(t2) };\n    SpanQuery nearQuery = new SpanNearQuery(subquery, 10, true);\n    for (int i = 0; i < 5; i++) {\n      for (int j = 0; j < 5; j++) {\n        Query q1 = new SpanPositionRangeQuery(nearQuery, i, i+j);\n        Query q2 = nearQuery;\n        assertSubsetOf(q1, q2);\n      }\n    }\n  }\n\n","bugFix":["0613e0740833ec755a71c81b0046b97df797e9ce"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanRangeNear().mjava","sourceNew":"  /** SpanPositionRangeQuery([A B], M, N) ⊆ SpanNearQuery([A B]) */\n  public void testSpanRangeNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             spanQuery(new SpanTermQuery(t1)), \n                             spanQuery(new SpanTermQuery(t2)) \n                           };\n    SpanQuery nearQuery = spanQuery(new SpanNearQuery(subquery, 10, true));\n    for (int i = 0; i < 5; i++) {\n      for (int j = 0; j < 5; j++) {\n        Query q1 = spanQuery(new SpanPositionRangeQuery(nearQuery, i, i+j));\n        Query q2 = nearQuery;\n        assertSubsetOf(q1, q2);\n      }\n    }\n  }\n\n","sourceOld":"  /** SpanPositionRangeQuery([A B], M, N) ⊆ SpanNearQuery([A B]) */\n  public void testSpanRangeNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    SpanQuery subquery[] = new SpanQuery[] { \n                             span(new SpanTermQuery(t1)), \n                             span(new SpanTermQuery(t2)) \n                           };\n    SpanQuery nearQuery = span(new SpanNearQuery(subquery, 10, true));\n    for (int i = 0; i < 5; i++) {\n      for (int j = 0; j < 5; j++) {\n        Query q1 = span(new SpanPositionRangeQuery(nearQuery, i, i+j));\n        Query q2 = nearQuery;\n        assertSubsetOf(q1, q2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0613e0740833ec755a71c81b0046b97df797e9ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["0613e0740833ec755a71c81b0046b97df797e9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"0613e0740833ec755a71c81b0046b97df797e9ce":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0613e0740833ec755a71c81b0046b97df797e9ce"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}