{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"/dev/null","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"/dev/null","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80NormsConsumer#numBytesPerValue(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsConsumer#numBytesPerValue(long,long).mjava","sourceNew":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","sourceOld":"  private int numBytesPerValue(long min, long max) {\n    if (min >= max) {\n      return 0;\n    } else if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {\n      return 1;\n    } else if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {\n      return 2;\n    } else if (min >= Integer.MIN_VALUE && max <= Integer.MAX_VALUE) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}