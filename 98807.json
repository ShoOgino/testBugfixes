{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_31,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_31,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_31,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":["81d6d41a6e097c5c1e2c81055a12d7f24e147ec7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_CURRENT,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_CURRENT,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_50,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_CURRENT,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_CURRENT,\n           Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSetExceptions#RuleWithSetExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Arrays.asList(exceptions), false);\n    }\n\n","sourceOld":"    public RuleWithSetExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new CharArraySet(Version.LUCENE_CURRENT,\n           Arrays.asList(exceptions), false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["0bf41419d452997826ec5f17684993377be77f49"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bf41419d452997826ec5f17684993377be77f49":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","0bf41419d452997826ec5f17684993377be77f49"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["0bf41419d452997826ec5f17684993377be77f49","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"0bf41419d452997826ec5f17684993377be77f49":["ff4227bb146f97aabae888091c19e48c88dbb0db","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}