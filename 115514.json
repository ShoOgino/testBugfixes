{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c","date":1446951913,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s asc\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n                                              +       \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              +       \"by=\\\"a_s\\\",\" +\n                                                      \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n                                              + \"by=\\\"a_s\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"group(\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              + \"by=\\\"a_s\\\")\");\n    stream = new ReducerStream(expression, factory);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,3,4);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps();\n    assertMaps(maps0, 0, 2,1, 9);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps();\n    assertMaps(maps1, 3, 5, 7, 8);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps();\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9","3078cad1008b796c6d573b743c586fdf9ef5660a","c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n                                              +       \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n                                              +       \"by=\\\"a_s\\\",\" +\n                                                      \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  private void testReducerStream() throws Exception{\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n    commit();\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    \n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    // basic\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n        + \"by=\\\"a_s\\\",\"\n        + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assertMaps(maps0, 9, 1, 2, 0);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 8, 7, 5, 3);\n\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 6, 4);\n    \n    // basic w/spaces\n    expression = StreamExpressionParser.parse(\"reduce(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n        + \"by=\\\"a_s\\\",\" +\n        \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    t0 = tuples.get(0);\n    maps0 = t0.getMaps(\"group\");\n    assert(maps0.size() == 2);\n\n    assertMaps(maps0, 0, 1);\n\n    t1 = tuples.get(1);\n    maps1 = t1.getMaps(\"group\");\n    assertMaps(maps1, 3, 5);\n\n    t2 = tuples.get(2);\n    maps2 = t2.getMaps(\"group\");\n    assertMaps(maps2, 4, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"73450c0955930295d34703e7ddbfc6973b7a121a":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["10b9c6c42133576daaccbd79bd04c88511b9caca","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["10b9c6c42133576daaccbd79bd04c88511b9caca","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"10b9c6c42133576daaccbd79bd04c88511b9caca":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c1833f6d07cc5000544dfe89f26c81e2eb8afb4c":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["c1833f6d07cc5000544dfe89f26c81e2eb8afb4c"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}