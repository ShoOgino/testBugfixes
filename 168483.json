{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public SimpleDVConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state);\n  }\n\n","sourceOld":"  @Override\n  public SimpleDVConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene41SimpleDocValuesConsumer(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state);\n  }\n\n","sourceOld":"  @Override\n  public SimpleDVConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION);\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene45DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene45DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene45DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new DiskDocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene49DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene45DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","bugFix":["11a746437bc5c0a0b3df0337ed249c387c812871"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae889c32f4f301251f60804d7082a520e0594c6","date":1402924441,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene49DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValuesConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new Lucene49DocValuesConsumer(state, DATA_CODEC, DATA_EXTENSION, META_CODEC, META_EXTENSION) {\n      @Override\n      protected void addTermsDict(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n        addBinaryField(field, values);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","11a746437bc5c0a0b3df0337ed249c387c812871"],"6ae889c32f4f301251f60804d7082a520e0594c6":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","6ae889c32f4f301251f60804d7082a520e0594c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ae889c32f4f301251f60804d7082a520e0594c6"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["6ae889c32f4f301251f60804d7082a520e0594c6","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"6ae889c32f4f301251f60804d7082a520e0594c6":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}