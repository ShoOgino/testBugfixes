{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOptimizedOffsetSource(UHComponents).mjava","commits":[{"id":"c2a55d7ebf9e9ced797f40d5154d602029a9791d","date":1561151156,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOptimizedOffsetSource(UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOptimizedOffsetSource(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[]).mjava","sourceNew":"  protected OffsetSource getOptimizedOffsetSource(UHComponents components) {\n    OffsetSource offsetSource = getOffsetSource(components.getField());\n\n    // null automata means unknown, so assume a possibility\n    boolean mtqOrRewrite = components.getAutomata() == null || components.getAutomata().length > 0\n        || components.getPhraseHelper().willRewrite() || components.hasUnrecognizedQueryPart();\n\n    // null terms means unknown, so assume something to highlight\n    if (mtqOrRewrite == false && components.getTerms() != null && components.getTerms().length == 0) {\n      return OffsetSource.NONE_NEEDED; //nothing to highlight\n    }\n\n    switch (offsetSource) {\n      case POSTINGS:\n        if (mtqOrRewrite) { // may need to see scan through all terms for the highlighted document efficiently\n          return OffsetSource.ANALYSIS;\n        }\n        break;\n      case POSTINGS_WITH_TERM_VECTORS:\n        if (mtqOrRewrite == false) {\n          return OffsetSource.POSTINGS; //We don't need term vectors\n        }\n        break;\n      case ANALYSIS:\n      case TERM_VECTORS:\n      case NONE_NEEDED:\n      default:\n        //stick with the original offset source\n        break;\n    }\n\n    return offsetSource;\n  }\n\n","sourceOld":"  protected OffsetSource getOptimizedOffsetSource(String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata) {\n    OffsetSource offsetSource = getOffsetSource(field);\n\n    if (terms.length == 0 && automata.length == 0 && !phraseHelper.willRewrite()) {\n      return OffsetSource.NONE_NEEDED; //nothing to highlight\n    }\n\n    switch (offsetSource) {\n      case POSTINGS:\n        if (phraseHelper.willRewrite()) {\n          // We can't choose the postings offset source when there is \"rewriting\" in the strict phrase\n          // processing (rare but possible). Postings requires knowing all the terms (except wildcards)\n          // up front.\n          return OffsetSource.ANALYSIS;\n        } else if (automata.length > 0) {\n          return OffsetSource.ANALYSIS;\n        }\n        break;\n      case POSTINGS_WITH_TERM_VECTORS:\n        if (!phraseHelper.willRewrite() && automata.length == 0) {\n          return OffsetSource.POSTINGS; //We don't need term vectors\n        }\n        break;\n      case ANALYSIS:\n      case TERM_VECTORS:\n      case NONE_NEEDED:\n      default:\n        //stick with the original offset source\n        break;\n    }\n\n    return offsetSource;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"]},"commit2Childs":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}