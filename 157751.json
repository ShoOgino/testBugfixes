{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","commits":[{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testFunction(String,Object,Number).mjava","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","sourceOld":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ebde9c21d35a39c07989c178372e901ad377da","date":1492023892,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","sourceOld":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"/dev/null","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected.longValue(), result);\n  }\n\n","sourceOld":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected.longValue(), result);\n  }\n\n","sourceOld":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testFunction(String,Object,Number).mjava","sourceNew":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected.longValue(), result);\n  }\n\n","sourceOld":"  public void testFunction(String expression, Object value, Number expected) throws Exception {\n    StreamEvaluator evaluator = factory.constructEvaluator(expression);\n    StreamContext streamContext = new StreamContext();\n    evaluator.setStreamContext(streamContext);\n    values.clear();\n    values.put(\"a\", value);\n    Object result = evaluator.evaluate(new Tuple(values));\n    assertTrue(result instanceof Number);\n    assertEquals(expected, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56ebde9c21d35a39c07989c178372e901ad377da":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["56ebde9c21d35a39c07989c178372e901ad377da","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["56ebde9c21d35a39c07989c178372e901ad377da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"56ebde9c21d35a39c07989c178372e901ad377da":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["56ebde9c21d35a39c07989c178372e901ad377da"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}