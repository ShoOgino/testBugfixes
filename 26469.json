{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","commits":[{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,ValueType).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    assert segmentCodecsBuilder != null : \"SegmentCodecsBuilder is set to null but FieldInfos is not read-only\";\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValues(docValues);\n    }\n    if ((fi.isIndexed || fi.hasDocValues()) && fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n      segmentCodecsBuilder.tryAddAndSet(fi);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    assert segmentCodecsBuilder != null : \"SegmentCodecsBuilder is set to null but FieldInfos is not read-only\";\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      fi.setDocValues(docValues);\n    }\n    if ((fi.isIndexed || fi.hasDocValues()) && fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n      segmentCodecsBuilder.tryAddAndSet(fi);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValues(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    assert segmentCodecsBuilder != null : \"SegmentCodecsBuilder is set to null but FieldInfos is not read-only\";\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValues(docValues);\n    }\n    if ((fi.isIndexed || fi.hasDocValues()) && fi.getCodecId() == FieldInfo.UNASSIGNED_CODEC_ID) {\n      segmentCodecsBuilder.tryAddAndSet(fi);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","date":1323284809,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValues(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValues(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7b91922b55d15444d554721b352861d028eb8278","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}