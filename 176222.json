{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","pathOld":"/dev/null","sourceNew":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    return categories;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","pathOld":"/dev/null","sourceNew":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    return categories;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","date":1359020450,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","sourceNew":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","sourceOld":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    return categories;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","sourceNew":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","sourceOld":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    return categories;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomCategories(Random).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#randomCategories(Random).mjava","sourceNew":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","sourceOld":"  private static List<CategoryPath> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<CategoryPath> categories_a = new ArrayList<CategoryPath>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<CategoryPath> categories_b = new ArrayList<CategoryPath>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<CategoryPath> categories = new ArrayList<CategoryPath>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","07155cdd910937cdf6877e48884d5782845c8b8b"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["571abba77e55fea386a38c0024f72ffa5b37a9ad","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}