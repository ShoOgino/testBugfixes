{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapPartition(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapPartition(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private byte[] heapPartition(HeapPointWriter points, PointWriter left, PointWriter right, int dim, int from, int to, int partitionPoint, int commonPrefix) throws IOException {\n\n    byte[] partition = heapRadixSelect(points, dim, from, to, partitionPoint, commonPrefix);\n\n    for (int i = from; i < to; i++) {\n      points.getPackedValueSlice(i, bytesRef1);\n      int docID = points.docIDs[i];\n      if (i < partitionPoint) {\n        left.append(bytesRef1, docID);\n      } else {\n        right.append(bytesRef1, docID);\n      }\n    }\n\n    return partition;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapPartition(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#heapPartition(HeapPointWriter,PointWriter,PointWriter,int,int,int,int,int).mjava","sourceNew":"  private byte[] heapPartition(HeapPointWriter points, PointWriter left, PointWriter right, int dim, int from, int to, int partitionPoint, int commonPrefix) throws IOException {\n    byte[] partition = heapRadixSelect(points, dim, from, to, partitionPoint, commonPrefix);\n    for (int i = from; i < to; i++) {\n      PointValue value = points.getPackedValueSlice(i);\n      if (i < partitionPoint) {\n        left.append(value);\n      } else {\n        right.append(value);\n      }\n    }\n    return partition;\n  }\n\n","sourceOld":"  private byte[] heapPartition(HeapPointWriter points, PointWriter left, PointWriter right, int dim, int from, int to, int partitionPoint, int commonPrefix) throws IOException {\n\n    byte[] partition = heapRadixSelect(points, dim, from, to, partitionPoint, commonPrefix);\n\n    for (int i = from; i < to; i++) {\n      points.getPackedValueSlice(i, bytesRef1);\n      int docID = points.docIDs[i];\n      if (i < partitionPoint) {\n        left.append(bytesRef1, docID);\n      } else {\n        right.append(bytesRef1, docID);\n      }\n    }\n\n    return partition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}