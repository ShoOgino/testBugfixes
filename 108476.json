{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","commits":[{"id":"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","date":1329188942,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int,Map[String,TopTermQueue]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        Document doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(\n      final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms, Map<String,TopTermQueue> ttinfo)\n      throws Exception {\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Fields theFields = reader.fields();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; // we're not interested in this term\n      }\n\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      Terms terms = theFields.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, f );\n        continue;\n      }\n\n      TopTermQueue topTerms = ttinfo.get( fieldName );\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        if (numTerms > 0) { // Read the actual field from the index and report that too.\n          Document doc = null;\n          if (topTerms != null && topTerms.getTopTermInfo() != null) {\n            Term term = topTerms.getTopTermInfo().term;\n            DocsEnum docsEnum = reader.termDocsEnum(reader.getLiveDocs(),\n                term.field(),\n                new BytesRef(term.text()),\n                false);\n            if (docsEnum != null) {\n              int docId;\n              if ((docId = docsEnum.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n                doc = reader.document(docId);\n              }\n            }\n          }\n          if( doc != null ) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField( fieldName );\n              if( fld != null ) {\n                f.add( \"index\", getFieldFlags( fld ) );\n              }\n              else {\n                // it is a non-stored field...\n                f.add( \"index\", \"(unstored field)\" );\n              }\n            }\n            catch( Exception ex ) {\n              log.warn( \"error reading field: \"+fieldName );\n            }\n          }\n          f.add(\"docs\", terms.getDocCount());\n        }\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n\n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n\n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1d3fc16fcae9731e1c7daeb852db4add07352d2","date":1334736427,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        Document doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        Document doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        Document doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        Document doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(reader, fieldName, terms);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<String>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<String>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    AtomicReader reader = searcher.getAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"841bd57e47823c6d9e8b48e428a7d82a610355c2","date":1438621609,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              StorableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n          fieldMap.add(\"docs\", terms.getDocCount());\n        }\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        // In the pre-4.0 days, this did a veeeery expensive range query. But we can be much faster now,\n        // so just do this all the time.\n        StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n\n        if( doc != null ) {\n          // Found a document with this field\n          try {\n            StorableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              fieldMap.add(\"index\", getFieldFlags(fld));\n            }\n            else {\n              // it is a non-stored field...\n              fieldMap.add(\"index\", \"(unstored field)\");\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["acc330484164451731709905e975dbfeff0cbf3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acc330484164451731709905e975dbfeff0cbf3a","date":1438623180,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              StorableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              StorableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n          fieldMap.add(\"docs\", terms.getDocCount());\n        }\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":["841bd57e47823c6d9e8b48e428a7d82a610355c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          StoredDocument doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              StorableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getLeafReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.fields().terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrQueryRequest).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: {}\", fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(SolrQueryRequest req)\n      throws Exception {\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    SolrParams params = req.getParams();\n\n    Set<String> fields = null;\n    String fl = params.get(CommonParams.FL);\n    if (fl != null) {\n      fields = new TreeSet<>(Arrays.asList(fl.split( \"[,\\\\s]+\" )));\n    }\n\n    LeafReader reader = searcher.getSlowAtomicReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Don't be tempted to put this in the loop below, the whole point here is to alphabetize the fields!\n    Set<String> fieldNames = new TreeSet<>();\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      fieldNames.add(fieldInfo.name);\n    }\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName) && ! fields.contains(\"*\")) {\n        continue; //we're not interested in this field Still an issue here\n      }\n\n      SimpleOrderedMap<Object> fieldMap = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      fieldMap.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      fieldMap.add(\"schema\", getFieldFlags(sfield));\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        fieldMap.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n      Terms terms = reader.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, fieldMap );\n        continue;\n      }\n\n      if(sfield != null && sfield.indexed() ) {\n        if (params.getBool(INCLUDE_INDEX_FIELD_FLAGS,true)) {\n          Document doc = getFirstLiveDoc(terms, reader);\n\n          if (doc != null) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField(fieldName);\n              if (fld != null) {\n                fieldMap.add(\"index\", getFieldFlags(fld));\n              } else {\n                // it is a non-stored field...\n                fieldMap.add(\"index\", \"(unstored field)\");\n              }\n            } catch (Exception ex) {\n              log.warn(\"error reading field: \" + fieldName);\n            }\n          }\n        }\n        fieldMap.add(\"docs\", terms.getDocCount());\n      }\n      if (fields != null && (fields.contains(fieldName) || fields.contains(\"*\"))) {\n        getDetailedFieldInfo(req, fieldName, fieldMap);\n      }\n      // Add the field\n      finfo.add( fieldName, fieldMap );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"acc330484164451731709905e975dbfeff0cbf3a":["841bd57e47823c6d9e8b48e428a7d82a610355c2"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"575e66bd4b2349209027f6801184da7fc3cba13f":["28288370235ed02234a64753cdbf0c6ec096304a"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e1d3fc16fcae9731e1c7daeb852db4add07352d2":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"28288370235ed02234a64753cdbf0c6ec096304a":["e07c409cff8701e4dc3d45934b021a949a5a8822","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","e07c409cff8701e4dc3d45934b021a949a5a8822"],"1d028314cced5858683a1bb4741423d0f934257b":["e1d3fc16fcae9731e1c7daeb852db4add07352d2","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["1d028314cced5858683a1bb4741423d0f934257b"],"841bd57e47823c6d9e8b48e428a7d82a610355c2":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["e1d3fc16fcae9731e1c7daeb852db4add07352d2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e07c409cff8701e4dc3d45934b021a949a5a8822","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acc330484164451731709905e975dbfeff0cbf3a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"acc330484164451731709905e975dbfeff0cbf3a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["e1d3fc16fcae9731e1c7daeb852db4add07352d2"],"28288370235ed02234a64753cdbf0c6ec096304a":["575e66bd4b2349209027f6801184da7fc3cba13f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["841bd57e47823c6d9e8b48e428a7d82a610355c2"],"e1d3fc16fcae9731e1c7daeb852db4add07352d2":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"841bd57e47823c6d9e8b48e428a7d82a610355c2":["acc330484164451731709905e975dbfeff0cbf3a"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e07c409cff8701e4dc3d45934b021a949a5a8822","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}