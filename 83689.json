{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeDecimalInterval(int,int,int).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeDecimalInterval(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeInterval(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal (base 10)\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if &gt; 0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed (any number of leading 0s is accepted)\n   * @exception IllegalArgumentException if min &gt; max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeDecimalInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    Automaton.Builder builder = new Automaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    between(builder, x, y, 0, initials, digits <= 0);\n\n    Automaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if &gt; 0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed (any number of leading 0s is accepted)\n   * @exception IllegalArgumentException if min &gt; max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    Automaton.Builder builder = new Automaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    between(builder, x, y, 0, initials, digits <= 0);\n\n    Automaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeDecimalInterval(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeInterval(int,int,int).mjava","sourceNew":"  /**\n   * Returns a new automaton that accepts strings representing decimal (base 10)\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if &gt; 0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed (any number of leading 0s is accepted)\n   * @exception IllegalArgumentException if min &gt; max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeDecimalInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    Automaton.Builder builder = new Automaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    between(builder, x, y, 0, initials, digits <= 0);\n\n    Automaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","sourceOld":"  /**\n   * Returns a new automaton that accepts strings representing decimal\n   * non-negative integers in the given interval.\n   * \n   * @param min minimal value of interval\n   * @param max maximal value of interval (both end points are included in the\n   *          interval)\n   * @param digits if &gt; 0, use fixed number of digits (strings must be prefixed\n   *          by 0's to obtain the right length) - otherwise, the number of\n   *          digits is not fixed (any number of leading 0s is accepted)\n   * @exception IllegalArgumentException if min &gt; max or if numbers in the\n   *              interval cannot be expressed with the given fixed number of\n   *              digits\n   */\n  public static Automaton makeInterval(int min, int max, int digits)\n      throws IllegalArgumentException {\n    String x = Integer.toString(min);\n    String y = Integer.toString(max);\n    if (min > max || (digits > 0 && y.length() > digits)) {\n      throw new IllegalArgumentException();\n    }\n    int d;\n    if (digits > 0) d = digits;\n    else d = y.length();\n    StringBuilder bx = new StringBuilder();\n    for (int i = x.length(); i < d; i++) {\n      bx.append('0');\n    }\n    bx.append(x);\n    x = bx.toString();\n    StringBuilder by = new StringBuilder();\n    for (int i = y.length(); i < d; i++) {\n      by.append('0');\n    }\n    by.append(y);\n    y = by.toString();\n\n    Automaton.Builder builder = new Automaton.Builder();\n\n    if (digits <= 0) {\n      // Reserve the \"real\" initial state:\n      builder.createState();\n    }\n\n    Collection<Integer> initials = new ArrayList<>();\n\n    between(builder, x, y, 0, initials, digits <= 0);\n\n    Automaton a1 = builder.finish();\n\n    if (digits <= 0) {\n      a1.addTransition(0, 0, '0');\n      for (int p : initials) {\n        a1.addEpsilon(0, p);\n      }\n      a1.finishState();\n    }\n\n    return a1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}