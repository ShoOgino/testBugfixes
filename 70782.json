{"path":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","commits":[{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"/dev/null","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      ArrayUtil.quickSort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      ArrayUtil.quickSort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","sourceNew":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      ArrayUtil.quickSort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(BytesRef[]).mjava","sourceNew":null,"sourceOld":"  private void processTerms(BytesRef[] queryTerms) {\n    if (queryTerms != null) {\n      ArrayUtil.quickSort(queryTerms);\n      Map<BytesRef,Integer> tmpSet = new HashMap<BytesRef,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<BytesRef> tmpList = new ArrayList<BytesRef>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        BytesRef term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","5f4e87790277826a2aea119328600dfb07761f32","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}