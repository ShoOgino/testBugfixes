{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LocationVectorsEvaluator#doWork(Object...).mjava","commits":[{"id":"0d79d042e6ae9405a0879f96ac29d099efcdcaed","date":1536256869,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LocationVectorsEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if (objects.length == 1) {\n      //Just docs\n      if(!(objects[0] instanceof List)) {\n        throw new IOException(\"The locationVectors function expects a list of Tuples as a parameter.\");\n      } else {\n        List list = (List)objects[0];\n        if(list.size() > 0) {\n          Object o = list.get(0);\n          if(!(o instanceof Tuple)) {\n            throw new IOException(\"The locationVectors function expects a list of Tuples as a parameter.\");\n          }\n        } else {\n          throw new IOException(\"Empty list was passed as a parameter to termVectors function.\");\n        }\n      }\n\n      List<Tuple> tuples = (List<Tuple>) objects[0];\n\n      double[][] locationVectors = new double[tuples.size()][2];\n      List<String> features = new ArrayList();\n      features.add(\"lat\");\n      features.add(\"long\");\n\n      List<String> rowLabels = new ArrayList();\n\n      for(int i=0; i< tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        String value = tuple.getString(field);\n        String[] latLong = null;\n        if(value.contains(\",\")) {\n          latLong = value.split(\",\");\n        } else {\n          latLong = value.split(\" \");\n        }\n\n        locationVectors[i][0] = Double.parseDouble(latLong[0].trim());\n        locationVectors[i][1] = Double.parseDouble(latLong[1].trim());\n        if(tuple.get(\"id\") != null) {\n          rowLabels.add(tuple.get(\"id\").toString());\n        }\n      }\n\n      Matrix matrix = new Matrix(locationVectors);\n      matrix.setColumnLabels(features);\n      matrix.setRowLabels(rowLabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The termVectors function takes a single positional parameter.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18a15df61e77dcf4309901ebbe40a57eda9fb55","date":1536349354,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LatLonVectorsEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/LocationVectorsEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if (objects.length == 1) {\n      //Just docs\n      if(!(objects[0] instanceof List)) {\n        throw new IOException(\"The latlonVectors function expects a list of Tuples as a parameter.\");\n      } else {\n        List list = (List)objects[0];\n        if(list.size() > 0) {\n          Object o = list.get(0);\n          if(!(o instanceof Tuple)) {\n            throw new IOException(\"The latlonVectors function expects a list of Tuples as a parameter.\");\n          }\n        } else {\n          throw new IOException(\"Empty list was passed as a parameter to termVectors function.\");\n        }\n      }\n\n      List<Tuple> tuples = (List<Tuple>) objects[0];\n\n      double[][] locationVectors = new double[tuples.size()][2];\n      List<String> features = new ArrayList();\n      features.add(\"lat\");\n      features.add(\"lon\");\n\n      List<String> rowLabels = new ArrayList();\n\n      for(int i=0; i< tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        String value = tuple.getString(field);\n        String[] latLong = null;\n        if(value.contains(\",\")) {\n          latLong = value.split(\",\");\n        } else {\n          latLong = value.split(\" \");\n        }\n\n        locationVectors[i][0] = Double.parseDouble(latLong[0].trim());\n        locationVectors[i][1] = Double.parseDouble(latLong[1].trim());\n        if(tuple.get(\"id\") != null) {\n          rowLabels.add(tuple.get(\"id\").toString());\n        }\n      }\n\n      Matrix matrix = new Matrix(locationVectors);\n      matrix.setColumnLabels(features);\n      matrix.setRowLabels(rowLabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The latlonVectors function takes a single positional parameter.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... objects) throws IOException {\n\n    if (objects.length == 1) {\n      //Just docs\n      if(!(objects[0] instanceof List)) {\n        throw new IOException(\"The locationVectors function expects a list of Tuples as a parameter.\");\n      } else {\n        List list = (List)objects[0];\n        if(list.size() > 0) {\n          Object o = list.get(0);\n          if(!(o instanceof Tuple)) {\n            throw new IOException(\"The locationVectors function expects a list of Tuples as a parameter.\");\n          }\n        } else {\n          throw new IOException(\"Empty list was passed as a parameter to termVectors function.\");\n        }\n      }\n\n      List<Tuple> tuples = (List<Tuple>) objects[0];\n\n      double[][] locationVectors = new double[tuples.size()][2];\n      List<String> features = new ArrayList();\n      features.add(\"lat\");\n      features.add(\"long\");\n\n      List<String> rowLabels = new ArrayList();\n\n      for(int i=0; i< tuples.size(); i++) {\n        Tuple tuple = tuples.get(i);\n        String value = tuple.getString(field);\n        String[] latLong = null;\n        if(value.contains(\",\")) {\n          latLong = value.split(\",\");\n        } else {\n          latLong = value.split(\" \");\n        }\n\n        locationVectors[i][0] = Double.parseDouble(latLong[0].trim());\n        locationVectors[i][1] = Double.parseDouble(latLong[1].trim());\n        if(tuple.get(\"id\") != null) {\n          rowLabels.add(tuple.get(\"id\").toString());\n        }\n      }\n\n      Matrix matrix = new Matrix(locationVectors);\n      matrix.setColumnLabels(features);\n      matrix.setRowLabels(rowLabels);\n      return matrix;\n    } else {\n      throw new IOException(\"The termVectors function takes a single positional parameter.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e18a15df61e77dcf4309901ebbe40a57eda9fb55":["0d79d042e6ae9405a0879f96ac29d099efcdcaed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d79d042e6ae9405a0879f96ac29d099efcdcaed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e18a15df61e77dcf4309901ebbe40a57eda9fb55"]},"commit2Childs":{"e18a15df61e77dcf4309901ebbe40a57eda9fb55":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d79d042e6ae9405a0879f96ac29d099efcdcaed"],"0d79d042e6ae9405a0879f96ac29d099efcdcaed":["e18a15df61e77dcf4309901ebbe40a57eda9fb55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}