{"path":"src/java/org/apache/lucene/analysis/Analyzer#setOverridesTokenStreamMethod(Class).mjava","commits":[{"id":"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b","date":1247589138,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#setOverridesTokenStreamMethod(Class).mjava","pathOld":"/dev/null","sourceNew":"  /** @deprecated This is only present to preserve\n   *  back-compat of classes that subclass a core analyzer\n   *  and override tokenStream but not reusableTokenStream */\n  protected void setOverridesTokenStreamMethod(Class baseClass) {\n\n    final Class[] params = new Class[2];\n    params[0] = String.class;\n    params[1] = Reader.class;\n    \n    try {\n      Method m = this.getClass().getMethod(\"tokenStream\", params);\n      if (m != null) {\n        overridesTokenStreamMethod = m.getDeclaringClass() != baseClass;\n      } else {\n        overridesTokenStreamMethod = false;\n      }\n    } catch (NoSuchMethodException nsme) {\n      overridesTokenStreamMethod = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#setOverridesTokenStreamMethod(Class[#-extends-Analyzer]).mjava","pathOld":"src/java/org/apache/lucene/analysis/Analyzer#setOverridesTokenStreamMethod(Class).mjava","sourceNew":"  /** @deprecated This is only present to preserve\n   *  back-compat of classes that subclass a core analyzer\n   *  and override tokenStream but not reusableTokenStream */\n  protected void setOverridesTokenStreamMethod(Class<? extends Analyzer> baseClass) {\n    try {\n      Method m = this.getClass().getMethod(\"tokenStream\", String.class, Reader.class);\n      overridesTokenStreamMethod = m.getDeclaringClass() != baseClass;\n    } catch (NoSuchMethodException nsme) {\n      // cannot happen, as baseClass is subclass of Analyzer through generics\n      overridesTokenStreamMethod = false;\n    }\n  }\n\n","sourceOld":"  /** @deprecated This is only present to preserve\n   *  back-compat of classes that subclass a core analyzer\n   *  and override tokenStream but not reusableTokenStream */\n  protected void setOverridesTokenStreamMethod(Class baseClass) {\n\n    final Class[] params = new Class[2];\n    params[0] = String.class;\n    params[1] = Reader.class;\n    \n    try {\n      Method m = this.getClass().getMethod(\"tokenStream\", params);\n      if (m != null) {\n        overridesTokenStreamMethod = m.getDeclaringClass() != baseClass;\n      } else {\n        overridesTokenStreamMethod = false;\n      }\n    } catch (NoSuchMethodException nsme) {\n      overridesTokenStreamMethod = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["d66301bc45f6e3ffc51d21dc8bd48290d58aad7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d66301bc45f6e3ffc51d21dc8bd48290d58aad7b"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}