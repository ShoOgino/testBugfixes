{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","commits":[{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Map<String, Object> toMap() {\n      Map<String, Object> topLevel = new LinkedHashMap<>();\n      Stream.of(Handler.values())\n          .filter(it -> name == null || it.name.equals(name))\n          .forEach(it -> {\n            Object val = it.fun.apply(this);\n            if (val != null) topLevel.put(it.name, val);\n          });\n      return topLevel;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac1922a6e5b4d1ec298c612640d012484d4e022","date":1461304949,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.getValue() != null)\n          .collect(Collectors.toMap(\n              Pair::getKey,\n              Pair::getValue,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      Map<String, Object> topLevel = new LinkedHashMap<>();\n      Stream.of(Handler.values())\n          .filter(it -> name == null || it.name.equals(name))\n          .forEach(it -> {\n            Object val = it.fun.apply(this);\n            if (val != null) topLevel.put(it.name, val);\n          });\n      return topLevel;\n    }\n\n","bugFix":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da7373b6df772f51a66550c8080379e9ddf2e7db","date":1462690671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.second() != null)\n          .collect(Collectors.toMap(\n              Pair::first,\n              Pair::second,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.getValue() != null)\n          .collect(Collectors.toMap(\n              Pair::getKey,\n              Pair::getValue,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.second() != null)\n          .collect(Collectors.toMap(\n              Pair::first,\n              Pair::second,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.getValue() != null)\n          .collect(Collectors.toMap(\n              Pair::getKey,\n              Pair::getValue,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":"    @Override\n    public Map<String, Object> toMap(Map<String, Object> map) {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.second() != null)\n          .collect(Collectors.toMap(\n              Pair::first,\n              Pair::second,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.second() != null)\n          .collect(Collectors.toMap(\n              Pair::first,\n              Pair::second,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.second() != null)\n          .collect(Collectors.toMap(\n              Pair::first,\n              Pair::second,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema.SchemaProps#toMap().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Map<String, Object> toMap() {\n      return Stream.of(Handler.values())\n          .filter(it -> name == null || it.nameLower.equals(name))\n          .map(it -> new Pair<>(it.realName, it.fun.apply(this)))\n          .filter(it->it.getValue() != null)\n          .collect(Collectors.toMap(\n              Pair::getKey,\n              Pair::getValue,\n              (v1, v2) -> v2,\n              LinkedHashMap::new));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["da7373b6df772f51a66550c8080379e9ddf2e7db","1f1f31880696765d6aec499d3b01fa501129af45"],"1f1f31880696765d6aec499d3b01fa501129af45":["da7373b6df772f51a66550c8080379e9ddf2e7db"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["9ac1922a6e5b4d1ec298c612640d012484d4e022","da7373b6df772f51a66550c8080379e9ddf2e7db"],"da7373b6df772f51a66550c8080379e9ddf2e7db":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ac1922a6e5b4d1ec298c612640d012484d4e022","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"da7373b6df772f51a66550c8080379e9ddf2e7db":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","e66a459d38c1c4a2f97128433dab546f683a9fed"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["e66a459d38c1c4a2f97128433dab546f683a9fed","da7373b6df772f51a66550c8080379e9ddf2e7db","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}