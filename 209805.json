{"path":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","commits":[{"id":"57ad8ee2555a290f9ce56ba46049309968819d93","date":1306403052,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074","date":1323052749,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#isSeparateNormsFile(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   * @deprecated only for asserting\n   */\n  @Deprecated\n  private static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(\"s[0-9]+\", ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#isSeparateNormsFile(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   * @deprecated only for asserting\n   */\n  @Deprecated\n  private static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(\"s[0-9]+\", ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#isSeparateNormsFile(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#isSeparateNormsFile(String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   * @deprecated only for asserting\n   */\n  @Deprecated\n  private static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(\"s[0-9]+\", ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the separate norms file\n   * pattern: {@code SEPARATE_NORMS_EXTENSION + \"[0-9]+\"}.\n   */\n  public static boolean isSeparateNormsFile(String filename) {\n    int idx = filename.lastIndexOf('.');\n    if (idx == -1) return false;\n    String ext = filename.substring(idx + 1);\n    return Pattern.matches(SEPARATE_NORMS_EXTENSION + \"[0-9]+\", ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["57ad8ee2555a290f9ce56ba46049309968819d93","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57ad8ee2555a290f9ce56ba46049309968819d93"],"57ad8ee2555a290f9ce56ba46049309968819d93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["57ad8ee2555a290f9ce56ba46049309968819d93","ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["57ad8ee2555a290f9ce56ba46049309968819d93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57ad8ee2555a290f9ce56ba46049309968819d93"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"57ad8ee2555a290f9ce56ba46049309968819d93":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3615ce4a1f785ae1b779244de52c6a7d99227e60","ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","57ad8ee2555a290f9ce56ba46049309968819d93","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae7b1abd869bbf7d8ae72b0e7ae3852b363bb074":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}