{"path":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6f8c3d337834ee97f781b9c888c387ee06d558","date":1310727643,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abad9f9da3e1a25fe52dd31439ed7d11af1440a5","date":1330117371,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<String>();\n    List<String> propertyRefs = new ArrayList<String>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#substituteProperty(String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#substituteProperty(String,Properties).mjava","sourceNew":"  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<>();\n    List<String> propertyRefs = new ArrayList<>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String substituteProperty(String value, Properties coreProperties) {\n    if (value == null || value.indexOf('$') == -1) {\n      return value;\n    }\n\n    List<String> fragments = new ArrayList<>();\n    List<String> propertyRefs = new ArrayList<>();\n    parsePropertyString(value, fragments, propertyRefs);\n\n    StringBuilder sb = new StringBuilder();\n    Iterator<String> i = fragments.iterator();\n    Iterator<String> j = propertyRefs.iterator();\n\n    while (i.hasNext()) {\n      String fragment = i.next();\n      if (fragment == null) {\n        String propertyName = j.next();\n        String defaultValue = null;\n        int colon_index = propertyName.indexOf(':');\n        if (colon_index > -1) {\n          defaultValue = propertyName.substring(colon_index + 1);\n          propertyName = propertyName.substring(0,colon_index);\n        }\n        if (coreProperties != null) {\n          fragment = coreProperties.getProperty(propertyName);\n        }\n        if (fragment == null) {\n          fragment = System.getProperty(propertyName, defaultValue);\n        }\n        if (fragment == null) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"No system property or default value specified for \" + propertyName + \" value:\" + value);\n        }\n      }\n      sb.append(fragment);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["aa6f8c3d337834ee97f781b9c888c387ee06d558"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["aa6f8c3d337834ee97f781b9c888c387ee06d558","abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa6f8c3d337834ee97f781b9c888c387ee06d558":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["e6a2315ba749856e5787b2ad962fa124bc3ed121","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aa6f8c3d337834ee97f781b9c888c387ee06d558"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"aa6f8c3d337834ee97f781b9c888c387ee06d558":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}