{"path":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getFactory());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getFactory());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size) {\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      int type = fields[i].getType();\n      if (type!=SortField.SCORE && type!=SortField.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fieldname, fields[i]\n          .getType(), fields[i].getLocale(), fields[i].getComparatorSource());\n\n     if (fields[i].getType() == SortField.STRING) {\n        this.fields[i] = new SortField(fieldname, fields[i].getLocale(),\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}