{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseOptimize().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling optimize when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseOptimize() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as unoptimized at this\n    // point:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real optimize\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as unoptimized:\n    assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir, true);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb","date":1327857831,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    IndexReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitOnCloseForceMerge().mjava","sourceNew":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Verify that calling forceMerge when writer is open for\n   * \"commit on close\" works correctly both for rollback()\n   * and close().\n   */\n  public void testCommitOnCloseForceMerge() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    // Must disable throwing exc on double-write: this\n    // test uses IW.rollback which easily results in\n    // writing to same file more than once\n    dir.setPreventDoubleWrite(false);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int j=0;j<17;j++) {\n      TestIndexWriter.addDocWithIndex(writer, j);\n    }\n    writer.close();\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n\n    // Open a reader before closing (commiting) the writer:\n    DirectoryReader reader = IndexReader.open(dir);\n\n    // Reader should see index as multi-seg at this\n    // point:\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    // Abort the writer:\n    writer.rollback();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should still see index as multi-segment\n    assertTrue(\"Reader incorrectly sees one segment\", reader.getSequentialSubReaders().length > 1);\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: do real full merge\");\n    }\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: writer closed\");\n    }\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"aborted writer after forceMerge\");\n\n    // Open a reader after aborting writer:\n    reader = IndexReader.open(dir);\n\n    // Reader should see index as one segment\n    assertEquals(\"Reader incorrectly sees more than one segment\", 1, reader.getSequentialSubReaders().length);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","3a81e1267c45ab68de86e86ac4b4c99e6e628ceb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a81e1267c45ab68de86e86ac4b4c99e6e628ceb","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3a81e1267c45ab68de86e86ac4b4c99e6e628ceb":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}