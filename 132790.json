{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","commits":[{"id":"975cb787e66d548dba4f63c22c08d692c7235f73","date":1174605228,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(File).mjava","sourceNew":"  /**\r\n   * Read config from file containing both algorithm and config properties.\r\n   * @param algFile file containing both algorithm and config properties.\r\n   * @throws IOException\r\n   */\r\n  public Config (Reader algReader) throws IOException {\r\n    // read alg file to array of lines\r\n    ArrayList lines = new ArrayList();\r\n    BufferedReader r = new BufferedReader(algReader);\r\n    int lastConfigLine=0;\r\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\r\n      lines.add(line);\r\n      if (line.indexOf('=')>0) {\r\n        lastConfigLine = lines.size();\r\n      }\r\n    }\r\n    r.close();\r\n    // copy props lines to string\r\n    StringBuffer sb = new StringBuffer();\r\n    for (int i=0; i<lastConfigLine; i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    // read props from string\r\n    this.props = new Properties();\r\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\r\n\r\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\r\n      printProps();\r\n    }\r\n    \r\n    // copy algorithm lines\r\n    sb = new StringBuffer();\r\n    for (int i=lastConfigLine; i<lines.size(); i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    algorithmText = sb.toString();\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Read config from file containing both algorithm and config properties.\r\n   * @param algFile file containing both algorithm and config properties.\r\n   * @throws IOException\r\n   */\r\n  public Config (File algFile) throws IOException {\r\n    // read alg file to array of lines\r\n    ArrayList lines = new ArrayList();\r\n    BufferedReader r = new BufferedReader(new FileReader(algFile));\r\n    int lastConfigLine=0;\r\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\r\n      lines.add(line);\r\n      if (line.indexOf('=')>0) {\r\n        lastConfigLine = lines.size();\r\n      }\r\n    }\r\n    r.close();\r\n    // copy props lines to string\r\n    StringBuffer sb = new StringBuffer();\r\n    for (int i=0; i<lastConfigLine; i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    // read props from string\r\n    this.props = new Properties();\r\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\r\n\r\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\r\n      printProps();\r\n    }\r\n    \r\n    // copy algorithm lines\r\n    sb = new StringBuffer();\r\n    for (int i=lastConfigLine; i<lines.size(); i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    algorithmText = sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5d405c425acd995b94fac218d47b5dc7969d031","date":1174672569,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\r\n   * Read both algorithm and config properties.\r\n   * @param algReader from where to read algorithm and config properties.\r\n   * @throws IOException\r\n   */\r\n  public Config (Reader algReader) throws IOException {\r\n    // read alg file to array of lines\r\n    ArrayList lines = new ArrayList();\r\n    BufferedReader r = new BufferedReader(algReader);\r\n    int lastConfigLine=0;\r\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\r\n      lines.add(line);\r\n      if (line.indexOf('=')>0) {\r\n        lastConfigLine = lines.size();\r\n      }\r\n    }\r\n    r.close();\r\n    // copy props lines to string\r\n    StringBuffer sb = new StringBuffer();\r\n    for (int i=0; i<lastConfigLine; i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    // read props from string\r\n    this.props = new Properties();\r\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\r\n\r\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\r\n      printProps();\r\n    }\r\n    \r\n    // copy algorithm lines\r\n    sb = new StringBuffer();\r\n    for (int i=lastConfigLine; i<lines.size(); i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    algorithmText = sb.toString();\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Read config from file containing both algorithm and config properties.\r\n   * @param algFile file containing both algorithm and config properties.\r\n   * @throws IOException\r\n   */\r\n  public Config (Reader algReader) throws IOException {\r\n    // read alg file to array of lines\r\n    ArrayList lines = new ArrayList();\r\n    BufferedReader r = new BufferedReader(algReader);\r\n    int lastConfigLine=0;\r\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\r\n      lines.add(line);\r\n      if (line.indexOf('=')>0) {\r\n        lastConfigLine = lines.size();\r\n      }\r\n    }\r\n    r.close();\r\n    // copy props lines to string\r\n    StringBuffer sb = new StringBuffer();\r\n    for (int i=0; i<lastConfigLine; i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    // read props from string\r\n    this.props = new Properties();\r\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\r\n\r\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\r\n      printProps();\r\n    }\r\n    \r\n    // copy algorithm lines\r\n    sb = new StringBuffer();\r\n    for (int i=lastConfigLine; i<lines.size(); i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    algorithmText = sb.toString();\r\n  }\r\n\n","bugFix":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList lines = new ArrayList();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\r\n   * Read both algorithm and config properties.\r\n   * @param algReader from where to read algorithm and config properties.\r\n   * @throws IOException\r\n   */\r\n  public Config (Reader algReader) throws IOException {\r\n    // read alg file to array of lines\r\n    ArrayList lines = new ArrayList();\r\n    BufferedReader r = new BufferedReader(algReader);\r\n    int lastConfigLine=0;\r\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\r\n      lines.add(line);\r\n      if (line.indexOf('=')>0) {\r\n        lastConfigLine = lines.size();\r\n      }\r\n    }\r\n    r.close();\r\n    // copy props lines to string\r\n    StringBuffer sb = new StringBuffer();\r\n    for (int i=0; i<lastConfigLine; i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    // read props from string\r\n    this.props = new Properties();\r\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\r\n\r\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\r\n      printProps();\r\n    }\r\n    \r\n    // copy algorithm lines\r\n    sb = new StringBuffer();\r\n    for (int i=lastConfigLine; i<lines.size(); i++) {\r\n      sb.append(lines.get(i));\r\n      sb.append(NEW_LINE);\r\n    }\r\n    algorithmText = sb.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339649314325b0679cb210f81ef890b6b3ddba12","date":1182926978,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList lines = new ArrayList();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\")==null) {\n      props.setProperty(\"work.dir\",System.getProperty(\"benchmark.work.dir\",\"work\"));\n    }\n    \n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList lines = new ArrayList();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\")==null) {\n      props.setProperty(\"work.dir\",System.getProperty(\"benchmark.work.dir\",\"work\"));\n    }\n    \n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList lines = new ArrayList();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\")==null) {\n      props.setProperty(\"work.dir\",System.getProperty(\"benchmark.work.dir\",\"work\"));\n    }\n    \n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\")==null) {\n      props.setProperty(\"work.dir\",System.getProperty(\"benchmark.work.dir\",\"work\"));\n    }\n    \n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config (Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine=0;\n    for (String line = r.readLine(); line!=null; line=r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=')>0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuffer sb = new StringBuffer();\n    for (int i=0; i<lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\")==null) {\n      props.setProperty(\"work.dir\",System.getProperty(\"benchmark.work.dir\",\"work\"));\n    }\n    \n    if (Boolean.valueOf(props.getProperty(\"print.props\",\"true\")).booleanValue()) {\n      printProps();\n    }\n    \n    // copy algorithm lines\n    sb = new StringBuffer();\n    for (int i=lastConfigLine; i<lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"975cb787e66d548dba4f63c22c08d692c7235f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["339649314325b0679cb210f81ef890b6b3ddba12"],"e5d405c425acd995b94fac218d47b5dc7969d031":["975cb787e66d548dba4f63c22c08d692c7235f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["e5d405c425acd995b94fac218d47b5dc7969d031"],"339649314325b0679cb210f81ef890b6b3ddba12":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"975cb787e66d548dba4f63c22c08d692c7235f73":["e5d405c425acd995b94fac218d47b5dc7969d031"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["975cb787e66d548dba4f63c22c08d692c7235f73"],"e5d405c425acd995b94fac218d47b5dc7969d031":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["339649314325b0679cb210f81ef890b6b3ddba12"],"339649314325b0679cb210f81ef890b6b3ddba12":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}