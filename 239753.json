{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","commits":[{"id":"3a5582df130621a89a150891fa2fa492fdce73e0","date":1332126832,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Resets the scanner to read from a new input stream.\r\n   * Does not close the old reader.\r\n   *\r\n   * All internal variables are reset, the old input stream \r\n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\r\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\r\n   *\r\n   * Internal scan buffer is resized down to its initial length, if it has grown.\r\n   *\r\n   * @param reader   the new input stream \r\n   */\r\n  public final void yyreset(java.io.Reader reader) {\r\n    zzReader = reader;\r\n    zzAtBOL  = true;\r\n    zzAtEOF  = false;\r\n    zzEOFDone = false;\r\n    zzEndRead = zzStartRead = 0;\r\n    zzCurrentPos = zzMarkedPos = 0;\r\n    yyline = yychar = yycolumn = 0;\r\n    zzLexicalState = YYINITIAL;\r\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\r\n      zzBuffer = new char[ZZ_BUFFERSIZE];\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\r\n   * Resets the scanner to read from a new input stream.\r\n   * Does not close the old reader.\r\n   *\r\n   * All internal variables are reset, the old input stream \r\n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\r\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\r\n   *\r\n   * Internal scan buffer is resized down to its initial length, if it has grown.\r\n   *\r\n   * @param reader   the new input stream \r\n   */\r\n  public final void yyreset(java.io.Reader reader) {\r\n    zzReader = reader;\r\n    zzAtBOL  = true;\r\n    zzAtEOF  = false;\r\n    zzEOFDone = false;\r\n    zzEndRead = zzStartRead = 0;\r\n    zzCurrentPos = zzMarkedPos = 0;\r\n    yyline = yychar = yycolumn = 0;\r\n    zzLexicalState = YYINITIAL;\r\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\r\n      zzBuffer = new char[ZZ_BUFFERSIZE];\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#yyreset(java.io.Reader).mjava","sourceNew":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","sourceOld":"  /**\n   * Resets the scanner to read from a new input stream.\n   * Does not close the old reader.\n   *\n   * All internal variables are reset, the old input stream \n   * <b>cannot</b> be reused (internal buffer is discarded and lost).\n   * Lexical state is set to <tt>ZZ_INITIAL</tt>.\n   *\n   * Internal scan buffer is resized down to its initial length, if it has grown.\n   *\n   * @param reader   the new input stream \n   */\n  public final void yyreset(java.io.Reader reader) {\n    zzReader = reader;\n    zzAtBOL  = true;\n    zzAtEOF  = false;\n    zzEOFDone = false;\n    zzEndRead = zzStartRead = 0;\n    zzCurrentPos = zzMarkedPos = 0;\n    yyline = yychar = yycolumn = 0;\n    zzLexicalState = YYINITIAL;\n    if (zzBuffer.length > ZZ_BUFFERSIZE)\n      zzBuffer = new char[ZZ_BUFFERSIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"3a5582df130621a89a150891fa2fa492fdce73e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["3a5582df130621a89a150891fa2fa492fdce73e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a5582df130621a89a150891fa2fa492fdce73e0":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a5582df130621a89a150891fa2fa492fdce73e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}