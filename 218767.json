{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","commits":[{"id":"7e477c2108982ba9974f73aa8800270c75cb4971","date":1327277332,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset+delta, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["07904fa7a96affc72ebc1658bdbbe4c227843a11","b8851e523e638323ef17b2c8e44eb34ba16365e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset+delta, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset+delta, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8851e523e638323ef17b2c8e44eb34ba16365e0","date":1328091897,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset+delta, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","bugFix":["7e477c2108982ba9974f73aa8800270c75cb4971"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // we have a buffered character, add an offset correction and return it\n    if (bufferedCh >= 0) {\n      int ch = bufferedCh;\n      bufferedCh = -1;\n      currentOffset++;\n      \n      addOffCorrectMap(currentOffset, delta-1);\n      delta--;\n      return ch;\n    }\n    \n    // otherwise actually read one    \n    int ch = in.read();\n    if (ch < 0)\n      return ch;\n    \n    currentOffset++;\n    if ((ch % 10) != remainder || Character.isHighSurrogate((char)ch) || Character.isLowSurrogate((char)ch)) {\n      return ch;\n    }\n    \n    // we will double this character, so buffer it.\n    bufferedCh = ch;\n    return ch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e477c2108982ba9974f73aa8800270c75cb4971"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b8851e523e638323ef17b2c8e44eb34ba16365e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e477c2108982ba9974f73aa8800270c75cb4971"],"b8851e523e638323ef17b2c8e44eb34ba16365e0":["7e477c2108982ba9974f73aa8800270c75cb4971"],"7e477c2108982ba9974f73aa8800270c75cb4971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7e477c2108982ba9974f73aa8800270c75cb4971"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b8851e523e638323ef17b2c8e44eb34ba16365e0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e477c2108982ba9974f73aa8800270c75cb4971":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b8851e523e638323ef17b2c8e44eb34ba16365e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}