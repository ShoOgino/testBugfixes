{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,ConditionType,String).mjava","sourceNew":"  private List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","sourceOld":"  private List readListVal(Map m, List val, ConditionType varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","sourceNew":"  private static List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","sourceOld":"  private List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","sourceNew":"  private static List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","sourceOld":"  private List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","sourceOld":"  private static List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#readListVal(Map,List,Type,String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static List readListVal(Map m, List val, Type varType, String conditionName) {\n    List list = val;\n    list = (List) list.stream()\n        .map(it -> varType.validate(conditionName, it, true))\n        .map(it -> {\n          if (it instanceof String) {\n            String trim = ((String) it).trim();\n            if (trim.isEmpty())\n              throw new IllegalArgumentException(formatString(\"{0} cannot have an empty string value in clause : {1}\",\n                  conditionName, toJSONString(m)));\n            return trim;\n          } else return it;\n        }).filter(it -> it == null ? false : true)\n        .collect(Collectors.toList());\n    if (list.isEmpty())\n      throw new IllegalArgumentException(formatString(\"{0} cannot have an empty list value in clause : {1}\",\n          conditionName, toJSONString(m)));\n    for (Object o : list) {\n      if (o instanceof String) {\n        if (getOperand((String) o) != EQUAL) {\n          throw new IllegalArgumentException(formatString(\"No operators are supported in collection values in condition : {0} in clause : {1}\",\n              conditionName, toJSONString(m)));\n        }\n      }\n    }\n    if (list.size() < 2) {\n      throw new IllegalArgumentException(formatString(\"Array should have more than one value in  condition : {0} in clause : {1}\",\n          conditionName, toJSONString(m)));\n\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["427edb17549d4bb82462a16eec4ee0533d12d5b7","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"527adea7ce767368d7317339023e18e39702132e":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}