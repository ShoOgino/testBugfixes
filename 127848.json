{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":null,"sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["3cc749c053615f5871f3b95715fe292f34e70a53","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}