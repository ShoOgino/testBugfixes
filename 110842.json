{"path":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","commits":[{"id":"57dea9cc0cdda318a986edb0250c26cee1e8bb19","date":1410398087,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), null, 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    int totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.count(new TermQuery(new Term(\"field\", \"aaa\")));\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testDiverseDocs().mjava","sourceNew":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.count(new TermQuery(new Term(\"field\", \"aaa\")));\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiverseDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setRAMBufferSizeMB(0.5));\n    int n = atLeast(1);\n    for(int i=0;i<n;i++) {\n      // First, docs where every term is unique (heavy on\n      // Posting instances)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        for(int k=0;k<100;k++) {\n          doc.add(newField(\"field\", Integer.toString(random().nextInt()), storedTextType));\n        }\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs (heavy on byte blocks)\n      for(int j=0;j<100;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa\", storedTextType));\n        writer.addDocument(doc);\n      }\n\n      // Next, many single term docs where only one term\n      // occurs but the terms are very long (heavy on\n      // char[] arrays)\n      for(int j=0;j<100;j++) {\n        StringBuilder b = new StringBuilder();\n        String x = Integer.toString(j) + \".\";\n        for(int k=0;k<1000;k++)\n          b.append(x);\n        String longTerm = b.toString();\n\n        Document doc = new Document();\n        doc.add(newField(\"field\", longTerm, storedTextType));\n        writer.addDocument(doc);\n      }\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    long totalHits = searcher.search(new TermQuery(new Term(\"field\", \"aaa\")), 1).totalHits;\n    assertEquals(n*100, totalHits);\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","470eaac3a77cf637b62126a5408b178d7be93eb1"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"470eaac3a77cf637b62126a5408b178d7be93eb1":["28288370235ed02234a64753cdbf0c6ec096304a"],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}