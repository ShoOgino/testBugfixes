{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE))  {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage/value\");\n          if (n != null)  ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE))  {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage/value\");\n          if (n != null)  ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      List<String> groups = new ArrayList<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.longValue());\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2369aca9d59355841bea58e4e175d90816d26148","date":1496039862,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage/value\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage/value\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE))  {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if(groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes,','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if(requestedTags.contains(DISK)){\n          Number n = (Number) Utils.getObjectByPath(m,true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if(n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if(requestedTags.contains(CORES)){\n          int count = 0;\n          Map cores  = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if(o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage/value\");\n          if (n != null)  ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE))  {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage/value\");\n          if (n != null)  ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace/value\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage/value\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage/value\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      readMetrics(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"455b47db0cfa51136fb68f261afcee3f59acb80e","date":1502982490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      readMetrics(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      readSysProps(solrNode, requestedTags, snitchContext);\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2369aca9d59355841bea58e4e175d90816d26148":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","455b47db0cfa51136fb68f261afcee3f59acb80e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2369aca9d59355841bea58e4e175d90816d26148","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["86fff6c123a5a1d38adb665dd045347219798da9"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"2369aca9d59355841bea58e4e175d90816d26148":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["2369aca9d59355841bea58e4e175d90816d26148"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["455b47db0cfa51136fb68f261afcee3f59acb80e"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86fff6c123a5a1d38adb665dd045347219798da9","28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}