{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","sourceNew":"  @Override\n  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","sourceNew":"  @Override\n  public ChildrenArrays getChildrenArrays() throws IOException {\n    ensureOpen();\n    if (childrenArrays == null) {\n      synchronized (this) {\n        if (childrenArrays == null) {\n          childrenArrays = new ChildrenArrays(getParentArray());\n        }\n      }      \n    }\n    return childrenArrays;\n  }\n\n","sourceOld":"  @Override\n  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","sourceNew":null,"sourceOld":"  @Override\n  public ChildrenArrays getChildrenArrays() throws IOException {\n    ensureOpen();\n    if (childrenArrays == null) {\n      synchronized (this) {\n        if (childrenArrays == null) {\n          childrenArrays = new ChildrenArrays(getParentArray());\n        }\n      }      \n    }\n    return childrenArrays;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","sourceNew":null,"sourceOld":"  @Override\n  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}