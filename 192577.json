{"path":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9","date":1318854139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9":["1f9f2355d68aab1348539f7a1603279405e566a4"],"6620df8541b174097b1133a4fc370adb2e570524":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}