{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","commits":[{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the specific category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/MultiAssociationsFacetsAggregator#MultiAssociationsFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link MultiAssociationsFacetsAggregator} over the given\n   * aggregators. The mapping is used by\n   * {@link #rollupValues(FacetRequest, int, int[], int[], FacetArrays)} to\n   * rollup the values of the specific category by the corresponding\n   * {@link FacetsAggregator}. However, since each {@link FacetsAggregator}\n   * handles the associations of a specific type, which could cover multiple\n   * categories, the aggregation is done on the unique set of aggregators, which\n   * are identified by their class.\n   */\n  public MultiAssociationsFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[FacetLabel,FacetsAggregator]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link FacetLabel} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<FacetLabel,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MultiFacetsAggregator#MultiFacetsAggregator(Map[CategoryPath,FacetsAggregator]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor.\n   * <p>\n   * The mapping is used to rollup the values of the specific category by the\n   * corresponding {@link FacetsAggregator}. It is ok to pass differnet\n   * {@link FacetsAggregator} instances for each {@link CategoryPath} - the\n   * constructor ensures that each aggregator <u>type</u> (determined by its\n   * class) is invoked only once.\n   */\n  public MultiFacetsAggregator(Map<CategoryPath,FacetsAggregator> aggregators) {\n    this.categoryAggregators = aggregators;\n    \n    // make sure that each FacetsAggregator class is invoked only once, or\n    // otherwise categories may be aggregated multiple times.\n    Map<Class<? extends FacetsAggregator>, FacetsAggregator> aggsClasses = \n        new HashMap<Class<? extends FacetsAggregator>,FacetsAggregator>();\n    for (FacetsAggregator fa : aggregators.values()) {\n      aggsClasses.put(fa.getClass(), fa);\n    }\n    this.aggregators = new ArrayList<FacetsAggregator>(aggsClasses.values());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}