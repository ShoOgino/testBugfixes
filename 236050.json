{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","commits":[{"id":"d97ba94eef1fc33c5451259a7aa2ac682646c1af","date":1488285427,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexCreatedVersion() throws IOException {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n      // those indexes are created by a single version so we can\n      // compare the commit version with the created version\n      if (infos.getCommitLuceneVersion().onOrAfter(Version.LUCENE_7_0_0)) {\n        assertEquals(infos.getCommitLuceneVersion(), infos.getIndexCreatedVersion());\n      } else {\n        assertNull(infos.getIndexCreatedVersion());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","sourceNew":"  public void testIndexCreatedVersion() throws IOException {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n      // those indexes are created by a single version so we can\n      // compare the commit version with the created version\n      assertEquals(infos.getCommitLuceneVersion().major, infos.getIndexCreatedVersionMajor());\n    }\n  }\n\n","sourceOld":"  public void testIndexCreatedVersion() throws IOException {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n      // those indexes are created by a single version so we can\n      // compare the commit version with the created version\n      if (infos.getCommitLuceneVersion().onOrAfter(Version.LUCENE_7_0_0)) {\n        assertEquals(infos.getCommitLuceneVersion(), infos.getIndexCreatedVersion());\n      } else {\n        assertNull(infos.getIndexCreatedVersion());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testIndexCreatedVersion().mjava","sourceNew":"  public void testIndexCreatedVersion() throws IOException {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n      // those indexes are created by a single version so we can\n      // compare the commit version with the created version\n      assertEquals(infos.getCommitLuceneVersion().major, infos.getIndexCreatedVersionMajor());\n    }\n  }\n\n","sourceOld":"  public void testIndexCreatedVersion() throws IOException {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n      // those indexes are created by a single version so we can\n      // compare the commit version with the created version\n      if (infos.getCommitLuceneVersion().onOrAfter(Version.LUCENE_7_0_0)) {\n        assertEquals(infos.getCommitLuceneVersion(), infos.getIndexCreatedVersion());\n      } else {\n        assertNull(infos.getIndexCreatedVersion());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}