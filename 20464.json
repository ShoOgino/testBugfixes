{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#checkSharedFsReplicasMovedCorrectly(List[Replica],ZkStateReader,String).mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#checkSharedFsReplicasMovedCorrectly(List[Replica],ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSharedFsReplicasMovedCorrectly(List<Replica> replacedHdfsReplicas, ZkStateReader zkStateReader, String collection){\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n    for (Replica replica :replacedHdfsReplicas) {\n      boolean found = false;\n      String dataDir = replica.getStr(\"dataDir\");\n      String ulogDir = replica.getStr(\"ulogDir\");\n      for (Replica replica2 : docCollection.getReplicas()) {\n        if (dataDir.equals(replica2.getStr(\"dataDir\")) && ulogDir.equals(replica2.getStr(\"ulogDir\"))) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) fail(\"Can not found a replica with same dataDir and ulogDir as \" + replica + \" from:\" + docCollection.getReplicas());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#checkSharedFsReplicasMovedCorrectly(List[Replica],ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSharedFsReplicasMovedCorrectly(List<Replica> replacedHdfsReplicas, ZkStateReader zkStateReader, String collection){\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n    for (Replica replica :replacedHdfsReplicas) {\n      boolean found = false;\n      String dataDir = replica.getStr(\"dataDir\");\n      String ulogDir = replica.getStr(\"ulogDir\");\n      for (Replica replica2 : docCollection.getReplicas()) {\n        if (dataDir.equals(replica2.getStr(\"dataDir\")) && ulogDir.equals(replica2.getStr(\"ulogDir\"))) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) fail(\"Can not found a replica with same dataDir and ulogDir as \" + replica + \" from:\" + docCollection.getReplicas());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#checkSharedFsReplicasMovedCorrectly(List[Replica],ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSharedFsReplicasMovedCorrectly(List<Replica> replacedHdfsReplicas, ZkStateReader zkStateReader, String collection){\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n    for (Replica replica :replacedHdfsReplicas) {\n      boolean found = false;\n      String dataDir = replica.getStr(\"dataDir\");\n      String ulogDir = replica.getStr(\"ulogDir\");\n      for (Replica replica2 : docCollection.getReplicas()) {\n        if (dataDir.equals(replica2.getStr(\"dataDir\")) && ulogDir.equals(replica2.getStr(\"ulogDir\"))) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) fail(\"Can not found a replica with same dataDir and ulogDir as \" + replica + \" from:\" + docCollection.getReplicas());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#checkSharedFsReplicasMovedCorrectly(List[Replica],ZkStateReader,String).mjava","sourceNew":null,"sourceOld":"  private void checkSharedFsReplicasMovedCorrectly(List<Replica> replacedHdfsReplicas, ZkStateReader zkStateReader, String collection){\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n    for (Replica replica :replacedHdfsReplicas) {\n      boolean found = false;\n      String dataDir = replica.getStr(\"dataDir\");\n      String ulogDir = replica.getStr(\"ulogDir\");\n      for (Replica replica2 : docCollection.getReplicas()) {\n        if (dataDir.equals(replica2.getStr(\"dataDir\")) && ulogDir.equals(replica2.getStr(\"ulogDir\"))) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) fail(\"Can not found a replica with same dataDir and ulogDir as \" + replica + \" from:\" + docCollection.getReplicas());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}