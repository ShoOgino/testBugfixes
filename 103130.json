{"path":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9a643dec490e6fffca94986d8ec75d23ddd8fd8","date":1193842023,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n          String operator = getReq().getSchema().getQueryParserDefaultOperator();\n      lparser.setDefaultOperator(\"AND\".equals(operator) ?\n                          QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getSolrQueryParser(null).getField();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n          String operator = getReq().getSchema().getSolrQueryParser(null).getField();\n      lparser.setDefaultOperator(\"AND\".equals(operator) ?\n                          QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n          String operator = getReq().getSchema().getQueryParserDefaultOperator();\n      lparser.setDefaultOperator(\"AND\".equals(operator) ?\n                          QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"783cd7519106eefcf8baddb29246a1aa2dd55011","date":1227322282,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getSolrQueryParser(null).getField();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getSolrQueryParser(null).getField();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n          String operator = getReq().getSchema().getSolrQueryParser(null).getField();\n      lparser.setDefaultOperator(\"AND\".equals(operator) ?\n                          QueryParser.Operator.AND : QueryParser.Operator.OR);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getSolrQueryParser(null).getField();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["783cd7519106eefcf8baddb29246a1aa2dd55011"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["b9a643dec490e6fffca94986d8ec75d23ddd8fd8"],"b9a643dec490e6fffca94986d8ec75d23ddd8fd8":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"783cd7519106eefcf8baddb29246a1aa2dd55011":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ad94625fb8d088209f46650c8097196fec67f00c":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["ad94625fb8d088209f46650c8097196fec67f00c"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["783cd7519106eefcf8baddb29246a1aa2dd55011"],"b9a643dec490e6fffca94986d8ec75d23ddd8fd8":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["b9a643dec490e6fffca94986d8ec75d23ddd8fd8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"783cd7519106eefcf8baddb29246a1aa2dd55011":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}