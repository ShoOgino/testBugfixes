{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","commits":[{"id":"dff0843e8b2ca3aecd360f2e6db0f777d42935ee","date":1361489674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"/dev/null","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      docMap.freeze();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      docMap.freeze();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final MonotonicAppendingLongBuffer docMap = new MonotonicAppendingLongBuffer();\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMap.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      docMap.freeze();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":null,"sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":null,"sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":null,"sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":null,"sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(int,Bits).mjava","sourceNew":null,"sourceOld":"    static DocMap build(final int maxDoc, final Bits liveDocs) {\n      assert liveDocs != null;\n      final PackedLongValues.Builder docMapBuilder = PackedLongValues.monotonicBuilder(PackedInts.COMPACT);\n      int del = 0;\n      for (int i = 0; i < maxDoc; ++i) {\n        docMapBuilder.add(i - del);\n        if (!liveDocs.get(i)) {\n          ++del;\n        }\n      }\n      final PackedLongValues docMap = docMapBuilder.build();\n      final int numDeletedDocs = del;\n      assert docMap.size() == maxDoc;\n      return new DocMap() {\n\n        @Override\n        public int get(int docID) {\n          if (!liveDocs.get(docID)) {\n            return -1;\n          }\n          return (int) docMap.get(docID);\n        }\n\n        @Override\n        public int maxDoc() {\n          return maxDoc;\n        }\n\n        @Override\n        public int numDeletedDocs() {\n          return numDeletedDocs;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"0ad30c6a479e764150a3316e57263319775f1df2":["9bb9a29a5e71a90295f175df8919802993142c9a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9bb9a29a5e71a90295f175df8919802993142c9a","0ad30c6a479e764150a3316e57263319775f1df2"],"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9bb9a29a5e71a90295f175df8919802993142c9a","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}