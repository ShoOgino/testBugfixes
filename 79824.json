{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc2b6d7a57a856c487f4394618e4742bfa38c500","date":1320707541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n        assert pos < fos.size();\n        assert fos.size() == channel.size();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","sourceNew":null,"sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n        assert pos < fos.size();\n        assert fos.size() == channel.size();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","sourceNew":null,"sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n        assert pos < fos.size();\n        assert fos.size() == channel.size();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog]#lookup(long).mjava","sourceNew":null,"sourceOld":"  /* This method is thread safe */\n  public Object lookup(long pos) {\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (fos) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n        assert pos < fos.size();\n        assert fos.size() == channel.size();\n      }\n\n      ChannelFastInputStream fis = new ChannelFastInputStream(channel, pos);\n      LogCodec codec = new LogCodec();\n      return codec.readVal(fis);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bc2b6d7a57a856c487f4394618e4742bfa38c500","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc2b6d7a57a856c487f4394618e4742bfa38c500":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bc2b6d7a57a856c487f4394618e4742bfa38c500","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bc2b6d7a57a856c487f4394618e4742bfa38c500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["bc2b6d7a57a856c487f4394618e4742bfa38c500"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"bc2b6d7a57a856c487f4394618e4742bfa38c500":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}