{"path":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"386280e99b15102fcbc24457fb3105ab27bc3b93","date":1282838065,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10","date":1285076435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs, {@link MMapDirectory} on 64-bit \n   *  Sun Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JRes on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs, {@link MMapDirectory} on 64-bit \n   *  Sun Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JRes on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b96295a82ab348e34b46fbab563908c64e0e111","date":1293404132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs, {@link MMapDirectory} on 64-bit \n   *  Sun Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JRes on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs, {@link MMapDirectory} on 64-bit \n   *  Sun Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JRes on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs, {@link MMapDirectory} on 64-bit \n   *  Sun Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JRes on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10","4b96295a82ab348e34b46fbab563908c64e0e111"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4b96295a82ab348e34b46fbab563908c64e0e111"],"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10":["386280e99b15102fcbc24457fb3105ab27bc3b93"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4b96295a82ab348e34b46fbab563908c64e0e111"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b96295a82ab348e34b46fbab563908c64e0e111":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10"],"386280e99b15102fcbc24457fb3105ab27bc3b93":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","304b0cf5f0d57c82882c9e69b0436c4f3b37cc10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10":["70ad682703b8585f5d0a637efec044d57ec05efb","4b96295a82ab348e34b46fbab563908c64e0e111","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b96295a82ab348e34b46fbab563908c64e0e111":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"386280e99b15102fcbc24457fb3105ab27bc3b93":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["386280e99b15102fcbc24457fb3105ab27bc3b93","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}