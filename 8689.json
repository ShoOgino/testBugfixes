{"path":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(\"sort\");\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ea410f5b876f6fa92ac261542678209d4a4037","date":1177884620,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(SolrParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(\"sort\");\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(SolrParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6075cf7db5ebb03b013c9110fca8f1013ba6a72","date":1196271697,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    QueryParsing.SortSpec ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.log(Level.WARNING,\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParam(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(org.apache.solr.common.params.CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req.getSchema());\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n        \n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"e6ea410f5b876f6fa92ac261542678209d4a4037":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["e6ea410f5b876f6fa92ac261542678209d4a4037"],"e6ea410f5b876f6fa92ac261542678209d4a4037":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}