{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, Supplier<String> valuesProducer) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene70DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(valuesProducer.get());\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, Supplier<String> valuesProducer) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene70DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(valuesProducer.get());\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, Supplier<String> valuesProducer) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene70DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(valuesProducer.get());\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, Supplier<String> valuesProducer) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene70DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(valuesProducer.get());\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#doTestTermsEnumRandom(int,Supplier[String]).mjava","sourceNew":null,"sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, Supplier<String> valuesProducer) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene70DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(valuesProducer.get());\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}