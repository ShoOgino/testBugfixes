{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.EverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      assert posPendingCount > 0;\n\n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["51f5280f31484820499077f41fcdfe92d527d9dc"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"51f5280f31484820499077f41fcdfe92d527d9dc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}