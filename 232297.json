{"path":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":null,"sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd2e3889d01a6a0a07edf8eba4a5e40f6b48ae4e","date":1287925305,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName(), false);\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67f565478e7109419bc81779c1fa457a6d54fb6e","date":1287927570,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName(), false);\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz))\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd2e3889d01a6a0a07edf8eba4a5e40f6b48ae4e":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["67f565478e7109419bc81779c1fa457a6d54fb6e","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"67f565478e7109419bc81779c1fa457a6d54fb6e":["bd2e3889d01a6a0a07edf8eba4a5e40f6b48ae4e"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["1da8d55113b689b06716246649de6f62430f15c0","67f565478e7109419bc81779c1fa457a6d54fb6e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","67f565478e7109419bc81779c1fa457a6d54fb6e"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["67f565478e7109419bc81779c1fa457a6d54fb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["67f565478e7109419bc81779c1fa457a6d54fb6e"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"bd2e3889d01a6a0a07edf8eba4a5e40f6b48ae4e":["67f565478e7109419bc81779c1fa457a6d54fb6e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"67f565478e7109419bc81779c1fa457a6d54fb6e":["c26f00b574427b55127e869b935845554afde1fa","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["bd2e3889d01a6a0a07edf8eba4a5e40f6b48ae4e","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}