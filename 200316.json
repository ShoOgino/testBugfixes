{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","commits":[{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecName, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecName, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecName, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecName, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,float,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.DerefBytesWriterBase#DerefBytesWriterBase(Directory,String,String,String,int,Allocator,Counter,IOContext,boolean,Type).mjava","sourceNew":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, float acceptableOverheadRatio, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.acceptableOverheadRatio = acceptableOverheadRatio;\n    }\n\n","sourceOld":"    protected DerefBytesWriterBase(Directory dir, String id, String codecNameIdx, String codecNameDat, int codecVersion, Allocator allocator,\n        Counter bytesUsed, IOContext context, boolean fasterButMoreRam, Type type) throws IOException {\n      super(dir, id, codecNameIdx, codecNameDat, codecVersion, bytesUsed, context, type);\n      hash = new BytesRefHash(new ByteBlockPool(allocator),\n          BytesRefHash.DEFAULT_CAPACITY, new TrackingDirectBytesStartArray(\n              BytesRefHash.DEFAULT_CAPACITY, bytesUsed));\n      docToEntry = new int[1];\n      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);\n      this.fasterButMoreRam = fasterButMoreRam;\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["32e43f282bea25b8cc26e4a842d98deafd617e9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3599646b4d4c346cf74d334813488b8b337b5bf5","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}