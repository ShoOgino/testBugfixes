{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","sourceNew":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRef scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratch.bytes[i] = (byte) input.ints[i+input.offset];\n    }\n    scratch.length = input.length;\n    return scratch;\n  }\n\n","sourceOld":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRef scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratch.bytes[i] = (byte) input.ints[i+input.offset];\n    }\n    scratch.length = input.length;\n    return scratch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","sourceNew":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRef scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      int value = input.ints[i+input.offset];\n      // NOTE: we allow -128 to 255\n      assert value >= Byte.MIN_VALUE && value <= 255: \"value \" + value + \" doesn't fit into byte\";\n      scratch.bytes[i] = (byte) value;\n    }\n    scratch.length = input.length;\n    return scratch;\n  }\n\n","sourceOld":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRef scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      scratch.bytes[i] = (byte) input.ints[i+input.offset];\n    }\n    scratch.length = input.length;\n    return scratch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#toBytesRef(IntsRef,BytesRef).mjava","sourceNew":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRefBuilder scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      int value = input.ints[i+input.offset];\n      // NOTE: we allow -128 to 255\n      assert value >= Byte.MIN_VALUE && value <= 255: \"value \" + value + \" doesn't fit into byte\";\n      scratch.setByteAt(i, (byte) value);\n    }\n    scratch.setLength(input.length);\n    return scratch.get();\n  }\n\n","sourceOld":"  /** Just converts IntsRef to BytesRef; you must ensure the\n   *  int values fit into a byte. */\n  public static BytesRef toBytesRef(IntsRef input, BytesRef scratch) {\n    scratch.grow(input.length);\n    for(int i=0;i<input.length;i++) {\n      int value = input.ints[i+input.offset];\n      // NOTE: we allow -128 to 255\n      assert value >= Byte.MIN_VALUE && value <= 255: \"value \" + value + \" doesn't fit into byte\";\n      scratch.bytes[i] = (byte) value;\n    }\n    scratch.length = input.length;\n    return scratch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6ce825e9276493231308229152c48f755ce1a0a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6ce825e9276493231308229152c48f755ce1a0a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6ce825e9276493231308229152c48f755ce1a0a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}