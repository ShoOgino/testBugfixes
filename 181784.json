{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_SET_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SET_SINGLE_VALUED_SORTED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      byte type = meta.readByte();\n      if (type == Lucene49DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene49DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene49DocValuesFormat.SORTED) {\n        readSortedField(fieldNumber, meta, infos);\n      } else if (type == Lucene49DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(fieldNumber, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(fieldNumber, meta, infos);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          readSortedField(fieldNumber, meta, infos);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene49DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(fieldNumber, ss);\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n        }\n        numerics.put(fieldNumber, readNumericEntry(meta));\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n          }\n          NumericEntry ordIndex = readNumericEntry(meta);\n          ordIndexes.put(fieldNumber, ordIndex);\n        } else if (ss.format != SORTED_SINGLE_VALUED) {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d14ffaac9c4a4a2c750bf0cd956506802561e062","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}