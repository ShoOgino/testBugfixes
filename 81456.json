{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context, acceptDocs);//pass acceptDocs through\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score, twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context, acceptDocs);//pass acceptDocs through\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context, acceptDocs);//pass acceptDocs through\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score, twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context, acceptDocs);//pass acceptDocs through\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer.iterator()) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer.iterator()) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer.iterator()) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer.iterator()) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight indexQueryWeight = indexQuery.createWeight(searcher, false);//scores aren't unsupported\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n\n        final Scorer indexQueryScorer = indexQueryWeight.scorer(context);\n        if (indexQueryScorer == null) {\n          return null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(indexQueryScorer.iterator()) {\n          @Override\n          public boolean matches() throws IOException {\n            return predFuncValues.boolVal(indexQueryScorer.docID());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"af2638813028b254a88b418ebeafb541afb49653":["7dd748bb245633a8195281556bb0e68a6ea97d18","112d77ac8d3e10a362516ad834c9a11d35c94234"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}