{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), StreamComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    Comparator<Tuple> comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), StreamComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","date":1449690748,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    objectSerialize = false;\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workersParam' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ParallelStream#ParallelStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","sourceOld":"  public ParallelStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    StreamExpressionNamedParameter workersParam = factory.getNamedOperand(expression, \"workers\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    // validate expression contains only what we want.\n\n    if(expression.getParameters().size() != streamExpressions.size() + 3 + (null != zkHostExpression ? 1 : 0)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Workers\n    if(null == workersParam || null == workersParam.getParameter() || !(workersParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'workers' parameter of type positive integer but didn't find one\",expression));\n    }\n    String workersStr = ((StreamExpressionValue)workersParam.getParameter()).getValue();\n    int workersInt = 0;\n    try{\n      workersInt = Integer.parseInt(workersStr);\n      if(workersInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' must be greater than 0.\",expression, workersStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - workers '%s' is not a valid integer.\",expression, workersStr));\n    }    \n\n    // Stream\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n    \n    // Sort\n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'sort' parameter telling us how to join the parallel streams but didn't find one\",expression));\n    }\n    \n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    // We've got all the required items    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    streamFactory = factory;\n    init(zkHost,collectionName,stream,workersInt,comp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"915201312eef398482b3dffe8a297e1809f3b29a":["a027750b86452a8dcd054ac993d54b203dae9102"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["915201312eef398482b3dffe8a297e1809f3b29a"],"a027750b86452a8dcd054ac993d54b203dae9102":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"01624b85de12fb02335810bdf325124e59040772":["915201312eef398482b3dffe8a297e1809f3b29a"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a027750b86452a8dcd054ac993d54b203dae9102","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["a027750b86452a8dcd054ac993d54b203dae9102"],"915201312eef398482b3dffe8a297e1809f3b29a":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"a027750b86452a8dcd054ac993d54b203dae9102":["915201312eef398482b3dffe8a297e1809f3b29a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}