{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","commits":[{"id":"5a259cdf9917ec38c8a812cc053f533b6e697a4a","date":1439487435,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Float> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0).getValue());\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      assertEquals(scores.get(i).floatValue(), is.explain(query, 0).getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4a6a550b74a0facdb97993c21f145d9d132d200d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a6a550b74a0facdb97993c21f145d9d132d200d","date":1440084335,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","sourceNew":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Explanation> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0));\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      Explanation expected = scores.get(i);\n      Explanation actual = is.explain(query, 0);\n      assertEquals(sims.get(i).toString() + \": actual=\" + actual + \",expected=\" + expected, expected.getValue(), actual.getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Float> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0).getValue());\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      assertEquals(scores.get(i).floatValue(), is.explain(query, 0).getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3b53e5acad2b080a435f8aadc3e1945accf103c","date":1440085463,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","sourceNew":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    // an evil merge policy could reorder our docs for no reason\n    IndexWriterConfig iwConfig = newIndexWriterConfig().setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConfig);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Explanation> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0));\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      Explanation expected = scores.get(i);\n      Explanation actual = is.explain(query, 0);\n      assertEquals(sims.get(i).toString() + \": actual=\" + actual + \",expected=\" + expected, expected.getValue(), actual.getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Explanation> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0));\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      Explanation expected = scores.get(i);\n      Explanation actual = is.explain(query, 0);\n      assertEquals(sims.get(i).toString() + \": actual=\" + actual + \",expected=\" + expected, expected.getValue(), actual.getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testNoFieldSkew().mjava","sourceNew":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    // an evil merge policy could reorder our docs for no reason\n    IndexWriterConfig iwConfig = newIndexWriterConfig().setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConfig);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Explanation> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0));\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      Explanation expected = scores.get(i);\n      Explanation actual = is.explain(query, 0);\n      assertEquals(sims.get(i).toString() + \": actual=\" + actual + \",expected=\" + expected, expected.getValue(), actual.getValue());\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure scores are not skewed by docs not containing the field */\n  public void testNoFieldSkew() throws Exception {\n    Directory dir = newDirectory();\n    // an evil merge policy could reorder our docs for no reason\n    IndexWriterConfig iwConfig = newIndexWriterConfig().setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConfig);\n    Document doc = new Document();\n    doc.add(newTextField(\"foo\", \"bar baz somethingelse\", Field.Store.NO));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    IndexSearcher is = newSearcher(ir);\n    \n    BooleanQuery.Builder queryBuilder = new BooleanQuery.Builder();\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD);\n    queryBuilder.add(new TermQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.SHOULD);\n    Query query = queryBuilder.build();\n    \n    // collect scores\n    List<Explanation> scores = new ArrayList<>();\n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      scores.add(is.explain(query, 0));\n    }\n    ir.close();\n    \n    // add some additional docs without the field\n    int numExtraDocs = TestUtil.nextInt(random(), 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      iw.addDocument(new Document());\n    }\n    \n    // check scores are the same\n    ir = iw.getReader();\n    is = newSearcher(ir);\n    for (int i = 0; i < sims.size(); i++) {\n      is.setSimilarity(sims.get(i));\n      Explanation expected = scores.get(i);\n      Explanation actual = is.explain(query, 0);\n      assertEquals(sims.get(i).toString() + \": actual=\" + actual + \",expected=\" + expected, expected.getValue(), actual.getValue(), 0F);\n    }\n    \n    iw.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a6a550b74a0facdb97993c21f145d9d132d200d":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["e3b53e5acad2b080a435f8aadc3e1945accf103c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3b53e5acad2b080a435f8aadc3e1945accf103c":["4a6a550b74a0facdb97993c21f145d9d132d200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"4a6a550b74a0facdb97993c21f145d9d132d200d":["e3b53e5acad2b080a435f8aadc3e1945accf103c"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["4a6a550b74a0facdb97993c21f145d9d132d200d"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"e3b53e5acad2b080a435f8aadc3e1945accf103c":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}