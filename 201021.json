{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","commits":[{"id":"733e01764d06768700a194141bccb026ff24bb29","date":1357643774,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    this.out = out;\n    values = new long[blockSize];\n    off = 0;\n    ord = 0L;\n    finished = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    this.out = out;\n    values = new long[blockSize];\n    off = 0;\n    ord = 0L;\n    finished = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    reset(out);\n    values = new long[blockSize];\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    this.out = out;\n    values = new long[blockSize];\n    off = 0;\n    ord = 0L;\n    finished = false;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    reset(out);\n    values = new long[blockSize];\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    this.out = out;\n    values = new long[blockSize];\n    off = 0;\n    ord = 0L;\n    finished = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    reset(out);\n    values = new long[blockSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a multiple of <tt>64</tt>\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    checkBlockSize(blockSize);\n    reset(out);\n    values = new long[blockSize];\n  }\n\n","bugFix":["733e01764d06768700a194141bccb026ff24bb29","eda61b1e90b490cc5837200e04c02639a0d272c7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize, float acceptableOverheadRatio) {\n    super(out, blockSize);\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int,float).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize, float acceptableOverheadRatio) {\n    super(out, blockSize);\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["07155cdd910937cdf6877e48884d5782845c8b8b"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["733e01764d06768700a194141bccb026ff24bb29"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["eda61b1e90b490cc5837200e04c02639a0d272c7","e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"733e01764d06768700a194141bccb026ff24bb29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"07155cdd910937cdf6877e48884d5782845c8b8b":["4e6354dd7c71fe122926fc53d7d29f715b1283db","eda61b1e90b490cc5837200e04c02639a0d272c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","733e01764d06768700a194141bccb026ff24bb29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["d4d69c535930b5cce125cff868d40f6373dc27d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"733e01764d06768700a194141bccb026ff24bb29":["eda61b1e90b490cc5837200e04c02639a0d272c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["733e01764d06768700a194141bccb026ff24bb29","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}