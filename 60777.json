{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","commits":[{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.maxDoc() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.maxDoc() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.maxDoc() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f1e17ca60794d40e2f396dbf36ae3a83dde3aa","date":1434062028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        int numDocs = 0;\n        for(int i=0;i<merge.segments.size();i++) {\n          int maxDoc = merge.segments.get(i).info.maxDoc();\n          numDocs += maxDoc;\n          assertTrue(maxDoc < 20);\n        }\n        writer.merge(merge);\n        assertEquals(numDocs, merge.getMergeInfo().info.maxDoc());\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.maxDoc() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        int numDocs = 0;\n        for(int i=0;i<merge.segments.size();i++) {\n          int maxDoc = merge.segments.get(i).info.maxDoc();\n          numDocs += maxDoc;\n          assertTrue(maxDoc < 20);\n        }\n        writer.merge(merge);\n        assertEquals(numDocs, merge.getMergeInfo().info.maxDoc());\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        int numDocs = 0;\n        for(int i=0;i<merge.segments.size();i++) {\n          int maxDoc = merge.segments.get(i).info.maxDoc();\n          numDocs += maxDoc;\n          assertTrue(maxDoc < 20);\n        }\n        writer.merge(merge);\n        assertEquals(numDocs, merge.getMergeInfo().info.maxDoc());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["d0f1e17ca60794d40e2f396dbf36ae3a83dde3aa"],"4853751884e55469b8cc1abab8fa0788eab240c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4853751884e55469b8cc1abab8fa0788eab240c9","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["4853751884e55469b8cc1abab8fa0788eab240c9","b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["4853751884e55469b8cc1abab8fa0788eab240c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"d0f1e17ca60794d40e2f396dbf36ae3a83dde3aa":["b0267c69e2456a3477a1ad785723f2135da3117e"]},"commit2Childs":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4853751884e55469b8cc1abab8fa0788eab240c9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4853751884e55469b8cc1abab8fa0788eab240c9"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","d0f1e17ca60794d40e2f396dbf36ae3a83dde3aa"],"d0f1e17ca60794d40e2f396dbf36ae3a83dde3aa":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}