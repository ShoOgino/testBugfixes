{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#addOldLog(TransactionLog,boolean).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#addOldLog(TransactionLog,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog && tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        // remove the oldest log if nobody points to it\n        if (!this.hasLogPointer(log)) {\n          currRecords -= nrec;\n          numOldRecords -= nrec;\n          TransactionLog last = logs.removeLast();\n          last.deleteOnClose = true;\n          last.close();  // it will be deleted if no longer in use\n          continue;\n        }\n        // we have one log with one pointer, we should stop removing logs\n        break;\n      }\n\n      break;\n    }\n\n    // Decref old log as we do not write to it anymore\n    // If the oldlog is uncapped, i.e., a write commit has to be performed\n    // during recovery, the output stream will be automatically re-open when\n    // TransaactionLog#incref will be called.\n    oldLog.deleteOnClose = false;\n    oldLog.decref();\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#addOldLog(TransactionLog,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void addOldLog(TransactionLog oldLog, boolean removeOld) {\n    if (oldLog == null) return;\n\n    numOldRecords += oldLog.numRecords();\n\n    int currRecords = numOldRecords;\n\n    if (oldLog != tlog && tlog != null) {\n      currRecords += tlog.numRecords();\n    }\n\n    while (removeOld && logs.size() > 0) {\n      TransactionLog log = logs.peekLast();\n      int nrec = log.numRecords();\n\n      // remove oldest log if we don't need it to keep at least numRecordsToKeep, or if\n      // we already have the limit of 10 log files.\n      if (currRecords - nrec >= numRecordsToKeep || logs.size() >= 10) {\n        // remove the oldest log if nobody points to it\n        if (!this.hasLogPointer(log)) {\n          currRecords -= nrec;\n          numOldRecords -= nrec;\n          TransactionLog last = logs.removeLast();\n          last.deleteOnClose = true;\n          last.close();  // it will be deleted if no longer in use\n          continue;\n        }\n        // we have one log with one pointer, we should stop removing logs\n        break;\n      }\n\n      break;\n    }\n\n    // Decref old log as we do not write to it anymore\n    // If the oldlog is uncapped, i.e., a write commit has to be performed\n    // during recovery, the output stream will be automatically re-open when\n    // TransaactionLog#incref will be called.\n    oldLog.deleteOnClose = false;\n    oldLog.decref();\n\n    // don't incref... we are taking ownership from the caller.\n    logs.addFirst(oldLog);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}