{"path":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","commits":[{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  // Only one writing stream with no concurrent reading streams, so no file synchronization required\n  final byte[] addBuffer(int size) {\n    byte[] buffer = new byte[size];\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["db540c50a68e844566353b8808cc4b7106eb13d6","1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe","date":1184862468,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","sourceNew":"  // Only one writing stream with no concurrent reading streams, so no file synchronization required\n  final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","sourceOld":"  // Only one writing stream with no concurrent reading streams, so no file synchronization required\n  final byte[] addBuffer(int size) {\n    byte[] buffer = new byte[size];\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","bugFix":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db540c50a68e844566353b8808cc4b7106eb13d6","date":1196182881,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","sourceNew":"  final synchronized byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","sourceOld":"  // Only one writing stream with no concurrent reading streams, so no file synchronization required\n  final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","bugFix":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedba8c41772c90fab237170d639e910d36f7755","date":1259780364,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","sourceNew":"  final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    synchronized(this) {\n      buffers.add(buffer);\n      sizeInBytes += size;\n    }\n\n    if (directory != null) {\n      directory.sizeInBytes.getAndAdd(size);\n    }\n    return buffer;\n  }\n\n","sourceOld":"  final synchronized byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    if (directory!=null)\n      synchronized (directory) {             // Ensure addition of buffer and adjustment to directory size are atomic wrt directory\n        buffers.add(buffer);\n        directory.sizeInBytes += size;\n        sizeInBytes += size;\n      }\n    else\n      buffers.add(buffer);\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d55ce084f816da26b3f2797175b2d96431111bcd","date":1267721178,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","sourceNew":"  protected final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    synchronized(this) {\n      buffers.add(buffer);\n      sizeInBytes += size;\n    }\n\n    if (directory != null) {\n      directory.sizeInBytes.getAndAdd(size);\n    }\n    return buffer;\n  }\n\n","sourceOld":"  final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    synchronized(this) {\n      buffers.add(buffer);\n      sizeInBytes += size;\n    }\n\n    if (directory != null) {\n      directory.sizeInBytes.getAndAdd(size);\n    }\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMFile#addBuffer(int).mjava","sourceNew":"  protected final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    synchronized(this) {\n      buffers.add(buffer);\n      sizeInBytes += size;\n    }\n\n    if (directory != null) {\n      directory.sizeInBytes.getAndAdd(size);\n    }\n    return buffer;\n  }\n\n","sourceOld":"  protected final byte[] addBuffer(int size) {\n    byte[] buffer = newBuffer(size);\n    synchronized(this) {\n      buffers.add(buffer);\n      sizeInBytes += size;\n    }\n\n    if (directory != null) {\n      directory.sizeInBytes.getAndAdd(size);\n    }\n    return buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d55ce084f816da26b3f2797175b2d96431111bcd":["bedba8c41772c90fab237170d639e910d36f7755"],"db540c50a68e844566353b8808cc4b7106eb13d6":["1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"bedba8c41772c90fab237170d639e910d36f7755":["db540c50a68e844566353b8808cc4b7106eb13d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d55ce084f816da26b3f2797175b2d96431111bcd"]},"commit2Childs":{"d55ce084f816da26b3f2797175b2d96431111bcd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"db540c50a68e844566353b8808cc4b7106eb13d6":["bedba8c41772c90fab237170d639e910d36f7755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe"],"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe":["db540c50a68e844566353b8808cc4b7106eb13d6"],"bedba8c41772c90fab237170d639e910d36f7755":["d55ce084f816da26b3f2797175b2d96431111bcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}