{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"568e0f5e31d9ef746086257c95249da1e9ae0d72","date":1327717057,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    numOpens.incrementAndGet();\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","date":1344892928,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n            if (isClosed) {\n              // we may have been closed\n              try {\n                SolrZkClient.this.keeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (IOException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (InterruptedException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n            if (isClosed) {\n              // we may have been closed\n              try {\n                SolrZkClient.this.keeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (IOException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (InterruptedException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (IOException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (InterruptedException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) throws InterruptedException,\n      TimeoutException, IOException {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    strat.connect(zkServerAddress, zkClientTimeout, connManager,\n        new ZkUpdate() {\n          @Override\n          public void update(SolrZooKeeper zooKeeper) {\n            SolrZooKeeper oldKeeper = keeper;\n            keeper = zooKeeper;\n            if (oldKeeper != null) {\n              try {\n                oldKeeper.close();\n              } catch (InterruptedException e) {\n                // Restore the interrupted status\n                Thread.currentThread().interrupt();\n                log.error(\"\", e);\n                throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                    \"\", e);\n              }\n            }\n          }\n        });\n    connManager.waitForConnected(clientConnectTimeout);\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (IOException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (InterruptedException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (IOException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (InterruptedException e) {\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      connManager.close();\n      throw new RuntimeException();\n    } catch (TimeoutException e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb89814ad85fb3340f275e6b76a0bc319a6cc02b","date":1348100270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   * @throws InterruptedException\n   * @throws TimeoutException\n   * @throws IOException\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * @param zkServerAddress\n   * @param zkClientTimeout\n   * @param strat\n   * @param onReconnect\n   * @param clientConnectTimeout\n   */\n  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fabd754918d74b7e65abb1028853ec4a36b3e52","date":1352765038,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException();\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d044a068e0d16ff314fb7f93fa75194d5360a6ff","date":1355610187,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f3712a3e82b6f849bec5eb4eea89be0463f611","date":1382202596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":null,"sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["568e0f5e31d9ef746086257c95249da1e9ae0d72","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","568e0f5e31d9ef746086257c95249da1e9ae0d72"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["568e0f5e31d9ef746086257c95249da1e9ae0d72","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"568e0f5e31d9ef746086257c95249da1e9ae0d72":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["568e0f5e31d9ef746086257c95249da1e9ae0d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fabd754918d74b7e65abb1028853ec4a36b3e52":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","2fabd754918d74b7e65abb1028853ec4a36b3e52"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","568e0f5e31d9ef746086257c95249da1e9ae0d72"],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"9e6c873b95174ff04c895232927baa76a95925eb":["c7f3712a3e82b6f849bec5eb4eea89be0463f611"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["2fabd754918d74b7e65abb1028853ec4a36b3e52"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c7f3712a3e82b6f849bec5eb4eea89be0463f611","9e6c873b95174ff04c895232927baa76a95925eb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e6c873b95174ff04c895232927baa76a95925eb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"568e0f5e31d9ef746086257c95249da1e9ae0d72":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","fd92b8bcc88e969302510acf77bd6970da3994c4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2fabd754918d74b7e65abb1028853ec4a36b3e52":["407687e67faf6e1f02a211ca078d8e3eed631027","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2fabd754918d74b7e65abb1028853ec4a36b3e52","407687e67faf6e1f02a211ca078d8e3eed631027"],"c7f3712a3e82b6f849bec5eb4eea89be0463f611":["9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9e6c873b95174ff04c895232927baa76a95925eb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7f3712a3e82b6f849bec5eb4eea89be0463f611"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["568e0f5e31d9ef746086257c95249da1e9ae0d72","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","fd92b8bcc88e969302510acf77bd6970da3994c4","05a14b2611ead08655a2b2bdc61632eb31316e57","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}