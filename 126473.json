{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"    /**\n     * Verifies that the index has the correct number of documents.\n     *\n     * @throws Exception\n     */\n    public void testVerifyIndex() throws Exception {\n        final IndexReader reader = IndexReader.open(mDirectory, true);\n        assertEquals(8, reader.numDocs());\n        reader.close();\n    }\n\n","sourceOld":"    /**\n     * Verifies that the index has the correct number of documents.\n     *\n     * @throws Exception\n     */\n    public void testVerifyIndex() throws Exception {\n        final IndexReader reader = IndexReader.open(mDirectory, true);\n        assertEquals(8, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory, true);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"    /**\n     * Verifies that the index has the correct number of documents.\n     *\n     * @throws Exception\n     */\n    public void testVerifyIndex() throws Exception {\n        final IndexReader reader = IndexReader.open(mDirectory, true);\n        assertEquals(8, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory, true);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"    /**\n     * Verifies that the index has the correct number of documents.\n     *\n     * @throws Exception\n     */\n    public void testVerifyIndex() throws Exception {\n        final IndexReader reader = IndexReader.open(mDirectory, true);\n        assertEquals(8, reader.numDocs());\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory, true);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory, true);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory, true);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testVerifyIndex().mjava","sourceNew":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that the index has the correct number of documents.\n   * \n   * @throws Exception\n   */\n  public void testVerifyIndex() throws Exception {\n    final IndexReader reader = IndexReader.open(mDirectory);\n    assertEquals(8, reader.numDocs());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c084e47df29de3330311d69dabf515ceaa989512","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c084e47df29de3330311d69dabf515ceaa989512","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","5f4e87790277826a2aea119328600dfb07761f32"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}