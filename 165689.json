{"path":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"/dev/null","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f411c79281946a184efeab34a673deffc25edcb","date":1303995312,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      try {\n        // Carefully invoke what is a package-private (test\n        // only, internal) method on IndexWriter:\n        Method m = IndexWriter.class.getDeclaredMethod(\"keepFullyDeletedSegments\");\n        m.setAccessible(true);\n        m.invoke(w);\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a48ce78ef9c638df43d61dc30b4625347b47016e","date":1308554244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee2683af80f3db2bcf6bb63bb0fec2021caee67f","date":1308571212,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e16bf7641024ed2270064ba9a6037c49266bcfb1","date":1308579310,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71","date":1309295333,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static Directory makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      r.close();\n      return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#makeEmptyIndex(Random,int).mjava","sourceNew":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","sourceOld":"  private static IndexReader makeEmptyIndex(Random random, final int numDeletedDocs) \n    throws IOException {\n    Directory d = new MockDirectoryWrapper(random, new RAMDirectory());\n      IndexWriter w = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < numDeletedDocs; i++) {\n        w.addDocument(new Document());\n      }\n      w.commit();\n      w.deleteDocuments( new MatchAllDocsQuery() );\n      _TestUtil.keepFullyDeletedSegments(w);\n      w.commit();\n\n      if (0 < numDeletedDocs)\n        Assert.assertTrue(\"writer has no deletions\", w.hasDeletions());\n\n      Assert.assertEquals(\"writer is missing some deleted docs\", \n                          numDeletedDocs, w.maxDoc());\n      Assert.assertEquals(\"writer has non-deleted docs\", \n                          0, w.numDocs());\n      w.close();\n      IndexReader r = IndexReader.open(d, true);\n      Assert.assertEquals(\"reader has wrong number of deleted docs\", \n                          numDeletedDocs, r.numDeletedDocs());\n      return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"5f411c79281946a184efeab34a673deffc25edcb":["962d04139994fce5193143ef35615499a9a96d78"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a48ce78ef9c638df43d61dc30b4625347b47016e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["a48ce78ef9c638df43d61dc30b4625347b47016e","ee2683af80f3db2bcf6bb63bb0fec2021caee67f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e16bf7641024ed2270064ba9a6037c49266bcfb1","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"ee2683af80f3db2bcf6bb63bb0fec2021caee67f":["a48ce78ef9c638df43d61dc30b4625347b47016e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7b91922b55d15444d554721b352861d028eb8278":["6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["ee2683af80f3db2bcf6bb63bb0fec2021caee67f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"5f411c79281946a184efeab34a673deffc25edcb":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":["5f411c79281946a184efeab34a673deffc25edcb"],"a48ce78ef9c638df43d61dc30b4625347b47016e":["e16bf7641024ed2270064ba9a6037c49266bcfb1","ee2683af80f3db2bcf6bb63bb0fec2021caee67f"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"ee2683af80f3db2bcf6bb63bb0fec2021caee67f":["e16bf7641024ed2270064ba9a6037c49266bcfb1","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","29ef99d61cda9641b6250bf9567329a6e65f901d"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a48ce78ef9c638df43d61dc30b4625347b47016e","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f411c79281946a184efeab34a673deffc25edcb","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}