{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, collector.requiredPostings());\n    return new TermSpans(postings, term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);\n    return new TermSpans(postings, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!\n      final Terms terms = context.reader().terms(term.field());\n      if (terms != null) {\n        if (terms.hasPositions() == false) {\n          throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n        }\n\n        final TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(term.bytes())) {\n          state = termsEnum.termState();\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n\n    if (state == null) { // term is not present in that reader\n      return null;\n    }\n\n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator();\n    termsEnum.seekExact(term.bytes(), state);\n\n    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, collector.requiredPostings());\n    return new TermSpans(postings, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}