{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#split(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n    \n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n    \n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#split(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#split(String,boolean).mjava","sourceNew":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n    \n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n    \n    return lst;\n  }\n\n","sourceOld":"  public static List<String> split(String s, boolean ignoreQuote) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (!ignoreQuote && ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (Character.isWhitespace(ch) && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    if (inString != 0) {\n      // unbalanced quote... ignore them\n      return split(s, true);\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["c26f00b574427b55127e869b935845554afde1fa"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c26f00b574427b55127e869b935845554afde1fa","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}