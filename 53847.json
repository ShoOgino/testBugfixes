{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","commits":[{"id":"168f749bbf9022a1ba5fea29c54baa1c00883d1d","date":1437587676,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query).mjava","sourceNew":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    DocSet result = null;\n    int count;\n\n    if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, (int) count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec805ca8fedc0166461148c7182f1bcbbd18ee1","date":1489767223,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  // TODO: rather than just have a raw \"response\", perhaps we should model as a bucket object that contains the response plus extra info?\n  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result, boolean skip) throws IOException {\n\n    // TODO: we don't need the DocSet if we've already calculated everything during the first phase\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: put info in for the merger (like \"skip=true\"?) Maybe we don't need to if we leave out all extraneous info?\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();  // don't really need this if we are skipping, but it's free.\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      if (!skip) {\n        processStats(bucket, result, count);\n      }\n      processSubs(bucket, q, result, skip);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11ab475c994c79138885cc8a30b2641d929cdc43","date":1490280010,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#fillBucket(SimpleOrderedMap[Object],Query,DocSet).mjava","sourceNew":"  // TODO: rather than just have a raw \"response\", perhaps we should model as a bucket object that contains the response plus extra info?\n  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result, boolean skip) throws IOException {\n\n    // TODO: we don't need the DocSet if we've already calculated everything during the first phase\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: put info in for the merger (like \"skip=true\"?) Maybe we don't need to if we leave out all extraneous info?\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();  // don't really need this if we are skipping, but it's free.\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      if (!skip) {\n        processStats(bucket, result, count);\n      }\n      processSubs(bucket, q, result, skip);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> bucket, Query q, DocSet result) throws IOException {\n    boolean needDocSet = freq.getFacetStats().size() > 0 || freq.getSubFacets().size() > 0;\n\n    // TODO: always collect counts or not???\n\n    int count;\n\n    if (result != null) {\n      count = result.size();\n    } else if (needDocSet) {\n      if (q == null) {\n        result = fcontext.base;\n        // result.incref(); // OFF-HEAP\n      } else {\n        result = fcontext.searcher.getDocSet(q, fcontext.base);\n      }\n      count = result.size();\n    } else {\n      if (q == null) {\n        count = fcontext.base.size();\n      } else {\n        count = fcontext.searcher.numDocs(q, fcontext.base);\n      }\n    }\n\n    try {\n      processStats(bucket, result, count);\n      processSubs(bucket, q, result);\n    } finally {\n      if (result != null) {\n        // result.decref(); // OFF-HEAP\n        result = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"11ab475c994c79138885cc8a30b2641d929cdc43":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ec805ca8fedc0166461148c7182f1bcbbd18ee1"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["11ab475c994c79138885cc8a30b2641d929cdc43","8ec805ca8fedc0166461148c7182f1bcbbd18ee1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11ab475c994c79138885cc8a30b2641d929cdc43":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8ec805ca8fedc0166461148c7182f1bcbbd18ee1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["11ab475c994c79138885cc8a30b2641d929cdc43","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}