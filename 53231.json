{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","commits":[{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n    assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n    assertU(commit());\n\n    assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elevated]\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='4']\"\n            ,\"//result/doc[3]/str[@name='id'][.='6']\",\n            \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n            \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n            \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n            );\n\n    assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elevated]\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\",\n            \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n            );\n\n    assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elev]\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\",\n            \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n            \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarker() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n    assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n    assertU(commit());\n\n    assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elevated]\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='4']\"\n            ,\"//result/doc[3]/str[@name='id'][.='6']\",\n            \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n            \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n            \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n            );\n\n    assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elevated]\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\",\n            \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n            );\n\n    assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n        CommonParams.FL, \"id, score, [elev]\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\",\n            \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n            \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e5be1ddf2a174c0c306a089b858c872d7e1f50","date":1323978951,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1905b98850d35e230d57c77f3a9b292136159f20","date":1323993698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63","date":1324079472,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":["1905b98850d35e230d57c77f3a9b292136159f20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testMarker().mjava","sourceNew":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n          , \"//*[@numFound='3']\"\n          , \"//result/doc[1]/str[@name='id'][.='1']\"\n          , \"//result/doc[2]/str[@name='id'][.='4']\"\n          , \"//result/doc[3]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n          , \"//*[@numFound='1']\"\n          , \"//result/doc[1]/str[@name='id'][.='7']\",\n          \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n          \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n      );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMarker() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX XXXX\",           \"str_s1\", \"a\" ));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\",      \"str_s1\", \"b\" ));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\" ));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\",                 \"str_s1\", \"x\" ));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\",         \"str_s1\", \"y\" ));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\" ));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\" ));\n      assertU(commit());\n\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='3']\"\n              ,\"//result/doc[1]/str[@name='id'][.='1']\"\n              ,\"//result/doc[2]/str[@name='id'][.='4']\"\n              ,\"//result/doc[3]/str[@name='id'][.='6']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n              \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n              \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"//result/doc[1]/bool[@name='[elevated]'][.='true']\"\n              );\n\n      assertQ(\"\", req(CommonParams.Q, \"AAAA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elev]\")\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/str[@name='id'][.='7']\",\n              \"not(//result/doc[1]/bool[@name='[elevated]'][.='false'])\",\n              \"not(//result/doc[1]/bool[@name='[elev]'][.='false'])\" // even though we asked for elev, there is no Transformer registered w/ that, so we shouldn't get a result\n              );\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1905b98850d35e230d57c77f3a9b292136159f20":["b9e5be1ddf2a174c0c306a089b858c872d7e1f50"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9e5be1ddf2a174c0c306a089b858c872d7e1f50":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63":["1905b98850d35e230d57c77f3a9b292136159f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"1d0561cea94adff1867218e77bb763c7583be279":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d0561cea94adff1867218e77bb763c7583be279"]},"commit2Childs":{"1905b98850d35e230d57c77f3a9b292136159f20":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"b9e5be1ddf2a174c0c306a089b858c872d7e1f50":["1905b98850d35e230d57c77f3a9b292136159f20"],"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63":["1d0561cea94adff1867218e77bb763c7583be279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["b9e5be1ddf2a174c0c306a089b858c872d7e1f50"],"1d0561cea94adff1867218e77bb763c7583be279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}