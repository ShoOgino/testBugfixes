{"path":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","commits":[{"id":"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9","date":1226014899,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log, null, e);\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrConfig.severeErrors.add(ex);\n        SolrException.logOnce(log, null, ex);\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","pathOld":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#loadSingle(ResourceLoader,Node).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log, null, e);\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrConfig.severeErrors.add(ex);\n        SolrException.logOnce(log, null, ex);\n      }\n    }\n    return plugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   * <plugin name=\"name1\" class=\"solr.ClassName\" > ... </plugin>\n   * \n   * This will initialize and register a single plugin. A class will be\n   * generated for the plugin and registered to the given name.\n   * \n   * If 'preRegister' is true, the plugin will be registered *before* it is\n   * initialized This may be useful for implementations that need to inspect\n   * other registered plugins at startup.\n   * \n   * The created class for the plugin will be returned from this function.\n   * \n   */\n  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      // Either initialize now or wait till everything has been registered\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log, null, e);\n    }\n\n    // If everything needs to be registered *first*, this will initialize later\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrConfig.severeErrors.add(ex);\n        SolrException.logOnce(log, null, ex);\n      }\n    }\n    return plugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["31f1e0aff124b03ebeca0a1de45361b8efd0d2d9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"31f1e0aff124b03ebeca0a1de45361b8efd0d2d9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}