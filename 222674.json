{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      final int docId = hits.scoreDocs[i].doc;\n      StoredDocument doc = searcher.doc(docId);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = getAnyTokenStream(FIELD_NAME, docId);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher\n          .getIndexReader(), hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery(FIELD_NAME, \"very\", \"long\");\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      final int docId = hits.scoreDocs[i].doc;\n      StoredDocument doc = searcher.doc(docId);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = getAnyTokenStream(FIELD_NAME, docId);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(FIELD_NAME, \"very\"));\n    phraseQuery.add(new Term(FIELD_NAME, \"long\"));\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      final int docId = hits.scoreDocs[i].doc;\n      StoredDocument doc = searcher.doc(docId);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = getAnyTokenStream(FIELD_NAME, docId);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testQueryScorerHits().mjava","sourceNew":"  public void testQueryScorerHits() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery(FIELD_NAME, \"very\", \"long\");\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      final int docId = hits.scoreDocs[i].doc;\n      Document doc = searcher.doc(docId);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = getAnyTokenStream(FIELD_NAME, docId);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","sourceOld":"  public void testQueryScorerHits() throws Exception {\n    PhraseQuery phraseQuery = new PhraseQuery(FIELD_NAME, \"very\", \"long\");\n\n    query = phraseQuery;\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    \n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      final int docId = hits.scoreDocs[i].doc;\n      StoredDocument doc = searcher.doc(docId);\n      String storedField = doc.get(FIELD_NAME);\n\n      TokenStream stream = getAnyTokenStream(FIELD_NAME, docId);\n\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment = highlighter.getBestFragment(stream, storedField);\n\n      if (VERBOSE) System.out.println(fragment);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"e9e1499c5d26c936238506df90a3c02c76707722":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["1d028314cced5858683a1bb4741423d0f934257b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"e9e1499c5d26c936238506df90a3c02c76707722":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["e9e1499c5d26c936238506df90a3c02c76707722"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}