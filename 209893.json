{"path":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","commits":[{"id":"d5a0b529d2a1f873f1f11db833a891b53909a7bc","date":1104492147,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb821cbfa5ecf725348dd3bc3878a9fadd24f725"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["d5a0b529d2a1f873f1f11db833a891b53909a7bc"],"d5a0b529d2a1f873f1f11db833a891b53909a7bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5a0b529d2a1f873f1f11db833a891b53909a7bc":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5a0b529d2a1f873f1f11db833a891b53909a7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}