{"path":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","commits":[{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock(boolean).mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock(boolean trackAllocations) {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","sourceNew":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriterRAMAllocator.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","sourceNew":null,"sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriter.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestByteSlices.ByteBlockAllocator#getByteBlock().mjava","sourceNew":null,"sourceOld":"    /* Allocate another byte[] from the shared pool */\n    @Override\n    synchronized byte[] getByteBlock() {\n      final int size = freeByteBlocks.size();\n      final byte[] b;\n      if (0 == size)\n        b = new byte[DocumentsWriterRAMAllocator.BYTE_BLOCK_SIZE];\n      else\n        b =  freeByteBlocks.remove(size-1);\n      return b;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}