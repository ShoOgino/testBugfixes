{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2CharFilter#doTestMode(Normalizer2,int,int).mjava","commits":[{"id":"837108f624718d0896bef7acd0150b66ebd816db","date":1395274740,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2CharFilter#doTestMode(Normalizer2,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestMode(final Normalizer2 normalizer, int maxLength, int iterations) throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.KEYWORD, false));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new ICUNormalizer2CharFilter(reader, normalizer);\n      }\n    };\n\n    for (int i = 0; i < iterations; i++) {\n      String input = TestUtil.randomUnicodeString(random(), maxLength);\n      if (input.length() == 0) {\n        continue;\n      }\n      String normalized = normalizer.normalize(input);\n      if (normalized.length() == 0) {\n        continue; // MockTokenizer doesnt tokenize empty string...\n      }\n      checkOneTerm(a, input, normalized);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4434126f19baaf18fbed92b111931667ffb8ebbd","date":1418044101,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2CharFilter#doTestMode(Normalizer2,int,int,int).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUNormalizer2CharFilter#doTestMode(Normalizer2,int,int).mjava","sourceNew":"  public void doTestMode(final Normalizer2 normalizer, int maxLength, int iterations, int bufferSize) throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.KEYWORD, false));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new ICUNormalizer2CharFilter(reader, normalizer, bufferSize);\n      }\n    };\n\n    for (int i = 0; i < iterations; i++) {\n      String input = TestUtil.randomUnicodeString(random(), maxLength);\n      if (input.length() == 0) {\n        continue;\n      }\n      String normalized = normalizer.normalize(input);\n      if (normalized.length() == 0) {\n        continue; // MockTokenizer doesnt tokenize empty string...\n      }\n      checkOneTerm(a, input, normalized);\n    }\n  }\n\n","sourceOld":"  public void doTestMode(final Normalizer2 normalizer, int maxLength, int iterations) throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer(MockTokenizer.KEYWORD, false));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new ICUNormalizer2CharFilter(reader, normalizer);\n      }\n    };\n\n    for (int i = 0; i < iterations; i++) {\n      String input = TestUtil.randomUnicodeString(random(), maxLength);\n      if (input.length() == 0) {\n        continue;\n      }\n      String normalized = normalizer.normalize(input);\n      if (normalized.length() == 0) {\n        continue; // MockTokenizer doesnt tokenize empty string...\n      }\n      checkOneTerm(a, input, normalized);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"837108f624718d0896bef7acd0150b66ebd816db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4434126f19baaf18fbed92b111931667ffb8ebbd":["837108f624718d0896bef7acd0150b66ebd816db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4434126f19baaf18fbed92b111931667ffb8ebbd"]},"commit2Childs":{"837108f624718d0896bef7acd0150b66ebd816db":["4434126f19baaf18fbed92b111931667ffb8ebbd"],"4434126f19baaf18fbed92b111931667ffb8ebbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["837108f624718d0896bef7acd0150b66ebd816db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}