{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuggestions() throws Exception {\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(0, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(9, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9315b5a287025982c4a35e4acd9247a8535b4cdf","date":1575566832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","sourceNew":"  @Test\n  public void testSuggestions() throws Exception {\n    String snapshotPath = createTempDir() + \"/snapshot\";\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"snapshotPath\", snapshotPath);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(\"0\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(\"9\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestions() throws Exception {\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(0, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(9, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","date":1575629849,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","sourceNew":"  @Test\n  public void testSuggestions() throws Exception {\n    String snapshotPath = createTempDir() + \"/snapshot\";\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"snapshotPath\", snapshotPath);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(\"0\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(\"9\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestions() throws Exception {\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(0, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(9, scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","sourceNew":"  @Test\n  public void testSuggestions() throws Exception {\n    String snapshotPath = createTempDir() + \"/snapshot\";\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"snapshotPath\", snapshotPath);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(\"0\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(\"9\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestions() throws Exception {\n    String snapshotPath = createTempDir() + \"/snapshot\";\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"snapshotPath\", snapshotPath);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(\"0\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(\"9\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimScenario#testSuggestions().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSuggestions() throws Exception {\n    String snapshotPath = createTempDir() + \"/snapshot\";\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"snapshotPath\", snapshotPath);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream ps = new PrintStream(baos, true, Charset.forName(\"UTF-8\"));\n      scenario.console = ps;\n      scenario.context.put(\"iterative\", \"0\");\n      scenario.context.put(\"justCalc\", \"1\");\n      scenario.run();\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>)scenario.context.get(SimScenario.SUGGESTIONS_CTX_PROP);\n      assertNotNull(suggestions);\n      assertEquals(suggestions.toString(), 1, suggestions.size());\n      // reconstruct the snapshot from the dump\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> snapshot = (Map<String, Object>)Utils.fromJSON(baos.toByteArray());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> autoscalingState = (Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY);\n      assertNotNull(autoscalingState);\n      assertEquals(autoscalingState.toString(), 1, autoscalingState.size());\n      assertTrue(autoscalingState.toString(), autoscalingState.containsKey(\"suggestions\"));\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<String, Object>> snapSuggestions = (List<Map<String, Object>>)autoscalingState.get(\"suggestions\");\n      assertEquals(snapSuggestions.toString(), 1, snapSuggestions.size());\n      // _loop_iter_ should be present and 0 (first iteration)\n      assertEquals(\"0\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n    // try looping more times\n    try (SimScenario scenario = SimScenario.load(testSuggestionsScenario)) {\n      scenario.context.put(\"iterative\", \"10\");\n      scenario.context.put(\"justCalc\", \"0\");\n      scenario.run();\n      assertEquals(\"9\", scenario.context.get(SimScenario.LOOP_ITER_PROP));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9315b5a287025982c4a35e4acd9247a8535b4cdf":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9315b5a287025982c4a35e4acd9247a8535b4cdf"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","9315b5a287025982c4a35e4acd9247a8535b4cdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9315b5a287025982c4a35e4acd9247a8535b4cdf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","2c173aec5dba4a880e26706e8ca1ec9e67b74ed5"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"2c173aec5dba4a880e26706e8ca1ec9e67b74ed5":[],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["9315b5a287025982c4a35e4acd9247a8535b4cdf","2c173aec5dba4a880e26706e8ca1ec9e67b74ed5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2c173aec5dba4a880e26706e8ca1ec9e67b74ed5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}