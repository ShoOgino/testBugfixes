{"path":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","commits":[{"id":"0839a4f0ba3efad1097709fada63a05458637052","date":1160082630,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(2, hits.length());\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(4, hits.length());\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.UN_TOKENIZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0839a4f0ba3efad1097709fada63a05458637052"],"0839a4f0ba3efad1097709fada63a05458637052":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0839a4f0ba3efad1097709fada63a05458637052":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0839a4f0ba3efad1097709fada63a05458637052"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}