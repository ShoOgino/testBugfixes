{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiTerms.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = DirectoryReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}