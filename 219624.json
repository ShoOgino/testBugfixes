{"path":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    // should do the right thing for both attributes and elements.\n    // Oops, when running in Resin, I get an unsupported operation\n    // exception... need to use Sun default (apache)\n    String txt = nd.getTextContent();\n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e91c86e193010fc38028001cf0590693ad2cd1","date":1166153548,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","sourceNew":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n    \n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","sourceOld":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    // should do the right thing for both attributes and elements.\n    // Oops, when running in Resin, I get an unsupported operation\n    // exception... need to use Sun default (apache)\n    String txt = nd.getTextContent();\n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"810d380561c984370e8bfcbf778486c08f7e2cc0","date":1171644169,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","sourceNew":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n\n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","sourceOld":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n    \n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","sourceNew":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n\n    log.debug(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","sourceOld":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n\n    log.fine(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/Config#getVal(String,boolean).mjava","sourceNew":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n\n    log.debug(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","sourceOld":"  public String getVal(String path, boolean errIfMissing) {\n    Node nd = getNode(path,errIfMissing);\n    if (nd==null) return null;\n\n    String txt = DOMUtil.getText(nd);\n\n    log.debug(name + ' '+path+'='+txt);\n    return txt;\n\n    /******\n    short typ = nd.getNodeType();\n    if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {\n      return nd.getNodeValue();\n    }\n    return nd.getTextContent();\n    ******/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57e91c86e193010fc38028001cf0590693ad2cd1":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"810d380561c984370e8bfcbf778486c08f7e2cc0":["57e91c86e193010fc38028001cf0590693ad2cd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"57e91c86e193010fc38028001cf0590693ad2cd1":["810d380561c984370e8bfcbf778486c08f7e2cc0"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["57e91c86e193010fc38028001cf0590693ad2cd1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"810d380561c984370e8bfcbf778486c08f7e2cc0":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}