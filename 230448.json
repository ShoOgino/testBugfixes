{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc95466df1d8116da3b154eaf55d3bc5e49fad70","date":1327693526,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n\n    arr.reset();\n    ByteUtils.UTF8toUTF16(bytes, 0, sz, arr);\n    return arr.toString();\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n\n    arr.reset();\n    ByteUtils.UTF8toUTF16(bytes, 0, sz, arr);\n    return arr.toString();\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n\n    arr.reset();\n    ByteUtils.UTF8toUTF16(bytes, 0, sz, arr);\n    return arr.toString();\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fcfd8b392582391d5804daa94c05f917c7fbdc7","date":1370873427,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(DataInputInputStream).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(DataInputInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n\n    arr.reset();\n    ByteUtils.UTF8toUTF16(bytes, 0, sz, arr);\n    return arr.toString();\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n\n    arr.reset();\n    ByteUtils.UTF8toUTF16(bytes, 0, sz, arr);\n    return arr.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"cc95466df1d8116da3b154eaf55d3bc5e49fad70":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","cc95466df1d8116da3b154eaf55d3bc5e49fad70"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fcfd8b392582391d5804daa94c05f917c7fbdc7"],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["cc95466df1d8116da3b154eaf55d3bc5e49fad70"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["c26f00b574427b55127e869b935845554afde1fa","cc95466df1d8116da3b154eaf55d3bc5e49fad70"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cc95466df1d8116da3b154eaf55d3bc5e49fad70","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cc95466df1d8116da3b154eaf55d3bc5e49fad70":["fd92b8bcc88e969302510acf77bd6970da3994c4","2fcfd8b392582391d5804daa94c05f917c7fbdc7","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2fcfd8b392582391d5804daa94c05f917c7fbdc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}