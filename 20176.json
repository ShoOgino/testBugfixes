{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"/dev/null","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      for (Element elem : n)\n        fields.add(new Field(elem));\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46bf22400b9cd12540418cd46bfa17c100f983a","date":1225303526,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, Field>();\n      lowercaseColNameVsField = new HashMap<String, Field>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        colNameVsField.put(field.column, field);\n        lowercaseColNameVsField.put(field.column.toLowerCase(), field);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      for (Element elem : n)\n        fields.add(new Field(elem));\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":["d35fc21ac635fb44202cf4b74a7ec94abc0699ae","29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29df09ecb6b96d58f34447be89f88a0c067fb3a9","date":1225344078,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, Field>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        colNameVsField.put(field.column, field);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, Field>();\n      lowercaseColNameVsField = new HashMap<String, Field>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        colNameVsField.put(field.column, field);\n        lowercaseColNameVsField.put(field.column.toLowerCase(), field);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d35fc21ac635fb44202cf4b74a7ec94abc0699ae","date":1230621566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, Field>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        colNameVsField.put(field.column, field);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"bugIntro":["eca5eabc632e58fc84ed668aefaa4513669e1955"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eca5eabc632e58fc84ed668aefaa4513669e1955","date":1234344605,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":["d35fc21ac635fb44202cf4b74a7ec94abc0699ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4fc9f5094e1ed5736126154482055eeff15f8","date":1237885667,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8388f9c1189f751eac28894de3b56d55286dd5d8","date":1239613259,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      fields = new ArrayList<Field>();\n      colNameVsField = new HashMap<String, List<Field>>();\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c7b34ead12b9d35e12b29cd4a6032baae1d564","date":1245645598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        throw new DataImportHandlerException(SEVERE, \"Entity must have name '\" );\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a48b83db9693749d33adf794036087643987f6cb","date":1250143683,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        throw new DataImportHandlerException(SEVERE, \"Entity must have name '\" );\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig.Entity#Entity(Element).mjava","sourceNew":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","sourceOld":"    public Entity(Element element) {\n      name = getStringAttribute(element, NAME, null);\n      if(name == null){\n        LOG.warn(\"Entity does not have a name\");\n        name= \"\"+System.nanoTime();\n      }\n      if(name.indexOf(\".\") != -1){\n        throw new DataImportHandlerException(SEVERE, \"Entity name must not have period (.): '\" + name);\n      }      \n      if (RESERVED_WORDS.contains(name)) {\n        throw new DataImportHandlerException(SEVERE, \"Entity name : '\" + name\n                + \"' is a reserved keyword. Reserved words are: \" + RESERVED_WORDS);\n      }\n      pk = getStringAttribute(element, \"pk\", null);\n      docRoot = getStringAttribute(element, ROOT_ENTITY, null);\n      proc = getStringAttribute(element, PROCESSOR, null);\n      dataSource = getStringAttribute(element, DataImporter.DATA_SRC, null);\n      allAttributes = getAllAttributes(element);\n      List<Element> n = getChildNodes(element, \"field\");\n      for (Element elem : n)  {\n        Field field = new Field(elem);\n        fields.add(field);\n        List<Field> l = colNameVsField.get(field.column);\n        if(l == null) l = new ArrayList<Field>();\n        boolean alreadyFound = false;\n        for (Field f : l) {\n          if(f.getName().equals(field.getName())) {\n            alreadyFound = true;\n            break;\n          }\n        }\n        if(!alreadyFound) l.add(field);\n        colNameVsField.put(field.column, l);\n      }\n      n = getChildNodes(element, \"entity\");\n      if (!n.isEmpty())\n        entities = new ArrayList<Entity>();\n      for (Element elem : n)\n        entities.add(new Entity(elem));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d35fc21ac635fb44202cf4b74a7ec94abc0699ae":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"8388f9c1189f751eac28894de3b56d55286dd5d8":["68b4fc9f5094e1ed5736126154482055eeff15f8"],"a48b83db9693749d33adf794036087643987f6cb":["80c7b34ead12b9d35e12b29cd4a6032baae1d564"],"80c7b34ead12b9d35e12b29cd4a6032baae1d564":["8388f9c1189f751eac28894de3b56d55286dd5d8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"68b4fc9f5094e1ed5736126154482055eeff15f8":["eca5eabc632e58fc84ed668aefaa4513669e1955"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"e46bf22400b9cd12540418cd46bfa17c100f983a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["a48b83db9693749d33adf794036087643987f6cb"],"eca5eabc632e58fc84ed668aefaa4513669e1955":["d35fc21ac635fb44202cf4b74a7ec94abc0699ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d35fc21ac635fb44202cf4b74a7ec94abc0699ae":["eca5eabc632e58fc84ed668aefaa4513669e1955"],"8388f9c1189f751eac28894de3b56d55286dd5d8":["80c7b34ead12b9d35e12b29cd4a6032baae1d564"],"a48b83db9693749d33adf794036087643987f6cb":["ad94625fb8d088209f46650c8097196fec67f00c"],"80c7b34ead12b9d35e12b29cd4a6032baae1d564":["a48b83db9693749d33adf794036087643987f6cb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"68b4fc9f5094e1ed5736126154482055eeff15f8":["8388f9c1189f751eac28894de3b56d55286dd5d8"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["e46bf22400b9cd12540418cd46bfa17c100f983a"],"29df09ecb6b96d58f34447be89f88a0c067fb3a9":["d35fc21ac635fb44202cf4b74a7ec94abc0699ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e46bf22400b9cd12540418cd46bfa17c100f983a":["29df09ecb6b96d58f34447be89f88a0c067fb3a9"],"eca5eabc632e58fc84ed668aefaa4513669e1955":["68b4fc9f5094e1ed5736126154482055eeff15f8"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}