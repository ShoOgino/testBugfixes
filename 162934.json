{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb821cbfa5ecf725348dd3bc3878a9fadd24f725","date":1344264941,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.maxDoc();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":["c9bc1fe868bb126a5b8517d9d2abcf329f56d283","d5a0b529d2a1f873f1f11db833a891b53909a7bc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.maxDoc();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.maxDoc();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"  /**\n   * Extracts all terms texts of a given Query into an array of WeightedTerms\n   *\n   * @param query      Query to extract term texts from\n   * @param reader used to compute IDF which can be used to a) score selected fragments better\n   * b) use graded highlights eg changing intensity of font color\n   * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n   * @return an array of the terms used in a query, plus their weights.\n   */\n  public static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName)\n  {\n      WeightedTerm[] terms=getTerms(query,false, fieldName);\n      int totalNumDocs=reader.maxDoc();\n      for (int i = 0; i < terms.length; i++)\n        {\n          try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n          catch (IOException e)\n            {\n              //ignore\n            }\n        }\n    return terms;\n  }\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.maxDoc();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"  /**\n   * Extracts all terms texts of a given Query into an array of WeightedTerms\n   *\n   * @param query      Query to extract term texts from\n   * @param reader used to compute IDF which can be used to a) score selected fragments better\n   * b) use graded highlights eg changing intensity of font color\n   * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n   * @return an array of the terms used in a query, plus their weights.\n   */\n  public static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName)\n  {\n      WeightedTerm[] terms=getTerms(query,false, fieldName);\n      int totalNumDocs=reader.maxDoc();\n      for (int i = 0; i < terms.length; i++)\n        {\n          try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from ClassicSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n          catch (IOException e)\n            {\n              //ignore\n            }\n        }\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Extracts all terms texts of a given Query into an array of WeightedTerms\n   *\n   * @param query      Query to extract term texts from\n   * @param reader used to compute IDF which can be used to a) score selected fragments better\n   * b) use graded highlights eg changing intensity of font color\n   * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n   * @return an array of the terms used in a query, plus their weights.\n   */\n  public static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName)\n  {\n      WeightedTerm[] terms=getTerms(query,false, fieldName);\n      int totalNumDocs=reader.maxDoc();\n      for (int i = 0; i < terms.length; i++)\n        {\n          try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log(totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n          catch (IOException e)\n            {\n              //ignore\n            }\n        }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fb821cbfa5ecf725348dd3bc3878a9fadd24f725"],"fb821cbfa5ecf725348dd3bc3878a9fadd24f725":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fb821cbfa5ecf725348dd3bc3878a9fadd24f725"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["fb821cbfa5ecf725348dd3bc3878a9fadd24f725"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb821cbfa5ecf725348dd3bc3878a9fadd24f725","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fb821cbfa5ecf725348dd3bc3878a9fadd24f725":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}