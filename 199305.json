{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#printStemResults(String,List[Stem]).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#printStemResults(String,List[Stem]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prints the results of the stemming of a word\n   *\n   * @param originalWord Word that has been stemmed\n   * @param stems Stems of the word\n   */\n  private static void printStemResults(String originalWord, List<Stem> stems) {\n    StringBuilder builder = new StringBuilder().append(\"stem(\").append(originalWord).append(\")\").append(\"\\n\");\n\n    for (Stem stem : stems) {\n      builder.append(\"- \").append(stem.getStem()).append(\": \");\n\n      for (HunspellAffix prefix : stem.getPrefixes()) {\n        builder.append(prefix.getAppend()).append(\"+\");\n\n        if (hasText(prefix.getStrip())) {\n          builder.append(prefix.getStrip()).append(\"-\");\n        }\n      }\n\n      builder.append(stem.getStem());\n\n      for (HunspellAffix suffix : stem.getSuffixes()) {\n        if (hasText(suffix.getStrip())) {\n          builder.append(\"-\").append(suffix.getStrip());\n        }\n        \n        builder.append(\"+\").append(suffix.getAppend());\n      }\n      builder.append(\"\\n\");\n    }\n\n    System.out.println(builder);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#printStemResults(String,List[Stem]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#printStemResults(String,List[Stem]).mjava","sourceNew":"  /**\n   * Prints the results of the stemming of a word\n   *\n   * @param originalWord Word that has been stemmed\n   * @param stems Stems of the word\n   */\n  private static void printStemResults(String originalWord, List<Stem> stems) {\n    StringBuilder builder = new StringBuilder().append(\"stem(\").append(originalWord).append(\")\").append(\"\\n\");\n\n    for (Stem stem : stems) {\n      builder.append(\"- \").append(stem.getStem()).append(\": \");\n\n      for (HunspellAffix prefix : stem.getPrefixes()) {\n        builder.append(prefix.getAppend()).append(\"+\");\n\n        if (hasText(prefix.getStrip())) {\n          builder.append(prefix.getStrip()).append(\"-\");\n        }\n      }\n\n      builder.append(stem.getStem());\n\n      for (HunspellAffix suffix : stem.getSuffixes()) {\n        if (hasText(suffix.getStrip())) {\n          builder.append(\"-\").append(suffix.getStrip());\n        }\n        \n        builder.append(\"+\").append(suffix.getAppend());\n      }\n      builder.append(\"\\n\");\n    }\n\n    System.out.println(builder);\n  }\n\n","sourceOld":"  /**\n   * Prints the results of the stemming of a word\n   *\n   * @param originalWord Word that has been stemmed\n   * @param stems Stems of the word\n   */\n  private static void printStemResults(String originalWord, List<Stem> stems) {\n    StringBuilder builder = new StringBuilder().append(\"stem(\").append(originalWord).append(\")\").append(\"\\n\");\n\n    for (Stem stem : stems) {\n      builder.append(\"- \").append(stem.getStem()).append(\": \");\n\n      for (HunspellAffix prefix : stem.getPrefixes()) {\n        builder.append(prefix.getAppend()).append(\"+\");\n\n        if (hasText(prefix.getStrip())) {\n          builder.append(prefix.getStrip()).append(\"-\");\n        }\n      }\n\n      builder.append(stem.getStem());\n\n      for (HunspellAffix suffix : stem.getSuffixes()) {\n        if (hasText(suffix.getStrip())) {\n          builder.append(\"-\").append(suffix.getStrip());\n        }\n        \n        builder.append(\"+\").append(suffix.getAppend());\n      }\n      builder.append(\"\\n\");\n    }\n\n    System.out.println(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}