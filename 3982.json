{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.shutdown(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.shutdown(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.shutdown(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setMergeScheduler(new ConcurrentMergeScheduler())\n                                                .setCommitOnClose(false));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    try {\n      writer.commit();\n    } finally {\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.shutdown(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setCommitOnClose(false);\n\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return th instanceof AlreadyClosedException ||\n              (th instanceof IllegalStateException && th.getMessage().contains(\"this writer hit an unrecoverable error\"));\n          }\n        });\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.commit();\n      writer.close();\n    } catch (AlreadyClosedException ace) {\n      // OK: abort closes the writer\n      assertTrue(writer.deleter.isClosed());\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setMergeScheduler(new ConcurrentMergeScheduler())\n                                                .setCommitOnClose(false));\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    try {\n      writer.commit();\n    } finally {\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setCommitOnClose(false);\n\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return th instanceof AlreadyClosedException ||\n              (th instanceof IllegalStateException && th.getMessage().contains(\"this writer hit an unrecoverable error\"));\n          }\n        });\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n    });\n\n    failure.clearDoFail();\n    expectThrows(AlreadyClosedException.class, () -> {\n      writer.addDocument(doc);\n      writer.commit();\n      writer.close();\n    });\n\n    assertTrue(writer.deleter.isClosed());\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setCommitOnClose(false);\n\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return th instanceof AlreadyClosedException ||\n              (th instanceof IllegalStateException && th.getMessage().contains(\"this writer hit an unrecoverable error\"));\n          }\n        });\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.commit();\n      writer.close();\n    } catch (AlreadyClosedException ace) {\n      // OK: abort closes the writer\n      assertTrue(writer.deleter.isClosed());\n    }\n    dir.close();\n  }\n\n","bugFix":["d0ef034a4f10871667ae75181537775ddcf8ade4","9299079153fd7895bf3cf6835cf7019af2ba89b3","83bbb041887bbef07b8a98d08a0e1713ce137039"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setCommitOnClose(false);\n\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return th instanceof AlreadyClosedException ||\n              (th instanceof IllegalStateException && th.getMessage().contains(\"this writer hit an unrecoverable error\"));\n          }\n        });\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n    });\n\n    failure.clearDoFail();\n    expectThrows(AlreadyClosedException.class, () -> {\n      writer.addDocument(doc);\n      writer.commit();\n      writer.close();\n    });\n\n    assertTrue(writer.isDeleterClosed());\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n      .setMaxBufferedDocs(2)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setCommitOnClose(false);\n\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return th instanceof AlreadyClosedException ||\n              (th instanceof IllegalStateException && th.getMessage().contains(\"this writer hit an unrecoverable error\"));\n          }\n        });\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n    });\n\n    failure.clearDoFail();\n    expectThrows(AlreadyClosedException.class, () -> {\n      writer.addDocument(doc);\n      writer.commit();\n      writer.close();\n    });\n\n    assertTrue(writer.deleter.isClosed());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["05fe562aa248790944d43cdd478f512572835ba0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"05fe562aa248790944d43cdd478f512572835ba0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}