{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRefBuilder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRef).mjava","sourceNew":"    /** Sugar: just joins the provided terms with {@link\n     *  SynonymMap#WORD_SEPARATOR}.  reuse and its chars\n     *  must not be null. */\n    public static CharsRef join(String[] words, CharsRefBuilder reuse) {\n      int upto = 0;\n      char[] buffer = reuse.chars();\n      for (String word : words) {\n        final int wordLen = word.length();\n        final int needed = (0 == upto ? wordLen : 1 + upto + wordLen); // Add 1 for WORD_SEPARATOR\n        if (needed > buffer.length) {\n          reuse.grow(needed);\n          buffer = reuse.chars();\n        }\n        if (upto > 0) {\n          buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n      }\n      reuse.setLength(upto);\n      return reuse.get();\n    }\n\n","sourceOld":"    /** Sugar: just joins the provided terms with {@link\n     *  SynonymMap#WORD_SEPARATOR}.  reuse and its chars\n     *  must not be null. */\n    public static CharsRef join(String[] words, CharsRef reuse) {\n      int upto = 0;\n      char[] buffer = reuse.chars;\n      for (String word : words) {\n        final int wordLen = word.length();\n        final int needed = (0 == upto ? wordLen : 1 + upto + wordLen); // Add 1 for WORD_SEPARATOR\n        if (needed > buffer.length) {\n          reuse.grow(needed);\n          buffer = reuse.chars;\n        }\n        if (upto > 0) {\n          buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n      }\n      reuse.length = upto;\n      return reuse;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}