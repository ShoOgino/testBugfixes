{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.pendingDeleteCount;\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.pendingDeleteCount;\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.pendingDeleteCount;\n    }\n    return delCount;\n  }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.pendingDeleteCount;\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfoPerCommit info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfoPerCommit info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfo info) throws IOException {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}