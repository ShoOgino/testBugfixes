{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","commits":[{"id":"13591e4b4b5e1616a7627989025ec3b20432357f","date":1506320416,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","pathOld":"/dev/null","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2252ea609db951d15af4430bee806a8d09fd8d6d","date":1506501078,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too large to fit on ellipsoid or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n    }\n\n","sourceOld":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n    }\n\n","bugFix":null,"bugIntro":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","pathOld":"/dev/null","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too large to fit on ellipsoid or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75a9b5446751df93faf9a552cbffb19794a59a89","date":1511305520,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too large to fit on ellipsoid or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n    }\n\n","sourceOld":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too large to fit on ellipsoid or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2","date":1512093110,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too small or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n    }\n\n","sourceOld":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too large to fit on ellipsoid or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n    }\n\n","bugFix":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c5af811fc387444c4a3b568755b76a85e4bc4fc","date":1512143098,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoExactCircle.ApproximationSlice#ApproximationSlice(GeoPoint,GeoPoint,double,GeoPoint,double,GeoPoint,double).mjava","sourceNew":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing, final boolean mustSplit) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      this.mustSplit = mustSplit;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too small or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n    }\n\n","sourceOld":"    public ApproximationSlice(final GeoPoint center,\n      final GeoPoint endPoint1, final double point1Bearing,\n      final GeoPoint endPoint2, final double point2Bearing,\n      final GeoPoint middlePoint, final double middlePointBearing) {\n      this.endPoint1 = endPoint1;\n      this.point1Bearing = point1Bearing;\n      this.endPoint2 = endPoint2;\n      this.point2Bearing = point2Bearing;\n      this.middlePoint = middlePoint;\n      this.middlePointBearing = middlePointBearing;\n      // Construct the plane going through the three given points\n      this.plane = SidedPlane.constructNormalizedThreePointSidedPlane(center, endPoint1, endPoint2, middlePoint);\n      if (this.plane == null) {\n        throw new IllegalArgumentException(\"Either circle is too small or accuracy is too high; could not construct a plane with endPoint1=\"+endPoint1+\" bearing \"+point1Bearing+\", endPoint2=\"+endPoint2+\" bearing \"+point2Bearing+\", middle=\"+middlePoint+\" bearing \"+middlePointBearing);\n      }\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75a9b5446751df93faf9a552cbffb19794a59a89":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"13591e4b4b5e1616a7627989025ec3b20432357f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2252ea609db951d15af4430bee806a8d09fd8d6d"],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["75a9b5446751df93faf9a552cbffb19794a59a89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2252ea609db951d15af4430bee806a8d09fd8d6d":["13591e4b4b5e1616a7627989025ec3b20432357f"],"9c5af811fc387444c4a3b568755b76a85e4bc4fc":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c5af811fc387444c4a3b568755b76a85e4bc4fc"]},"commit2Childs":{"75a9b5446751df93faf9a552cbffb19794a59a89":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"13591e4b4b5e1616a7627989025ec3b20432357f":["2252ea609db951d15af4430bee806a8d09fd8d6d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["9c5af811fc387444c4a3b568755b76a85e4bc4fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13591e4b4b5e1616a7627989025ec3b20432357f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"2252ea609db951d15af4430bee806a8d09fd8d6d":["75a9b5446751df93faf9a552cbffb19794a59a89","6240b74b884c5587f2a4062dd27d6c32bf228889"],"9c5af811fc387444c4a3b568755b76a85e4bc4fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}