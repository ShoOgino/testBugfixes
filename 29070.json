{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,List[String],int).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n\n\n//    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              Map<String, String> optionalPolicyMapping,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicy(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicy(coll);\n        }\n      };\n\n    }\n\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        SolrRequest op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.getParams().get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n\n\n//    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["86fff6c123a5a1d38adb665dd045347219798da9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5d14f4b04a5c752272b2f79fd6684fee8dff2808":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d14f4b04a5c752272b2f79fd6684fee8dff2808","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}