{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      int node = fst.getStartNode();\n\n      if (fst.noNodes()) {\n        // degenerate FST: only accepts the empty string\n        assertTrue(fst.getEmptyOutput() != null);\n        in.length = 0;\n        return fst.getEmptyOutput();\n      }\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      T output = fst.outputs.getNoOutput();\n      //System.out.println(\"get random\");\n      while(true) {\n        // read all arcs:\n        //System.out.println(\"  n=\" + node);\n        int arcAddress = node;\n        FST.Arc<T> arc = new FST.Arc<T>();\n        fst.readFirstArc(arcAddress, arc);\n        arcs.add(copyArc(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(copyArc(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n\n        arcs.clear();\n\n        // append label\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n\n        output = fst.outputs.add(output, arc.output);\n\n        // maybe stop\n        if (arc.isFinal()) {\n          if (fst.hasArcs(arc.target)) {\n            // final state but it also has outgoing edges\n            if (random.nextBoolean()) {\n              output = fst.outputs.add(output, arc.nextFinalOutput);\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        node = arc.target;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","sourceOld":"    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n      FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n      in.length = 0;\n      in.offset = 0;\n      final T NO_OUTPUT = fst.outputs.getNoOutput();\n      T output = NO_OUTPUT;\n\n      while(true) {\n        // read all arcs:\n        fst.readFirstTargetArc(arc, arc);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n        while(!arc.isLast()) {\n          fst.readNextArc(arc);\n          arcs.add(new FST.Arc<T>().copyFrom(arc));\n        }\n      \n        // pick one\n        arc = arcs.get(random.nextInt(arcs.size()));\n        arcs.clear();\n\n        // accumulate output\n        output = fst.outputs.add(output, arc.output);\n\n        // append label\n        if (arc.label == FST.END_LABEL) {\n          break;\n        }\n\n        if (in.ints.length == in.length) {\n          in.grow(1+in.length);\n        }\n        in.ints[in.length++] = arc.label;\n      }\n\n      return output;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}