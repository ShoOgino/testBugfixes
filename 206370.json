{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","commits":[{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","sourceNew":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","sourceOld":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","sourceNew":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","sourceOld":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","sourceNew":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","sourceOld":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#waitForCdcrStateReplication(String).mjava","sourceNew":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","sourceOld":"  protected void waitForCdcrStateReplication(String collection) throws Exception {\n    log.info(\"Wait for CDCR state to replicate - collection: \" + collection);\n\n    int cnt = 30;\n    while (cnt > 0) {\n      NamedList status = null;\n      boolean allEquals = true;\n      for (CloudJettyRunner jetty : cloudJettys.get(collection)) { // check all replicas\n        NamedList rsp = invokeCdcrAction(jetty, CdcrParams.CdcrAction.STATUS);\n        if (status == null) {\n          status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n          continue;\n        }\n        allEquals &= status.equals(rsp.get(CdcrParams.CdcrAction.STATUS.toLower()));\n      }\n\n      if (allEquals) {\n        break;\n      }\n      else {\n        if (cnt == 0) {\n          throw new RuntimeException(\"Timeout waiting for CDCR state to replicate: collection=\"+collection);\n        }\n        cnt--;\n        Thread.sleep(500);\n      }\n    }\n\n    log.info(\"CDCR state is identical across nodes - collection: \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}