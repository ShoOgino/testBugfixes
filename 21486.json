{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our params syntax\n    this.params = params;\n    // TODO consider instead using data.getConfig().get(\"highlighter.*\")?\n    String[] splits = params.split(\",\");\n    for (String split : splits) {\n      if (split.startsWith(\"type[\") == true) {\n        type = split.substring(\"type[\".length(), split.length() - 1);\n      } else if (split.startsWith(\"maxFrags[\") == true) {\n        maxFrags = (int) Float.parseFloat(split.substring(\"maxFrags[\".length(), split.length() - 1));\n      } else if (split.startsWith(\"fields[\") == true) {\n        String fieldNames = split.substring(\"fields[\".length(), split.length() - 1);\n        String[] fieldSplits = fieldNames.split(\";\");\n        hlFields = new HashSet<>(Arrays.asList(fieldSplits));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our params syntax\n    this.params = params;\n    // TODO consider instead using data.getConfig().get(\"highlighter.*\")?\n    String[] splits = params.split(\",\");\n    for (String split : splits) {\n      if (split.startsWith(\"type[\") == true) {\n        type = split.substring(\"type[\".length(), split.length() - 1);\n      } else if (split.startsWith(\"maxFrags[\") == true) {\n        maxFrags = (int) Float.parseFloat(split.substring(\"maxFrags[\".length(), split.length() - 1));\n      } else if (split.startsWith(\"fields[\") == true) {\n        String fieldNames = split.substring(\"fields[\".length(), split.length() - 1);\n        String[] fieldSplits = fieldNames.split(\";\");\n        hlFields = new HashSet<>(Arrays.asList(fieldSplits));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    this.params = params;\n    String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"mergeContiguous[\") == true){\n        mergeContiguous = Boolean.valueOf(splits[i].substring(\"mergeContiguous[\".length(),splits[i].length() - 1)).booleanValue();\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"141e140cd2260284f58cb5cf2b17da4027e82094":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","141e140cd2260284f58cb5cf2b17da4027e82094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["141e140cd2260284f58cb5cf2b17da4027e82094"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["141e140cd2260284f58cb5cf2b17da4027e82094","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"141e140cd2260284f58cb5cf2b17da4027e82094":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}