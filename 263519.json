{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    for(TupleStream solrStream : solrStreams) {\n      solrStream.close();\n    }\n\n    if(cache == null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    for(TupleStream solrStream : solrStreams) {\n      solrStream.close();\n    }\n\n    if(cache == null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d546b460d5224a9dd638ba26de3bd1a8fee17748","date":1450302116,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if(cache == null && cloudSolrClient != null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    for(TupleStream solrStream : solrStreams) {\n      solrStream.close();\n    }\n\n    if(cache == null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if(cache == null && cloudSolrClient != null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if(cache == null && cloudSolrClient != null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if(cache == null && cloudSolrClient != null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if(cache == null && cloudSolrClient != null) {\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#close().mjava","sourceNew":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   *  Closes the CloudSolrStream\n   **/\n  public void close() throws IOException {\n    if(solrStreams != null) {\n      for (TupleStream solrStream : solrStreams) {\n        solrStream.close();\n      }\n    }\n\n    if ((this.streamContext == null || this.streamContext.getSolrClientCache() == null) &&\n        cloudSolrClient != null) {\n\n      cloudSolrClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d546b460d5224a9dd638ba26de3bd1a8fee17748":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["d546b460d5224a9dd638ba26de3bd1a8fee17748","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d546b460d5224a9dd638ba26de3bd1a8fee17748"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d546b460d5224a9dd638ba26de3bd1a8fee17748","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d546b460d5224a9dd638ba26de3bd1a8fee17748","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["d546b460d5224a9dd638ba26de3bd1a8fee17748"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d546b460d5224a9dd638ba26de3bd1a8fee17748":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}