{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#DisjunctionScorer(Weight,List[Scorer],ScoreMode).mjava","commits":[{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":1,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#DisjunctionScorer(Weight,List[Scorer],ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#DisjunctionScorer(Weight,List[Scorer],boolean).mjava","sourceNew":"  protected DisjunctionScorer(Weight weight, List<Scorer> subScorers, ScoreMode scoreMode) throws IOException {\n    super(weight);\n    if (subScorers.size() <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n    this.subScorers = new DisiPriorityQueue(subScorers.size());\n    for (Scorer scorer : subScorers) {\n      final DisiWrapper w = new DisiWrapper(scorer);\n      this.subScorers.add(w);\n    }\n    this.needsScores = scoreMode != ScoreMode.COMPLETE_NO_SCORES;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      for (Scorer scorer : subScorers) {\n        scorer.advanceShallow(0);\n      }\n      this.blockMaxApprox = new BlockMaxDISI(new DisjunctionDISIApproximation(this.subScorers), this);\n      this.approximation = blockMaxApprox;\n    } else {\n      this.approximation = new DisjunctionDISIApproximation(this.subScorers);\n      this.blockMaxApprox = null;\n    }\n\n    boolean hasApproximation = false;\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n    // Compute matchCost as the average over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper w : this.subScorers) {\n      long costWeight = (w.cost <= 1) ? 1 : w.cost;\n      sumApproxCost += costWeight;\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        sumMatchCost += w.matchCost * costWeight;\n      }\n    }\n\n    if (hasApproximation == false) { // no sub scorer supports approximations\n      twoPhase = null;\n    } else {\n      final float matchCost = sumMatchCost / sumApproxCost;\n      twoPhase = new TwoPhase(approximation, matchCost);\n    }\n  }\n\n","sourceOld":"  protected DisjunctionScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) {\n    super(weight);\n    if (subScorers.size() <= 1) {\n      throw new IllegalArgumentException(\"There must be at least 2 subScorers\");\n    }\n    this.subScorers = new DisiPriorityQueue(subScorers.size());\n    for (Scorer scorer : subScorers) {\n      final DisiWrapper w = new DisiWrapper(scorer);\n      this.subScorers.add(w);\n    }\n    this.needsScores = needsScores;\n    this.approximation = new DisjunctionDISIApproximation(this.subScorers);\n\n    boolean hasApproximation = false;\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n    // Compute matchCost as the average over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper w : this.subScorers) {\n      long costWeight = (w.cost <= 1) ? 1 : w.cost;\n      sumApproxCost += costWeight;\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        sumMatchCost += w.matchCost * costWeight;\n      }\n    }\n\n    if (hasApproximation == false) { // no sub scorer supports approximations\n      twoPhase = null;\n    } else {\n      final float matchCost = sumMatchCost / sumApproxCost;\n      twoPhase = new TwoPhase(approximation, matchCost);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b559eeae2a2a767f75666f9b692659cfe1bf631"]},"commit2Childs":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}