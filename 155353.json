{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiKmeans().mjava","sourceNew":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","sourceNew":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","sourceNew":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","sourceNew":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiKmeans().mjava","sourceNew":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(\\\"doc1\\\", \\\"doc2\\\", \\\"doc3\\\", \\\"doc4\\\")),\" +\n        \"               f=multiKmeans(e, 2, 5),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"f8061ddd97f3352007d927dae445884a6f3d857b":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}