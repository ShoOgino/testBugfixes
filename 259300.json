{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      cli.setNextReader(context);\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      cli.setNextReader(context);\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      cli.setNextReader(context);\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      cli.setNextReader(context);\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new BinaryDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = randomCategoryListParams().createEncoder();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#test().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = randomCategoryListParams().createEncoder();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new BinaryDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    BytesRef buf = new BytesRef();\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      encoder.encode(IntsRef.deepCopyOf(data[i]), buf);\n      doc.add(new BinaryDocValuesField(\"f\", buf));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        assertTrue(\"no ordinals for document \" + doc, ordinals.length > 0);\n        for (int j = 0; j < ordinals.length; j++) {\n          assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n        }\n        totalCategories += ordinals.length;\n      }\n    }\n    assertEquals(\"Missing categories!\", 10, totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"]},"commit2Childs":{"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","c4015cd39dff8d4dec562d909f9766debac53aa6"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}