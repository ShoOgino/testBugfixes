{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    if (supportsDocValues) {\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n\n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n      expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n      expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n      assertMatches(multi, queryA, sort, expected);\n    \n      sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n      assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n      assertMatches(multi, queryF, sort, \"IZJ\");\n\n      sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n      assertMatches(multi, queryF, sort, \"JZI\");\n\n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n      sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n      sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n      assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n      assertMatches(multi, queryF, sort, \"ZJI\");\n\n      sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n      assertMatches(multi, queryF, sort, \"IJZ\");\n    }\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField (\"float\", SortField.Type.FLOAT)), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT, true)));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(useDocValues(new SortField(\"int\", SortField.Type.INT)), useDocValues(new SortField(\"float\", SortField.Type.FLOAT)));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT)));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(useDocValues(new SortField (\"int\", SortField.Type.INT, true)));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(useDocValues(new SortField(\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(useDocValues(new SortField(\"float\", SortField.Type.FLOAT)),useDocValues(new SortField(\"string\", getDVStringSortType())));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType())));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(useDocValues(new SortField (\"string\", getDVStringSortType(), true)));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":["090a0320e4de4a3674376aef96b9701f47564f86","57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#runMultiSorts(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(IndexSearcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT),new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT),new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT), new SortField(\"float_dv\", SortField.Type.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n      \n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n      \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT), new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType()));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n    \n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getTestName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}