{"path":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(msg() + \" Requested \" + numRequestedUpdates + \" updates from \" + leaderUrl + \" but retrieved \" + updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(msg() + \" Requested \" + numRequestedUpdates + \" updates from \" + leaderUrl + \" but retrieved \" + updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(msg() + \" Requested \" + numRequestedUpdates + \" updates from \" + leaderUrl + \" but retrieved \" + updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","sourceNew":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(\"{} Requested {} updated from {} but retrieved {}\", msg(), numRequestedUpdates, leaderUrl, updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(msg() + \" Requested \" + numRequestedUpdates + \" updates from \" + leaderUrl + \" but retrieved \" + updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#handleUpdates(NamedList[Object],long,IndexFingerprint).mjava","sourceNew":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(\"{} Requested {} updated from {} but retrieved {}\", msg(), numRequestedUpdates, leaderUrl, updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        @SuppressWarnings({\"unchecked\"})\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          @SuppressWarnings({\"unchecked\"})\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {\n    // missed updates from leader, it does not contains updates from bufferedUpdates\n    List<Object> updates = (List<Object>)rsp.get(\"updates\");\n\n    if (updates.size() < numRequestedUpdates) {\n      log.error(\"{} Requested {} updated from {} but retrieved {}\", msg(), numRequestedUpdates, leaderUrl, updates.size());\n      return false;\n    }\n\n    // by apply buffering update, replica will have fingerprint equals to leader.\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      for (Long bufferUpdate : bufferedUpdates) {\n        // updater will sort updates before apply\n        updates.add(recentUpdates.lookup(bufferUpdate));\n      }\n    }\n\n    // Leader will compute its fingerprint, then retrieve its recent updates versions.\n    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).\n    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.\n    // TODO leader should do fingerprint and retrieve recent updates version in atomic\n    if (leaderFingerprint != null) {\n      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {\n        List<Object> u = (List<Object>) e;\n        long version = (Long) u.get(1);\n        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;\n        // only DBI or DBQ in the gap (above) will satisfy this predicate\n        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);\n      });\n      if (!existDBIOrDBQInTheGap) {\n        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.\n        updates.removeIf(e -> {\n          List<Object> u = (List<Object>) e;\n          long version = (Long) u.get(1);\n          return version > leaderFingerprint.getMaxVersionEncountered();\n        });\n      }\n    }\n\n    try {\n      updater.applyUpdates(updates, leaderUrl);\n    } catch (Exception e) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"740d649f013f07efbeb73ca854f106c60166e7c0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","740d649f013f07efbeb73ca854f106c60166e7c0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}