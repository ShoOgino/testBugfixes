{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), scoreMode, approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), scoreMode, twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n\n          final TwoPhaseIterator predFuncValues = predicateValueSource.iterator(context, approxDISI);\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n            return predFuncValues.matches();\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.cost()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return predicateValueSource.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}