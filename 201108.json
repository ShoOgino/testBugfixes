{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1f7d2f42d19b4ca07d5685b650ef589be4763f","date":1354814273,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize() || node.getLevel() == 0) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();//the cell may not be strictly within but its close\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize() || node.getLevel() == 0) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();//the cell may not be strictly within but its close\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b43aca0f70aef9b914114574de1d0916ad2a32b","date":1360908147,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":null,"sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize() || node.getLevel() == 0) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();//the cell may not be strictly within but its close\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":null,"sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize() || node.getLevel() == 0) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();//the cell may not be strictly within but its close\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["ec1f7d2f42d19b4ca07d5685b650ef589be4763f","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ec1f7d2f42d19b4ca07d5685b650ef589be4763f"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["ec1f7d2f42d19b4ca07d5685b650ef589be4763f"],"ec1f7d2f42d19b4ca07d5685b650ef589be4763f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b43aca0f70aef9b914114574de1d0916ad2a32b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","ec1f7d2f42d19b4ca07d5685b650ef589be4763f"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ec1f7d2f42d19b4ca07d5685b650ef589be4763f":["3b41f996b22bd5518650f897d050088ff808ec03","407687e67faf6e1f02a211ca078d8e3eed631027","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}