{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(String,byte[],int).mjava","commits":[{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(String,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void postAndCheck(String baseUrl, byte[] bytes, int count) throws Exception {\n    postData(baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.length, String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrServer,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(String,byte[],int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrServer cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","sourceOld":"  private void postAndCheck(String baseUrl, byte[] bytes, int count) throws Exception {\n    postData(baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.length, String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0d196318cb8ce39ae32035f290cd1397833e472"],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"]},"commit2Childs":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d196318cb8ce39ae32035f290cd1397833e472":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d196318cb8ce39ae32035f290cd1397833e472"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}