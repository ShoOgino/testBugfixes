{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"101298ef523a301dde1044db3ed0f0521115c11a","date":1525719251,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            log.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              log.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          log.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48ac186ac196fcb830592acc9904593e0e74902e","date":1583195185,"type":3,"author":"Pushkar Raste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            log.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              log.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return (there doesn't seem to be a retry in this case.)\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          log.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n          if (bytesDownloaded >= size)\n            return 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            log.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              log.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          log.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            log.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the leader\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              log.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return (there doesn't seem to be a retry in this case.)\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          log.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n          if (bytesDownloaded >= size)\n            return 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            log.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          //TODO consider recoding the remaining logic to not use/need buf[]; instead use the internal buffer of fis\n          if (buf.length < packetSize) {\n            //This shouldn't happen since sender should use PACKET_SZ and we init the buf based on that too\n            buf = new byte[packetSize];\n          }\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              log.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return (there doesn't seem to be a retry in this case.)\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          log.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n          if (bytesDownloaded >= size)\n            return 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        log.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["48ac186ac196fcb830592acc9904593e0e74902e"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48ac186ac196fcb830592acc9904593e0e74902e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"101298ef523a301dde1044db3ed0f0521115c11a":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["101298ef523a301dde1044db3ed0f0521115c11a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","101298ef523a301dde1044db3ed0f0521115c11a"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"48ac186ac196fcb830592acc9904593e0e74902e":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"101298ef523a301dde1044db3ed0f0521115c11a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["48ac186ac196fcb830592acc9904593e0e74902e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}