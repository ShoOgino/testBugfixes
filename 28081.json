{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#feedQueryHelper(ReferenceCounter[StorageQuery]).mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#feedQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"/dev/null","sourceNew":"    private void feedQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n       BaseFeed feed = currentQuery.get().getLatestFeedQuery(feedId,25,1,this.configurator);\n       List<BaseEntry> entryList = feed.getEntries(); \n        assertTrue(\"listSize: \"+entryList.size(),entryList.size() == 25);\n        \n        BaseEntry tempEntry = null;\n        for (BaseEntry entry : entryList) {\n          \n            assertNotNull(\"entry\",entry);\n            if(tempEntry != null){\n                assertTrue(tempEntry.getUpdated().compareTo(entry.getUpdated())>=0) ;\n                tempEntry = entry;\n            }else\n                tempEntry = entry;\n            \n        }\n        // test sub retrieve sublist\n        int offset = 15;\n        int resultCount = 5; \n        feed = currentQuery.get().getLatestFeedQuery(feedId,resultCount,offset,this.configurator);\n        List<BaseEntry> entrySubList = feed.getEntries();\n        \n        assertTrue(\"listSize: \"+entrySubList.size(),entrySubList.size() == resultCount);\n        offset--;\n        for (BaseEntry entry : entrySubList) {\n            \n            assertEquals(entry.getId(),entryList.get(offset).getId());\n            offset++;\n            \n        }\n        \n        \n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#feedQueryHelper(ReferenceCounter[StorageQuery]).mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#feedQueryHelper(ReferenceCounter[StorageQuery]).mjava","sourceNew":"    private void feedQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n       BaseFeed feed = currentQuery.get().getLatestFeedQuery(feedId,25,1,this.configurator);\n       List<BaseEntry> entryList = feed.getEntries(); \n        assertTrue(\"listSize: \"+entryList.size(),entryList.size() == 25);\n        \n        BaseEntry tempEntry = null;\n        for (BaseEntry entry : entryList) {\n          \n            assertNotNull(\"entry\",entry);\n            if(tempEntry != null){\n                assertTrue(tempEntry.getUpdated().compareTo(entry.getUpdated())>=0) ;\n                tempEntry = entry;\n            }else\n                tempEntry = entry;\n            \n        }\n        // test sub retrieve sublist\n        int offset = 15;\n        int resultCount = 5; \n        feed = currentQuery.get().getLatestFeedQuery(feedId,resultCount,offset,this.configurator);\n        List<BaseEntry> entrySubList = feed.getEntries();\n        \n        assertTrue(\"listSize: \"+entrySubList.size(),entrySubList.size() == resultCount);\n        offset--;\n        for (BaseEntry entry : entrySubList) {\n            \n            assertEquals(entry.getId(),entryList.get(offset).getId());\n            offset++;\n            \n        }\n        \n        \n        \n    }\n\n","sourceOld":"    private void feedQueryHelper(ReferenceCounter<StorageQuery> currentQuery) throws IOException,  ParseException{\n       BaseFeed feed = currentQuery.get().getLatestFeedQuery(feedId,25,1,this.configurator);\n       List<BaseEntry> entryList = feed.getEntries(); \n        assertTrue(\"listSize: \"+entryList.size(),entryList.size() == 25);\n        \n        BaseEntry tempEntry = null;\n        for (BaseEntry entry : entryList) {\n          \n            assertNotNull(\"entry\",entry);\n            if(tempEntry != null){\n                assertTrue(tempEntry.getUpdated().compareTo(entry.getUpdated())>=0) ;\n                tempEntry = entry;\n            }else\n                tempEntry = entry;\n            \n        }\n        // test sub retrieve sublist\n        int offset = 15;\n        int resultCount = 5; \n        feed = currentQuery.get().getLatestFeedQuery(feedId,resultCount,offset,this.configurator);\n        List<BaseEntry> entrySubList = feed.getEntries();\n        \n        assertTrue(\"listSize: \"+entrySubList.size(),entrySubList.size() == resultCount);\n        offset--;\n        for (BaseEntry entry : entrySubList) {\n            \n            assertEquals(entry.getId(),entryList.get(offset).getId());\n            offset++;\n            \n        }\n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52754a40a1550056d5637c8992b4076b5ed77328":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}