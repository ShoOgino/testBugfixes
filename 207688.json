{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","pathOld":"/dev/null","sourceNew":"  // run threadsm with rate\r\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    for (int i = 0; i < t.length; i++) {\r\n      long waitMore = nextStartTime - System.currentTimeMillis();\r\n      if (waitMore > 0) {\r\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n        Thread.sleep(waitMore);\r\n      }\r\n      nextStartTime += delayStep; // this aims at avarage rate of starting threads. \r\n      t[i].start();\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","sourceNew":"  // run threadsm with rate\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    for (int i = 0; i < t.length; i++) {\n      long waitMore = nextStartTime - System.currentTimeMillis();\n      if (waitMore > 0) {\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n        Thread.sleep(waitMore);\n      }\n      nextStartTime += delayStep; // this aims at avarage rate of starting threads. \n      t[i].start();\n    }\n  }\n\n","sourceOld":"  // run threadsm with rate\r\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\r\n    long delayStep = (perMin ? 60000 : 1000) /rate;\r\n    long nextStartTime = System.currentTimeMillis();\r\n    for (int i = 0; i < t.length; i++) {\r\n      long waitMore = nextStartTime - System.currentTimeMillis();\r\n      if (waitMore > 0) {\r\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\r\n        Thread.sleep(waitMore);\r\n      }\r\n      nextStartTime += delayStep; // this aims at avarage rate of starting threads. \r\n      t[i].start();\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","sourceNew":"  // run threads with rate\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    for (int i = 0; i < t.length; i++) {\n      long waitMore = nextStartTime - System.currentTimeMillis();\n      if (waitMore > 0) {\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n        Thread.sleep(waitMore);\n      }\n      nextStartTime += delayStep; // this aims at average rate of starting threads. \n      t[i].start();\n    }\n  }\n\n","sourceOld":"  // run threadsm with rate\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    for (int i = 0; i < t.length; i++) {\n      long waitMore = nextStartTime - System.currentTimeMillis();\n      if (waitMore > 0) {\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n        Thread.sleep(waitMore);\n      }\n      nextStartTime += delayStep; // this aims at avarage rate of starting threads. \n      t[i].start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3353540ef2debe4c4c017e9d86e2c60f9e784336","date":1258197258,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(ParallelTask[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#startlThreadsWithRate(Thread[]).mjava","sourceNew":"  // run threads with rate\n  private void startlThreadsWithRate(ParallelTask[] t) throws InterruptedException {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    for (int i = 0; i < t.length; i++) {\n      long waitMore = nextStartTime - System.currentTimeMillis();\n      if (waitMore > 0) {\n        Thread.sleep(waitMore);\n      }\n      nextStartTime += delayStep; // this aims at average rate of starting threads. \n      t[i].start();\n    }\n  }\n\n","sourceOld":"  // run threads with rate\n  private void startlThreadsWithRate(Thread[] t) throws InterruptedException {\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    for (int i = 0; i < t.length; i++) {\n      long waitMore = nextStartTime - System.currentTimeMillis();\n      if (waitMore > 0) {\n        //System.out.println(\"thread wait: \"+waitMore+\" for rate: \"+ratePerMin+\" (delayStep=\"+delayStep+\")\");\n        Thread.sleep(waitMore);\n      }\n      nextStartTime += delayStep; // this aims at average rate of starting threads. \n      t[i].start();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3353540ef2debe4c4c017e9d86e2c60f9e784336"]},"commit2Childs":{"3353540ef2debe4c4c017e9d86e2c60f9e784336":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}