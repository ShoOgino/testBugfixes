{"path":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(HttpClient,List[Map[String,Object]]).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(HttpClient,List[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void downloadConfFiles(HttpClient client, List<Map<String, Object>> confFilesToDownload) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), client, true);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(HttpClient,List[Map[String,Object]],long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(HttpClient,List[Map[String,Object]]).mjava","sourceNew":"  private void downloadConfFiles(HttpClient client, List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), client, true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","sourceOld":"  private void downloadConfFiles(HttpClient client, List<Map<String, Object>> confFilesToDownload) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), client, true);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}