{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docsAndPositions(liveDocs, null);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      return terms.docsAndPositions(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermPositionsEnum(IndexReader,Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null if the term does\n   *  not exist or positions were not indexed. */\n  public static DocsAndPositionsEnum getTermPositionsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docsAndPositions(liveDocs, null);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2297162a22c55456e200caef2cbcb00fe381120","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e2297162a22c55456e200caef2cbcb00fe381120":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31f025ae60076ae95274433f3fe8e6ace2857a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}