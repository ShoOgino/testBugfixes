{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","commits":[{"id":"7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60","date":1360073698,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"/dev/null","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"/dev/null","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1));\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1));\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testFuzzySlopeExtendability().mjava","sourceNew":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1));\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","sourceOld":"  public void testFuzzySlopeExtendability() throws ParseException {\n    QueryParser qp = new QueryParser(\"a\",  new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n\n      @Override\n      Query handleBareFuzzy(String qfield, Token fuzzySlop, String termImage)\n          throws ParseException {\n        \n        if(fuzzySlop.image.endsWith(\"€\")) {\n          float fms = fuzzyMinSim;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1, fuzzySlop.image.length()-1)).floatValue();\n          } catch (Exception ignored) { }\n          float value = Float.parseFloat(termImage);\n          return getRangeQuery(qfield, Float.toString(value-fms/2.f), Float.toString(value+fms/2.f), true, true);\n        }\n        return super.handleBareFuzzy(qfield, fuzzySlop, termImage);\n      }\n      \n    };\n    assertEquals(qp.parse(\"a:[11.95 TO 12.95]\"), qp.parse(\"12.45~1€\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"ab68488225b6a6c357dda72ed11dedca9914a192":["379db3ad24c4f0214f30a122265a6d6be003a99d","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60"],"7d8f9bf9208a96bcfb173eb5ffd6a6de2fed3c60":["ff4227bb146f97aabae888091c19e48c88dbb0db","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}