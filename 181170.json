{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","commits":[{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, String exclude, int pre, int post) throws IOException{\n     SpanQuery iq = spanTermQuery(field, include);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#spanCount(String,int,String,int,int).mjava","sourceNew":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","sourceOld":"  private int spanCount(String include, int slop, String exclude, int pre, int post) throws IOException{\n     String[] includeTerms = include.split(\" +\");\n     SpanQuery iq = includeTerms.length == 1 ? spanTermQuery(field, include) : spanNearOrderedQuery(field, slop, includeTerms);\n     SpanQuery eq = spanTermQuery(field, exclude);\n     SpanQuery snq = spanNotQuery(iq, eq, pre, post);\n     Spans spans = snq.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n\n     int i = 0;\n     if (spans != null) {\n       while (spans.nextDoc() != Spans.NO_MORE_DOCS){\n         while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n           i++;\n         }\n       }\n     }\n     return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d57d8425f061bbc789486399b498a35f960765e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d57d8425f061bbc789486399b498a35f960765e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7d57d8425f061bbc789486399b498a35f960765e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d57d8425f061bbc789486399b498a35f960765e","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","7d57d8425f061bbc789486399b498a35f960765e"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7d57d8425f061bbc789486399b498a35f960765e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}