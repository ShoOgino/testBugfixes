{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#downHeap(int).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#downHeap(int).mjava","pathOld":"/dev/null","sourceNew":"  void downHeap(int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].doc < heap[j].doc) {\n        j = k;\n      }\n      if (heap[j].doc < node.doc) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].doc < heap[j].doc) {\n            j = k;\n          }\n        } while (j < size && heap[j].doc < node.doc);\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/DisiPriorityQueue#downHeap(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#downHeap(int).mjava","sourceNew":"  void downHeap(int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].doc < heap[j].doc) {\n        j = k;\n      }\n      if (heap[j].doc < node.doc) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].doc < heap[j].doc) {\n            j = k;\n          }\n        } while (j < size && heap[j].doc < node.doc);\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":"  void downHeap(int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].doc < heap[j].doc) {\n        j = k;\n      }\n      if (heap[j].doc < node.doc) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].doc < heap[j].doc) {\n            j = k;\n          }\n        } while (j < size && heap[j].doc < node.doc);\n        heap[i] = node;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["361b1afc99f68598c73d37074aec089c9c951586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"361b1afc99f68598c73d37074aec089c9c951586":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}