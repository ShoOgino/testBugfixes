{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#waitForDaemon(String,String,String,String,Map[String,Object]).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#waitForDaemon(String,String,String,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  // XXX currently this is complicated to due a bug in the way the daemon 'list'\n  // XXX operation is implemented - see SOLR-13245. We need to query the actual\n  // XXX SolrCore where the daemon is running\n  private void waitForDaemon(String daemonName, String daemonUrl, String sourceCollection, String targetCollection, Map<String, Object> reindexingState) throws Exception {\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      q.set(\"action\", \"list\");\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      boolean isRunning;\n      int statusCheck = 0;\n      do {\n        isRunning = false;\n        statusCheck++;\n        try {\n          NamedList<Object> rsp = solrClient.request(req);\n          Map<String, Object> rs = (Map<String, Object>)rsp.get(\"result-set\");\n          if (rs == null || rs.isEmpty()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          List<Object> list = (List<Object>)rs.get(\"docs\");\n          if (list == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          if (list.isEmpty()) { // finished?\n            break;\n          }\n          for (Object o : list) {\n            Map<String, Object> map = (Map<String, Object>)o;\n            String id = (String)map.get(\"id\");\n            if (daemonName.equals(id)) {\n              isRunning = true;\n              // fail here\n              TestInjection.injectReindexFailure();\n              break;\n            }\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception waiting for daemon \" +\n              daemonName + \" at \" + daemonUrl, e);\n        }\n        if (statusCheck % 5 == 0) {\n          reindexingState.put(\"processedDocs\", getNumberOfDocs(targetCollection));\n          setReindexingState(sourceCollection, State.RUNNING, reindexingState);\n        }\n        ocmh.cloudManager.getTimeSource().sleep(2000);\n      } while (isRunning && !maybeAbort(sourceCollection));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#waitForDaemon(String,String,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#waitForDaemon(String,String,String,String,Map[String,Object]).mjava","sourceNew":"  // XXX currently this is complicated to due a bug in the way the daemon 'list'\n  // XXX operation is implemented - see SOLR-13245. We need to query the actual\n  // XXX SolrCore where the daemon is running\n  @SuppressWarnings({\"unchecked\"})\n  private void waitForDaemon(String daemonName, String daemonUrl, String sourceCollection, String targetCollection, Map<String, Object> reindexingState) throws Exception {\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      q.set(\"action\", \"list\");\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      boolean isRunning;\n      int statusCheck = 0;\n      do {\n        isRunning = false;\n        statusCheck++;\n        try {\n          NamedList<Object> rsp = solrClient.request(req);\n          Map<String, Object> rs = (Map<String, Object>)rsp.get(\"result-set\");\n          if (rs == null || rs.isEmpty()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          List<Object> list = (List<Object>)rs.get(\"docs\");\n          if (list == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          if (list.isEmpty()) { // finished?\n            break;\n          }\n          for (Object o : list) {\n            Map<String, Object> map = (Map<String, Object>)o;\n            String id = (String)map.get(\"id\");\n            if (daemonName.equals(id)) {\n              isRunning = true;\n              // fail here\n              TestInjection.injectReindexFailure();\n              break;\n            }\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception waiting for daemon \" +\n              daemonName + \" at \" + daemonUrl, e);\n        }\n        if (statusCheck % 5 == 0) {\n          reindexingState.put(\"processedDocs\", getNumberOfDocs(targetCollection));\n          setReindexingState(sourceCollection, State.RUNNING, reindexingState);\n        }\n        ocmh.cloudManager.getTimeSource().sleep(2000);\n      } while (isRunning && !maybeAbort(sourceCollection));\n    }\n  }\n\n","sourceOld":"  // XXX currently this is complicated to due a bug in the way the daemon 'list'\n  // XXX operation is implemented - see SOLR-13245. We need to query the actual\n  // XXX SolrCore where the daemon is running\n  private void waitForDaemon(String daemonName, String daemonUrl, String sourceCollection, String targetCollection, Map<String, Object> reindexingState) throws Exception {\n    HttpClient client = ocmh.overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();\n    try (HttpSolrClient solrClient = new HttpSolrClient.Builder()\n        .withHttpClient(client)\n        .withBaseSolrUrl(daemonUrl).build()) {\n      ModifiableSolrParams q = new ModifiableSolrParams();\n      q.set(CommonParams.QT, \"/stream\");\n      q.set(\"action\", \"list\");\n      q.set(CommonParams.DISTRIB, false);\n      QueryRequest req = new QueryRequest(q);\n      boolean isRunning;\n      int statusCheck = 0;\n      do {\n        isRunning = false;\n        statusCheck++;\n        try {\n          NamedList<Object> rsp = solrClient.request(req);\n          Map<String, Object> rs = (Map<String, Object>)rsp.get(\"result-set\");\n          if (rs == null || rs.isEmpty()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          List<Object> list = (List<Object>)rs.get(\"docs\");\n          if (list == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can't find daemon list: missing result-set: \" + Utils.toJSONString(rsp));\n          }\n          if (list.isEmpty()) { // finished?\n            break;\n          }\n          for (Object o : list) {\n            Map<String, Object> map = (Map<String, Object>)o;\n            String id = (String)map.get(\"id\");\n            if (daemonName.equals(id)) {\n              isRunning = true;\n              // fail here\n              TestInjection.injectReindexFailure();\n              break;\n            }\n          }\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception waiting for daemon \" +\n              daemonName + \" at \" + daemonUrl, e);\n        }\n        if (statusCheck % 5 == 0) {\n          reindexingState.put(\"processedDocs\", getNumberOfDocs(targetCollection));\n          setReindexingState(sourceCollection, State.RUNNING, reindexingState);\n        }\n        ocmh.cloudManager.getTimeSource().sleep(2000);\n      } while (isRunning && !maybeAbort(sourceCollection));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"]},"commit2Childs":{"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}