{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   * @param registry registry name\n   * @param metrics metric set to register\n   * @param force if true then already existing metrics with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, boolean force, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (force && existingMetrics.containsKey(fullName)) {\n          metricRegistry.remove(fullName);\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   * @param registry registry name\n   * @param metrics metric set to register\n   * @param force if true then already existing metrics with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, boolean force, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (force && existingMetrics.containsKey(fullName)) {\n          metricRegistry.remove(fullName);\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","sourceNew":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   *\n   * @param registry   registry name\n   * @param metrics    metric set to register\n   * @param force      if true then already existing metrics with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, boolean force, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (force && existingMetrics.containsKey(fullName)) {\n          metricRegistry.remove(fullName);\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   * @param registry registry name\n   * @param metrics metric set to register\n   * @param force if true then already existing metrics with the same name will be replaced.\n   *                     When false and a metric with the same name already exists an exception\n   *                     will be thrown.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, boolean force, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (force && existingMetrics.containsKey(fullName)) {\n          metricRegistry.remove(fullName);\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d5f160125c0bc785bf95466c3633984b77845d0","date":1585162097,"type":5,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,ResolutionStrategy,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerAll(String,MetricSet,boolean,String...).mjava","sourceNew":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   *\n   * @param registry   registry name\n   * @param metrics    metric set to register\n   * @param strategy   the conflict resolution strategy to use if the named metric already exists.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, ResolutionStrategy strategy, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (existingMetrics.containsKey(fullName)) {\n          if (strategy == ResolutionStrategy.REPLACE) {\n            metricRegistry.remove(fullName);\n          } else if (strategy == ResolutionStrategy.IGNORE) {\n            continue;\n          } // strategy == ERROR will fail when we try to register later\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Register all metrics in the provided {@link MetricSet}, optionally skipping those that\n   * already exist.\n   *\n   * @param registry   registry name\n   * @param metrics    metric set to register\n   * @param force      if true then already existing metrics with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricPath (optional) additional top-most metric name path elements\n   * @throws Exception if a metric with this name already exists.\n   */\n  public void registerAll(String registry, MetricSet metrics, boolean force, String... metricPath) throws Exception {\n    MetricRegistry metricRegistry = registry(registry);\n    synchronized (metricRegistry) {\n      Map<String, Metric> existingMetrics = metricRegistry.getMetrics();\n      for (Map.Entry<String, Metric> entry : metrics.getMetrics().entrySet()) {\n        String fullName = mkName(entry.getKey(), metricPath);\n        if (force && existingMetrics.containsKey(fullName)) {\n          metricRegistry.remove(fullName);\n        }\n        metricRegistry.register(fullName, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d5f160125c0bc785bf95466c3633984b77845d0":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d5f160125c0bc785bf95466c3633984b77845d0"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["0265144286422ad99682a00904cc2536b79c8535"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"1d5f160125c0bc785bf95466c3633984b77845d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["1d5f160125c0bc785bf95466c3633984b77845d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}