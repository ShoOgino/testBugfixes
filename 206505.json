{"path":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next(Token).mjava","commits":[{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Token next(Token token) throws IOException {\n    Token t = input.next(token);\n    if (t != null) {\n\n      char[] termBuffer = t.termBuffer();\n      int termBufferLength = t.termLength();\n      char[] backup = null;\n      if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n        //make a backup in case we exceed the word count\n        System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n      }\n      if (termBuffer.length < factory.maxTokenLength) {\n        int wordCount = 0;\n\n        int lastWordStart = 0;\n        for (int i = 0; i < termBufferLength; i++) {\n          char c = termBuffer[i];\n          if (c <= ' ' || c == '.') {\n            int len = i - lastWordStart;\n            if (len > 0) {\n              factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n              lastWordStart = i + 1;\n              i++;\n            }\n          }\n        }\n\n        // process the last word\n        if (lastWordStart < termBuffer.length) {\n          factory.processWord(termBuffer, lastWordStart, termBuffer.length - lastWordStart, wordCount++);\n        }\n\n        if (wordCount > factory.maxWordCount) {\n          t.setTermBuffer(backup, 0, termBufferLength);\n        }\n      }\n    }\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["88a8482af50988e3736e33d6d01a6d5155d24068"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88a8482af50988e3736e33d6d01a6d5155d24068","date":1249602889,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next(Token).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next(Token).mjava","sourceNew":"  @Override\n  public Token next(Token token) throws IOException {\n    Token t = input.next(token);\n    if (t != null) {\n\n      char[] termBuffer = t.termBuffer();\n      int termBufferLength = t.termLength();\n      char[] backup = null;\n      if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n        //make a backup in case we exceed the word count\n        System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n      }\n      if (termBufferLength < factory.maxTokenLength) {\n        int wordCount = 0;\n\n        int lastWordStart = 0;\n        for (int i = 0; i < termBufferLength; i++) {\n          char c = termBuffer[i];\n          if (c <= ' ' || c == '.') {\n            int len = i - lastWordStart;\n            if (len > 0) {\n              factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n              lastWordStart = i + 1;\n              i++;\n            }\n          }\n        }\n\n        // process the last word\n        if (lastWordStart < termBufferLength) {\n          factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n        }\n\n        if (wordCount > factory.maxWordCount) {\n          t.setTermBuffer(backup, 0, termBufferLength);\n        }\n      }\n    }\n    return t;\n  }\n\n","sourceOld":"  @Override\n  public Token next(Token token) throws IOException {\n    Token t = input.next(token);\n    if (t != null) {\n\n      char[] termBuffer = t.termBuffer();\n      int termBufferLength = t.termLength();\n      char[] backup = null;\n      if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n        //make a backup in case we exceed the word count\n        System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n      }\n      if (termBuffer.length < factory.maxTokenLength) {\n        int wordCount = 0;\n\n        int lastWordStart = 0;\n        for (int i = 0; i < termBufferLength; i++) {\n          char c = termBuffer[i];\n          if (c <= ' ' || c == '.') {\n            int len = i - lastWordStart;\n            if (len > 0) {\n              factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n              lastWordStart = i + 1;\n              i++;\n            }\n          }\n        }\n\n        // process the last word\n        if (lastWordStart < termBuffer.length) {\n          factory.processWord(termBuffer, lastWordStart, termBuffer.length - lastWordStart, wordCount++);\n        }\n\n        if (wordCount > factory.maxWordCount) {\n          t.setTermBuffer(backup, 0, termBufferLength);\n        }\n      }\n    }\n    return t;\n  }\n\n","bugFix":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#next(Token).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Token next(Token token) throws IOException {\n    Token t = input.next(token);\n    if (t != null) {\n\n      char[] termBuffer = t.termBuffer();\n      int termBufferLength = t.termLength();\n      char[] backup = null;\n      if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n        //make a backup in case we exceed the word count\n        System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n      }\n      if (termBufferLength < factory.maxTokenLength) {\n        int wordCount = 0;\n\n        int lastWordStart = 0;\n        for (int i = 0; i < termBufferLength; i++) {\n          char c = termBuffer[i];\n          if (c <= ' ' || c == '.') {\n            int len = i - lastWordStart;\n            if (len > 0) {\n              factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n              lastWordStart = i + 1;\n              i++;\n            }\n          }\n        }\n\n        // process the last word\n        if (lastWordStart < termBufferLength) {\n          factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n        }\n\n        if (wordCount > factory.maxWordCount) {\n          t.setTermBuffer(backup, 0, termBufferLength);\n        }\n      }\n    }\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["88a8482af50988e3736e33d6d01a6d5155d24068"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"88a8482af50988e3736e33d6d01a6d5155d24068":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"be29e0e2cef1fd569147732e48caf8538790339b":[],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["88a8482af50988e3736e33d6d01a6d5155d24068"],"88a8482af50988e3736e33d6d01a6d5155d24068":["be29e0e2cef1fd569147732e48caf8538790339b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["be29e0e2cef1fd569147732e48caf8538790339b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}