{"path":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","commits":[{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertTrue( rf.getTransformer() instanceof ExplainAugmenter );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n\n    \n    // From ConvertedLegacyTest, maybe we drop support?\n    rf = new ReturnFields( req(\"fl\", \"  \") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertTrue( rf.getTransformer() instanceof ExplainAugmenter );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n\n    \n    // From ConvertedLegacyTest, maybe we drop support?\n    rf = new ReturnFields( req(\"fl\", \"  \") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"785c5e6bc8889b740445ed7f2b278a442ad92f7f","date":1307558822,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"_explain_\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"_explain_\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c1c76c72faecc7c9b683ad67e99240c975ee37b3","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c26f00b574427b55127e869b935845554afde1fa":["785c5e6bc8889b740445ed7f2b278a442ad92f7f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["d619839baa8ce5503e496b94a9e42ad6f079293f","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","794957d0f3853445bdf9319bfb72f8b8c2443a7d","d619839baa8ce5503e496b94a9e42ad6f079293f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}