{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","commits":[{"id":"d9d5abf772262a05c74afddcadc95c4bdab07f1f","date":1381747682,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"/dev/null","sourceNew":"  public Range keyHashRange(String routeKey) {\n    int idx = routeKey.indexOf(separator);\n    if (idx < 0) {\n      throw new IllegalArgumentException(\"Route key must be a composite id\");\n    }\n    String part1 = routeKey.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int min = hash & m1;\n    int max = min | m2;\n    return new Range(min, max);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b509abc8bfbaa6d2583fdc203d0f830aeffaadb7","date":1381950977,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","sourceNew":"  public Range keyHashRange(String routeKey) {\n    int idx = routeKey.indexOf(separator);\n    if (idx < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n    String part1 = routeKey.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int min = hash & m1;\n    int max = min | m2;\n    return new Range(min, max);\n  }\n\n","sourceOld":"  public Range keyHashRange(String routeKey) {\n    int idx = routeKey.indexOf(separator);\n    if (idx < 0) {\n      throw new IllegalArgumentException(\"Route key must be a composite id\");\n    }\n    String part1 = routeKey.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int min = hash & m1;\n    int max = min | m2;\n    return new Range(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7623716022a9a68898e329e8ffe6c36d168fba7","date":1384524101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","sourceNew":"  /**\n   * Get Range for a given CompositeId based route key\n   * @param routeKey\n   * @return\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","sourceOld":"  public Range keyHashRange(String routeKey) {\n    int idx = routeKey.indexOf(separator);\n    if (idx < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n    String part1 = routeKey.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int min = hash & m1;\n    int max = min | m2;\n    return new Range(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb540371f17b546959362a8ffc88a100b4545703","date":1384531705,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","sourceNew":"  /**\n   * Get Range for a given CompositeId based route key\n   * @param routeKey to return Range for\n   * @return Range for given routeKey\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","sourceOld":"  /**\n   * Get Range for a given CompositeId based route key\n   * @param routeKey\n   * @return\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe","date":1384867512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","sourceNew":"  /**\n   * Get Range for a given CompositeId based route key\n   *\n   * @param routeKey to return Range for\n   * @return Range for given routeKey\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","sourceOld":"  /**\n   * Get Range for a given CompositeId based route key\n   * @param routeKey to return Range for\n   * @return Range for given routeKey\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#keyHashRange(String).mjava","sourceNew":"  /**\n   * Get Range for a given CompositeId based route key\n   *\n   * @param routeKey to return Range for\n   * @return Range for given routeKey\n   */\n  public Range keyHashRange(String routeKey) {\n    if (routeKey.indexOf(SEPARATOR) < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n\n    return new KeyParser(routeKey).getRange();\n  }\n\n","sourceOld":"  public Range keyHashRange(String routeKey) {\n    int idx = routeKey.indexOf(separator);\n    if (idx < 0) {\n      int hash = sliceHash(routeKey, null, null, null);\n      return new Range(hash, hash);\n    }\n    String part1 = routeKey.substring(0, idx);\n    int commaIdx = part1.indexOf(bitsSeparator);\n    int m1 = mask1;\n    int m2 = mask2;\n\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    int hash = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int min = hash & m1;\n    int max = min | m2;\n    return new Range(min, max);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["b509abc8bfbaa6d2583fdc203d0f830aeffaadb7","c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"],"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe":["bb540371f17b546959362a8ffc88a100b4545703"],"bb540371f17b546959362a8ffc88a100b4545703":["f7623716022a9a68898e329e8ffe6c36d168fba7"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["b509abc8bfbaa6d2583fdc203d0f830aeffaadb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"],"b509abc8bfbaa6d2583fdc203d0f830aeffaadb7":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["b509abc8bfbaa6d2583fdc203d0f830aeffaadb7"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb540371f17b546959362a8ffc88a100b4545703":["c69c8a70590c37c628ba74e14c0ffd0b4d89f7fe"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["bb540371f17b546959362a8ffc88a100b4545703"],"b509abc8bfbaa6d2583fdc203d0f830aeffaadb7":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f7623716022a9a68898e329e8ffe6c36d168fba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}