{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) throws Exception {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) throws Exception {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) throws Exception {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":["53b6c192847de8643a5da505cc433cbf8476a175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) throws Exception {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}