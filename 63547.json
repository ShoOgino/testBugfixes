{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":null,"sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","date":1269556173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testExampleConfig().mjava","sourceNew":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  @Test\n  public void testExampleConfig() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    String docID = \"1112211111\";\n    doc.addField( \"id\", docID, 1.0f );\n    doc.addField( \"name\", \"my name!\", 1.0f );\n    \n    Assert.assertEquals( null, doc.getField(\"foo\") );\n    Assert.assertTrue(doc.getField(\"name\").getValue() != null );\n        \n    UpdateResponse upres = server.add( doc ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"id:\"+docID );\n    QueryResponse response = server.query( query );\n    \n    Assert.assertEquals(docID, response.getResults().get(0).getFieldValue(\"id\") );\n    \n    // Now add a few docs for facet testing...\n    List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"2\", 1.0f );\n    doc2.addField( \"inStock\", true, 1.0f );\n    doc2.addField( \"price\", 2, 1.0f );\n    doc2.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc2);\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"3\", 1.0f );\n    doc3.addField( \"inStock\", false, 1.0f );\n    doc3.addField( \"price\", 3, 1.0f );\n    doc3.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc3);\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"4\", 1.0f );\n    doc4.addField( \"inStock\", true, 1.0f );\n    doc4.addField( \"price\", 4, 1.0f );\n    doc4.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc4);\n    SolrInputDocument doc5 = new SolrInputDocument();\n    doc5.addField( \"id\", \"5\", 1.0f );\n    doc5.addField( \"inStock\", false, 1.0f );\n    doc5.addField( \"price\", 5, 1.0f );\n    doc5.addField( \"timestamp_dt\", new java.util.Date(), 1.0f );\n    docs.add(doc5);\n    \n    upres = server.add( docs ); \n    // System.out.println( \"ADD:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.commit( true, true );\n    // System.out.println( \"COMMIT:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    upres = server.optimize( true, true );\n    // System.out.println( \"OPTIMIZE:\"+upres.getResponse() );\n    Assert.assertEquals(0, upres.getStatus());\n    \n    query = new SolrQuery(\"*:*\");\n    query.addFacetQuery(\"price:[* TO 2]\");\n    query.addFacetQuery(\"price:[2 TO 4]\");\n    query.addFacetQuery(\"price:[5 TO *]\");\n    query.addFacetField(\"inStock\");\n    query.addFacetField(\"price\");\n    query.addFacetField(\"timestamp_dt\");\n    query.removeFilterQuery(\"inStock:true\");\n    \n    response = server.query( query );\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(5, response.getResults().getNumFound() );\n    Assert.assertEquals(3, response.getFacetQuery().size());    \n    Assert.assertEquals(2, response.getFacetField(\"inStock\").getValueCount());\n    Assert.assertEquals(4, response.getFacetField(\"price\").getValueCount());\n    \n    // test a second query, test making a copy of the main query\n    SolrQuery query2 = query.getCopy();\n    query2.addFilterQuery(\"inStock:true\");\n    response = server.query( query2 );\n    Assert.assertEquals(1, query2.getFilterQueries().length);\n    Assert.assertEquals(0, response.getStatus());\n    Assert.assertEquals(2, response.getResults().getNumFound() );\n    Assert.assertFalse(query.getFilterQueries() == query2.getFilterQueries());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"c26f00b574427b55127e869b935845554afde1fa":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}