{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","commits":[{"id":"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","date":1527210146,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],String).mjava","sourceNew":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivilent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivilent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","sourceNew":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivalent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivilent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],String).mjava","sourceNew":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivalent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","sourceOld":"  /**\n   * Given a set of (potentially nested) term facets, and a base query string, asserts that \n   * the actual counts returned when executing that query with those facets match the expected results\n   * of filtering on the equivalent facet terms+domain\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           Map<String,TermFacet> expected,\n                                           final String query) throws SolrServerException, IOException {\n\n    final SolrParams baseParams = params(\"q\", query, \"rows\",\"0\");\n    final SolrParams facetParams = params(\"json.facet\", \"\"+TermFacet.toJSONFacetParamValue(expected));\n    final SolrParams initParams = SolrParams.wrapAppended(facetParams, baseParams);\n    \n    log.info(\"Doing full run: {}\", initParams);\n\n    QueryResponse rsp = null;\n    // JSON Facets not (currently) available from QueryResponse...\n    NamedList topNamedList = null;\n    try {\n      rsp = (new QueryRequest(initParams)).process(getRandClient(random()));\n      assertNotNull(initParams + \" is null rsp?\", rsp);\n      topNamedList = rsp.getResponse();\n      assertNotNull(initParams + \" is null topNamedList?\", topNamedList);\n    } catch (Exception e) {\n      throw new RuntimeException(\"init query failed: \" + initParams + \": \" + \n                                 e.getMessage(), e);\n    }\n    try {\n      final NamedList facetResponse = (NamedList) topNamedList.get(\"facets\");\n      assertNotNull(\"null facet results?\", facetResponse);\n      assertEquals(\"numFound mismatch with top count?\",\n                   rsp.getResults().getNumFound(), ((Number)facetResponse.get(\"count\")).longValue());\n      if (0 == rsp.getResults().getNumFound()) {\n        // when the query matches nothing, we should expect no top level facets\n        expected = Collections.emptyMap();\n      }\n      assertFacetCountsAreCorrect(maxBucketsToCheck, expected, baseParams, facetResponse);\n    } catch (AssertionError e) {\n      throw new AssertionError(initParams + \" ===> \" + topNamedList + \" --> \" + e.getMessage(), e);\n    } finally {\n      log.info(\"Ending full run\"); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}