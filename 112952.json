{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTest(BitSet,Directory).mjava","commits":[{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTest(BitSet,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#doTest(FixedBitSet,Directory).mjava","sourceNew":"  private void doTest(BitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n    long length;\n    int jumpTableentryCount;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      jumpTableentryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      assertSingleStepEquality(disi, disi2);\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int disi2length = set.length();\n        assertAdvanceExactRandomized(disi, disi2, disi2length, step);\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","sourceOld":"  private void doTest(FixedBitSet set, Directory dir) throws IOException {\n    final int cardinality = set.cardinality();\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n    long length;\n    int jumpTableentryCount;\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      jumpTableentryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      length = out.getFilePointer();\n    }\n\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n      BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n      assertSingleStepEquality(disi, disi2);\n    }\n\n    for (int step : new int[] {1, 10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        assertAdvanceEquality(disi, disi2, step);\n      }\n    }\n\n    for (int step : new int[] {10, 100, 1000, 10000, 100000}) {\n      try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexedDISI disi = new IndexedDISI(in, 0L, length, jumpTableentryCount, denseRankPower, cardinality);\n        BitSetIterator disi2 = new BitSetIterator(set, cardinality);\n        int disi2length = set.length();\n        assertAdvanceExactRandomized(disi, disi2, disi2length, step);\n      }\n    }\n\n    dir.deleteFile(\"foo\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}