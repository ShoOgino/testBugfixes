{"path":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","commits":[{"id":"4bf528aa2b9571ce1ec892ecf726201ef1e404e3","date":1288732150,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129258e6ec9684fea792a51eda00f2e0e03c1480","date":1289770450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e368cad6a1cc3992f44375801ea528f49b542e","date":1290206535,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32d2a50662592e12dae8ea10960cce611c7ba1c","date":1290627254,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        createMainResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c800a92bdddc053fba2b1b33e434f7536a2daae1","date":1290628554,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.Simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        createMainResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.Simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      NamedList groupResult = commonResponse();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.Simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.Simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    @Override\n    void finish() throws IOException {\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.Simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      int skipCount = offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        addDocList(nl, groupDocs.collector);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#finish().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      if (result == null) {\n        return;\n      }\n\n      // handle case of rows=0\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","129258e6ec9684fea792a51eda00f2e0e03c1480"],"c32d2a50662592e12dae8ea10960cce611c7ba1c":["43e368cad6a1cc3992f44375801ea528f49b542e"],"c26f00b574427b55127e869b935845554afde1fa":["9c7cdfe5a1ea9db97faa404b251fa644faa73597","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c800a92bdddc053fba2b1b33e434f7536a2daae1"],"43e368cad6a1cc3992f44375801ea528f49b542e":["129258e6ec9684fea792a51eda00f2e0e03c1480"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c800a92bdddc053fba2b1b33e434f7536a2daae1","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["c800a92bdddc053fba2b1b33e434f7536a2daae1"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","c800a92bdddc053fba2b1b33e434f7536a2daae1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["85a883878c0af761245ab048babc63d099f835f3","129258e6ec9684fea792a51eda00f2e0e03c1480"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"c32d2a50662592e12dae8ea10960cce611c7ba1c":["c800a92bdddc053fba2b1b33e434f7536a2daae1"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"c800a92bdddc053fba2b1b33e434f7536a2daae1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7edfc3f7caa7b49a18fe367692768b33b018e9db","9c7cdfe5a1ea9db97faa404b251fa644faa73597","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"43e368cad6a1cc3992f44375801ea528f49b542e":["c32d2a50662592e12dae8ea10960cce611c7ba1c"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","43e368cad6a1cc3992f44375801ea528f49b542e"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["c26f00b574427b55127e869b935845554afde1fa","7edfc3f7caa7b49a18fe367692768b33b018e9db","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}