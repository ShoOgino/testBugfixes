{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestAnalyzerWrapper#testSourceDelegation().mjava","commits":[{"id":"fac252ef8e3d0bbff9303ffbf675e824a729dfaf","date":1537347776,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestAnalyzerWrapper#testSourceDelegation().mjava","pathOld":"/dev/null","sourceNew":"  public void testSourceDelegation() throws IOException {\n\n    AtomicBoolean sourceCalled = new AtomicBoolean(false);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(r -> {\n          sourceCalled.set(true);\n        }, new CannedTokenStream());\n      }\n    };\n\n    Analyzer wrapped = new AnalyzerWrapper(analyzer.getReuseStrategy()) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return analyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        return new TokenStreamComponents(components.getSource(), new LowerCaseFilter(components.getTokenStream()));\n      }\n    };\n\n    try (TokenStream ts = wrapped.tokenStream(\"\", \"text\")) {\n      assertTrue(sourceCalled.get());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestAnalyzerWrapper#testSourceDelegation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestAnalyzerWrapper#testSourceDelegation().mjava","sourceNew":"  public void testSourceDelegation() throws IOException {\n\n    AtomicBoolean sourceCalled = new AtomicBoolean(false);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(r -> {\n          sourceCalled.set(true);\n        }, new CannedTokenStream());\n      }\n    };\n\n    Analyzer wrapped = new AnalyzerWrapper(analyzer.getReuseStrategy()) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return analyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        return new TokenStreamComponents(components.getSource(), new LowerCaseFilter(components.getTokenStream()));\n      }\n    };\n\n    try (TokenStream ts = wrapped.tokenStream(\"\", \"text\")) {\n      assert ts != null;\n      assertTrue(sourceCalled.get());\n    }\n\n  }\n\n","sourceOld":"  public void testSourceDelegation() throws IOException {\n\n    AtomicBoolean sourceCalled = new AtomicBoolean(false);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(r -> {\n          sourceCalled.set(true);\n        }, new CannedTokenStream());\n      }\n    };\n\n    Analyzer wrapped = new AnalyzerWrapper(analyzer.getReuseStrategy()) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return analyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        return new TokenStreamComponents(components.getSource(), new LowerCaseFilter(components.getTokenStream()));\n      }\n    };\n\n    try (TokenStream ts = wrapped.tokenStream(\"\", \"text\")) {\n      assertTrue(sourceCalled.get());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"]},"commit2Childs":{"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}