{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            int[] docIDToIDArray = new int[sr.maxDoc()];\n            for(int i=0;i<sr.maxDoc();i++) {\n              try {\n                assertEquals(i, docIDToID.nextDoc());\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n              docIDToIDArray[i] = (int) docIDToID.longValue();\n            }\n            while(System.nanoTime() < END_TIME) {\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                try {\n                  SortedDocValues dvs = sr.getSortedDocValues(\"stringdv\");\n                  assertEquals(docID, dvs.advance(docID));\n                  assertEquals(docValues.get(docIDToIDArray[docID]), dvs.binaryValue());\n                } catch (IOException ioe) {\n                  throw new RuntimeException(ioe);\n                }\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            int[] docIDToIDArray = new int[sr.maxDoc()];\n            for(int i=0;i<sr.maxDoc();i++) {\n              try {\n                assertEquals(i, docIDToID.nextDoc());\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n              docIDToIDArray[i] = (int) docIDToID.longValue();\n            }\n            while(System.nanoTime() < END_TIME) {\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                try {\n                  SortedDocValues dvs = sr.getSortedDocValues(\"stringdv\");\n                  assertEquals(docID, dvs.advance(docID));\n                  assertEquals(docValues.get(docIDToIDArray[docID]), dvs.binaryValue());\n                } catch (IOException ioe) {\n                  throw new RuntimeException(ioe);\n                }\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            int[] docIDToIDArray = new int[sr.maxDoc()];\n            for(int i=0;i<sr.maxDoc();i++) {\n              try {\n                assertEquals(i, docIDToID.nextDoc());\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n              try {\n                docIDToIDArray[i] = (int) docIDToID.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            while(System.nanoTime() < END_TIME) {\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                try {\n                  SortedDocValues dvs = sr.getSortedDocValues(\"stringdv\");\n                  assertEquals(docID, dvs.advance(docID));\n                  assertEquals(docValues.get(docIDToIDArray[docID]), dvs.binaryValue());\n                } catch (IOException ioe) {\n                  throw new RuntimeException(ioe);\n                }\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            int[] docIDToIDArray = new int[sr.maxDoc()];\n            for(int i=0;i<sr.maxDoc();i++) {\n              try {\n                assertEquals(i, docIDToID.nextDoc());\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n              docIDToIDArray[i] = (int) docIDToID.longValue();\n            }\n            while(System.nanoTime() < END_TIME) {\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                try {\n                  SortedDocValues dvs = sr.getSortedDocValues(\"stringdv\");\n                  assertEquals(docID, dvs.advance(docID));\n                  assertEquals(docValues.get(docIDToIDArray[docID]), dvs.binaryValue());\n                } catch (IOException ioe) {\n                  throw new RuntimeException(ioe);\n                }\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"/dev/null","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            int[] docIDToIDArray = new int[sr.maxDoc()];\n            for(int i=0;i<sr.maxDoc();i++) {\n              try {\n                assertEquals(i, docIDToID.nextDoc());\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n              try {\n                docIDToIDArray[i] = (int) docIDToID.longValue();\n              } catch (IOException ioe) {\n                throw new RuntimeException(ioe);\n              }\n            }\n            while(System.nanoTime() < END_TIME) {\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                try {\n                  SortedDocValues dvs = sr.getSortedDocValues(\"stringdv\");\n                  assertEquals(docID, dvs.advance(docID));\n                  assertEquals(docValues.get(docIDToIDArray[docID]), dvs.binaryValue());\n                } catch (IOException ioe) {\n                  throw new RuntimeException(ioe);\n                }\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d217880fb207e1a26143863d06cf461c7cabeec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d217880fb207e1a26143863d06cf461c7cabeec"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}