{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n            \n      if (aliases.containsKey(field)) {\n                \n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n                \n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["cd00dd91853514614379b0e680d65bd19cac0f30"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd00dd91853514614379b0e680d65bd19cac0f30":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["cd00dd91853514614379b0e680d65bd19cac0f30","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["5f4e87790277826a2aea119328600dfb07761f32","cd00dd91853514614379b0e680d65bd19cac0f30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd00dd91853514614379b0e680d65bd19cac0f30":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}