{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish().mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docCount,\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docCount == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish(BytesRef minTerm, BytesRef maxTerm) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish().mjava","sourceNew":"    // Finishes all terms in this field\n    public void finish(BytesRef minTerm, BytesRef maxTerm) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize,\n                                     minTerm, maxTerm));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    public void finish() throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n\n        fields.add(new FieldMetaData(fieldInfo,\n                                     ((PendingBlock) pending.get(0)).index.getEmptyOutput(),\n                                     numTerms,\n                                     indexStartFP,\n                                     sumTotalTermFreq,\n                                     sumDocFreq,\n                                     docsSeen.cardinality(),\n                                     longsSize));\n      } else {\n        assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY && sumTotalTermFreq == -1;\n        assert sumDocFreq == 0;\n        assert docsSeen.cardinality() == 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","0974f33be0e2189e71f36b67f1017f4072b1a126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0974f33be0e2189e71f36b67f1017f4072b1a126"]},"commit2Childs":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}