{"path":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"a0a97513a3a796fa8e709a0dcfec8a2e628e721b","date":1458922983,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight originalWeight = originalQuery.createWeight(searcher, needsScores);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return originalWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        originalWeight.normalize(norm, boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight originalWeight = originalQuery.createWeight(searcher, needsScores);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return originalWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        originalWeight.normalize(norm, boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight originalWeight = originalQuery.createWeight(searcher, needsScores);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Scorer scorer = scorer(context);\n        if (scorer != null) {\n          int target = scorer.iterator().advance(doc);\n          if (doc == target) {\n            return Explanation.match(scorer.score(), \"A match\");\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return originalWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        originalWeight.normalize(norm, boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        if (fieldInfo.getPointDimensionCount() != 1) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + fieldInfo.getPointDimensionCount() + \" but this query has numDims=1\");\n        }\n        if (fieldInfo.getPointNumBytes() != bytesPerDim) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + fieldInfo.getPointNumBytes() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        float[] scores = new float[reader.maxDoc()];\n        values.intersect(field, new MergePointVisitor(sortedPackedPoints, result, scores));\n        return new Scorer(this) {\n\n          DocIdSetIterator disi = new BitSetIterator(result, 10L);\n\n          @Override\n          public float score() throws IOException {\n            return scores[docID()];\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return disi;\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a97513a3a796fa8e709a0dcfec8a2e628e721b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0a97513a3a796fa8e709a0dcfec8a2e628e721b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0a97513a3a796fa8e709a0dcfec8a2e628e721b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0a97513a3a796fa8e709a0dcfec8a2e628e721b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0a97513a3a796fa8e709a0dcfec8a2e628e721b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}