{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","commits":[{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc84475e6ad3fd8951c733b6e17916c03cd574","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Regress expects 2 columns as parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9534d22697fd987010265f4f9939621199e9c099","date":1502041899,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"566112f6115904d848cbf09462ebd8bf1304257b","date":1502103699,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RegressionEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    List<?> l1 = (List<?>)first;\n    List<?> l2 = (List<?>)second;\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      regression.addData(((BigDecimal)l1.get(idx)).doubleValue(), ((BigDecimal)l2.get(idx)).doubleValue());\n    }\n    \n    Map<String,Number> map = new HashMap<>();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    \n    return new RegressionTuple(regression, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    SimpleRegression regression = new SimpleRegression();\n    for(int i=0; i<column1.length; i++) {\n      regression.addData(column1[i], column2[i]);\n    }\n\n    Map map = new HashMap();\n    map.put(\"slope\", regression.getSlope());\n    map.put(\"intercept\", regression.getIntercept());\n    map.put(\"R\", regression.getR());\n    map.put(\"N\", regression.getN());\n    map.put(\"RSquare\", regression.getRSquare());\n    map.put(\"regressionSumSquares\", regression.getRegressionSumSquares());\n    map.put(\"slopeConfidenceInterval\", regression.getSlopeConfidenceInterval());\n    map.put(\"interceptStdErr\", regression.getInterceptStdErr());\n    map.put(\"totalSumSquares\", regression.getTotalSumSquares());\n    map.put(\"significance\", regression.getSignificance());\n    map.put(\"meanSquareError\", regression.getMeanSquareError());\n    return new RegressionTuple(regression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9534d22697fd987010265f4f9939621199e9c099":["28288370235ed02234a64753cdbf0c6ec096304a"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","566112f6115904d848cbf09462ebd8bf1304257b"],"566112f6115904d848cbf09462ebd8bf1304257b":["28288370235ed02234a64753cdbf0c6ec096304a","9534d22697fd987010265f4f9939621199e9c099"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["566112f6115904d848cbf09462ebd8bf1304257b","ba1e7de64990e3928b90142a52fb92eeff556475"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["12cb83a3f761dc612e1ece020f46e1886fc2550e"],"ba1e7de64990e3928b90142a52fb92eeff556475":["566112f6115904d848cbf09462ebd8bf1304257b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"9534d22697fd987010265f4f9939621199e9c099":["566112f6115904d848cbf09462ebd8bf1304257b"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"28288370235ed02234a64753cdbf0c6ec096304a":["9534d22697fd987010265f4f9939621199e9c099","566112f6115904d848cbf09462ebd8bf1304257b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"566112f6115904d848cbf09462ebd8bf1304257b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12cb83a3f761dc612e1ece020f46e1886fc2550e","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}