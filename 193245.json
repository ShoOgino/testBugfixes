{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Filter filter = new QueryWrapperFilter(new MatchAllDocsQuery());\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (int leafNum = 0; leafNum < contexts.size(); leafNum++) {\n      LeafReaderContext context = contexts.get(leafNum);\n      DocIdSet dis = filter.getDocIdSet(context, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        testField.doSetNextReader(context);\n        idField.doSetNextReader(context);\n        int doc = disi.nextDoc();\n        while( doc != DocIdSetIterator.NO_MORE_DOCS){\n          // Add a document to the statistics being generated\n          testField.collect(doc);\n          idField.collect(doc);\n\n          String id = idField.getString();\n          if (!valuesFiller.test(id)) {\n            missing.add(id);\n          }\n          doc = disi.nextDoc();\n        }\n      }\n    }\n    return missing;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ddef54907d52d0079217460aacd73c5d3bb1d39","date":1527887541,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","sourceNew":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","sourceOld":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Filter filter = new QueryWrapperFilter(new MatchAllDocsQuery());\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (int leafNum = 0; leafNum < contexts.size(); leafNum++) {\n      LeafReaderContext context = contexts.get(leafNum);\n      DocIdSet dis = filter.getDocIdSet(context, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        testField.doSetNextReader(context);\n        idField.doSetNextReader(context);\n        int doc = disi.nextDoc();\n        while( doc != DocIdSetIterator.NO_MORE_DOCS){\n          // Add a document to the statistics being generated\n          testField.collect(doc);\n          idField.collect(doc);\n\n          String id = idField.getString();\n          if (!valuesFiller.test(id)) {\n            missing.add(id);\n          }\n          doc = disi.nextDoc();\n        }\n      }\n    }\n    return missing;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","sourceNew":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","sourceOld":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Filter filter = new QueryWrapperFilter(new MatchAllDocsQuery());\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (int leafNum = 0; leafNum < contexts.size(); leafNum++) {\n      LeafReaderContext context = contexts.get(leafNum);\n      DocIdSet dis = filter.getDocIdSet(context, null); // solr docsets already exclude any deleted docs\n      if (dis == null) {\n        continue;\n      }\n      DocIdSetIterator disi = dis.iterator();\n      if (disi != null) {\n        testField.doSetNextReader(context);\n        idField.doSetNextReader(context);\n        int doc = disi.nextDoc();\n        while( doc != DocIdSetIterator.NO_MORE_DOCS){\n          // Add a document to the statistics being generated\n          testField.collect(doc);\n          idField.collect(doc);\n\n          String id = idField.getString();\n          if (!valuesFiller.test(id)) {\n            missing.add(id);\n          }\n          doc = disi.nextDoc();\n        }\n      }\n    }\n    return missing;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","sourceNew":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n\n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","sourceOld":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#collectFieldValues(AnalyticsField,Predicate[String]).mjava","sourceNew":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n\n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","sourceOld":"  protected Set<String> collectFieldValues(AnalyticsField testField, Predicate<String> valuesFiller) throws IOException {\n    StringField idField = new StringField(\"id\");\n    Set<String> missing = new HashSet<>();\n    \n    List<LeafReaderContext> contexts = searcher.getTopReaderContext().leaves();\n    for (LeafReaderContext context : contexts) {\n      testField.doSetNextReader(context);\n      idField.doSetNextReader(context);\n      Bits liveDocs = context.reader().getLiveDocs();\n      for (int doc = 0; doc < context.reader().maxDoc(); doc++) {\n        if (liveDocs != null && !liveDocs.get(doc)) {\n          continue;\n        }\n        // Add a document to the statistics being generated\n        testField.collect(doc);\n        idField.collect(doc);\n\n        String id = idField.getString();\n        if (!valuesFiller.test(id)) {\n          missing.add(id);\n        }\n      }\n    }\n    return missing;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["4ddef54907d52d0079217460aacd73c5d3bb1d39"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["3bd4c6955956e76c96eb12dfe64108ed03522983","4ddef54907d52d0079217460aacd73c5d3bb1d39"],"f8061ddd97f3352007d927dae445884a6f3d857b":["4ddef54907d52d0079217460aacd73c5d3bb1d39","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ddef54907d52d0079217460aacd73c5d3bb1d39":["1e4e64b7199d2f2a17be7f3926c7532553910dce","b70042a8a492f7054d480ccdd2be9796510d4327","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["4ddef54907d52d0079217460aacd73c5d3bb1d39","b70042a8a492f7054d480ccdd2be9796510d4327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}