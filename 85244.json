{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      Arrays.sort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0d986f42c7320fce5b6ba6a767c160289c738a","date":1304428044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.quickSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename, context);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, BufferedIndexInput.BUFFER_SIZE);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, BufferedIndexInput.BUFFER_SIZE);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, IOContext.DEFAULT);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileReader cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileReader(dir, filename, context);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, IOContext.DEFAULT);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, BufferedIndexInput.BUFFER_SIZE);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, IOContext.DEFAULT);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, BufferedIndexInput.BUFFER_SIZE);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i]);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = dir.openCompoundInput(filename, IOContext.DEFAULT);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"768c48159710aa63efa67c049db149c35c4f423a","date":1323797698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n\n    for (int i = 0; i < args.length; ++i) {\n      if (args[i].equals(\"-extract\")) {\n        extract = true;\n      } else if (filename == null) {\n        filename = args[i];\n      }\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      dir = FSDirectory.open(new File(dirname));\n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13","date":1325610499,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/CompoundFileExtractor#main(String[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#main(String[]).mjava","sourceNew":"  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Prints the filename and size of each file within a given compound file.\n   * Add the -extract flag to extract files to the current working directory.\n   * In order to make the extracted version of the index work, you have to copy\n   * the segments file from the compound index into the directory where the extracted files are stored.\n   * @param args Usage: org.apache.lucene.index.IndexReader [-extract] &lt;cfsfile&gt;\n   */\n  public static void main(String [] args) {\n    String filename = null;\n    boolean extract = false;\n    String dirImpl = null;\n\n    int j = 0;\n    while(j < args.length) {\n      String arg = args[j];\n      if (\"-extract\".equals(arg)) {\n        extract = true;\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (j == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          System.exit(1);\n        }\n        j++;\n        dirImpl = args[j];\n      } else if (filename == null) {\n        filename = arg;\n      }\n      j++;\n    }\n\n    if (filename == null) {\n      System.out.println(\"Usage: org.apache.lucene.index.IndexReader [-extract] [-dir-impl X] <cfsfile>\");\n      return;\n    }\n\n    Directory dir = null;\n    CompoundFileDirectory cfr = null;\n    IOContext context = IOContext.READ;\n\n    try {\n      File file = new File(filename);\n      String dirname = file.getAbsoluteFile().getParent();\n      filename = file.getName();\n      if (dirImpl == null) {\n        dir = FSDirectory.open(new File(dirname));\n      } else {\n        dir = CommandLineUtil.newFSDirectory(dirImpl, new File(dirname));\n      }\n      \n      cfr = new CompoundFileDirectory(dir, filename, IOContext.DEFAULT, false);\n\n      String [] files = cfr.listAll();\n      ArrayUtil.mergeSort(files);   // sort the array of filename so that the output is more readable\n\n      for (int i = 0; i < files.length; ++i) {\n        long len = cfr.fileLength(files[i]);\n\n        if (extract) {\n          System.out.println(\"extract \" + files[i] + \" with \" + len + \" bytes to local directory...\");\n          IndexInput ii = cfr.openInput(files[i], context);\n\n          FileOutputStream f = new FileOutputStream(files[i]);\n\n          // read and write with a small buffer, which is more effective than reading byte by byte\n          byte[] buffer = new byte[1024];\n          int chunk = buffer.length;\n          while(len > 0) {\n            final int bufLen = (int) Math.min(chunk, len);\n            ii.readBytes(buffer, 0, bufLen);\n            f.write(buffer, 0, bufLen);\n            len -= bufLen;\n          }\n\n          f.close();\n          ii.close();\n        }\n        else\n          System.out.println(files[i] + \": \" + len + \" bytes\");\n      }\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    }\n    finally {\n      try {\n        if (dir != null)\n          dir.close();\n        if (cfr != null)\n          cfr.close();\n      }\n      catch (IOException ioe) {\n        ioe.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["67aadace85f701c87a4e0721eedcda25d8415a70","768c48159710aa63efa67c049db149c35c4f423a"],"768c48159710aa63efa67c049db149c35c4f423a":["67aadace85f701c87a4e0721eedcda25d8415a70"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13":["768c48159710aa63efa67c049db149c35c4f423a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["4ceb6a6c707ada1df8bde804e25c98668e699a18","768c48159710aa63efa67c049db149c35c4f423a"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"768c48159710aa63efa67c049db149c35c4f423a":["4ceb6a6c707ada1df8bde804e25c98668e699a18","98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"98e05e2d6d9a7ff1bbbb0f8706b70c2bf7537b13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}