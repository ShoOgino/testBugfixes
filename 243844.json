{"path":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","commits":[{"id":"64fce9fc6afb6b5650eb2bb2e733eb68bead08be","date":1226656964,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"/dev/null","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"bin2\", bin, Field.Store.COMPRESS));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        fields = doc.getFields(\"bin2\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set lazyFields = new HashSet();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin, Field.Store.YES));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["64fce9fc6afb6b5650eb2bb2e733eb68bead08be","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"64fce9fc6afb6b5650eb2bb2e733eb68bead08be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["e0c804f7aa477229414a7e12882af490c241f64d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["64fce9fc6afb6b5650eb2bb2e733eb68bead08be"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e0c804f7aa477229414a7e12882af490c241f64d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e0c804f7aa477229414a7e12882af490c241f64d"],"64fce9fc6afb6b5650eb2bb2e733eb68bead08be":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64fce9fc6afb6b5650eb2bb2e733eb68bead08be"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e0c804f7aa477229414a7e12882af490c241f64d":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}