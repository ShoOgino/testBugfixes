{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#deleteShard(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#deleteShard(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand deleteShard(final ClusterState clusterState, ZkNodeProps message) {\n    final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n\n    log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n    newSlices.remove(sliceId);\n\n    DocCollection newCollection = coll.copyWithSlices(newSlices);\n    return new ZkWriteCommand(collection, newCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#deleteShard(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#deleteShard(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand deleteShard(final ClusterState clusterState, ZkNodeProps message) {\n    final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n\n    log.info(\"Removing collection: {} shard: {}  from clusterstate\", collection, sliceId);\n\n    DocCollection coll = clusterState.getCollection(collection);\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n    newSlices.remove(sliceId);\n\n    DocCollection newCollection = coll.copyWithSlices(newSlices);\n    return new ZkWriteCommand(collection, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand deleteShard(final ClusterState clusterState, ZkNodeProps message) {\n    final String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    final String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n\n    log.info(\"Removing collection: \" + collection + \" shard: \" + sliceId + \" from clusterstate\");\n\n    DocCollection coll = clusterState.getCollection(collection);\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>(coll.getSlicesMap());\n    newSlices.remove(sliceId);\n\n    DocCollection newCollection = coll.copyWithSlices(newSlices);\n    return new ZkWriteCommand(collection, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4abf821a41a2fdca2a1dea148999931d22e20529":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4abf821a41a2fdca2a1dea148999931d22e20529"]},"commit2Childs":{"4abf821a41a2fdca2a1dea148999931d22e20529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}