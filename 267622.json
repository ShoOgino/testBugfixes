{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":["7d16aff6229cca84309d03d047cd718946bd4b43"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      if (dir instanceof MockDirectoryWrapper) {\n        // we want to ensure our corruption always succeeds!\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFiles(Collections.singleton(fileNameIn));\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      if (dir instanceof MockDirectoryWrapper) {\n        // we want to ensure our corruption always succeeds!\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFiles(Collections.singleton(fileNameIn));\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      if (dir instanceof MockDirectoryWrapper) {\n        // we want to ensure our corruption always succeeds!\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      if (dir instanceof MockDirectoryWrapper) {\n        // we want to ensure our corruption always succeeds!\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      if (dir instanceof MockDirectoryWrapper) {\n        // we want to ensure our corruption always succeeds!\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex1().mjava","sourceNew":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      expectThrows(Exception.class, () -> {\n        DirectoryReader.open(dir);\n      });\n\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing last byte of\n  // latest segments file and make sure we get an\n  // IOException trying to open the index:\n  public void testSimulatedCorruptIndex1() throws IOException {\n      BaseDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n      dir.deleteFile(fileNameIn);\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}