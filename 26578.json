{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram,\n                                              boolean simple, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      consumer.accept(name + \".\" + MEAN, snapshot.getMean());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", histogram.getCount());\n      // non-time based values\n      addSnapshot(response, snapshot, false);\n      consumer.accept(name, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertHistogram(String,Histogram,PropertyFilter,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time\n   * based values that don't require unit conversion.\n   * @param name metric name\n   * @param histogram an instance of {@link Histogram}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertHistogram(String name, Histogram histogram, PropertyFilter propertyFilter,\n                                              boolean simple, BiConsumer<String, Object> consumer) {\n    Snapshot snapshot = histogram.getSnapshot();\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, snapshot.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      String prop = \"count\";\n      if (propertyFilter.accept(prop)) {\n        response.put(prop, histogram.getCount());\n      }\n      // non-time based values\n      addSnapshot(response, snapshot, propertyFilter, false);\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}