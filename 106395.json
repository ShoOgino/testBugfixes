{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","commits":[{"id":"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","date":1425902085,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = basePath + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet( baseUrl + path + ClientUtils.toQueryString( wparams, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = baseUrl + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022960bd0a67a6f828074db6d078b29b254d1f5","date":1427366542,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + ClientUtils.toQueryString(queryParams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String pstr = ClientUtils.toQueryString(wparams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n    HttpRequestBase method = null;\n    InputStream is = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n    \n    int tries = maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod() ) {\n\n            String url = basePath + path;\n            boolean hasNullStreamName = false;\n            if (streams != null) {\n              for (ContentStream cs : streams) {\n                if (cs.getName() == null) {\n                  hasNullStreamName = true;\n                  break;\n                }\n              }\n            }\n            boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n              || ( streams != null && streams.size() > 1 )) && !hasNullStreamName;\n\n            LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n            if (streams == null || isMultipart) {\n              // send server list and request list as query string params\n              ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n              queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n              String fullQueryUrl = url + ClientUtils.toQueryString( queryParams, false );\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n              if (!isMultipart) {\n                postOrPut.addHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<FormBodyPart> parts = new LinkedList<>();\n              Iterator<String> iter = wparams.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = wparams.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (isMultipart) {\n                      parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n                    } else {\n                      postOrPutParams.add(new BasicNameValuePair(p, v));\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart && streams != null) {\n                for (ContentStream content : streams) {\n                  String contentType = content.getContentType();\n                  if(contentType==null) {\n                    contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n                  }\n                  String name = content.getName();\n                  if(name==null) {\n                    name = \"\";\n                  }\n                  parts.add(new FormBodyPart(name, \n                       new InputStreamBody(\n                           content.getStream(), \n                           contentType, \n                           content.getName())));\n                }\n              }\n              \n              if (parts.size() > 0) {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n                for(FormBodyPart p: parts) {\n                  entity.addPart(p);\n                }\n                postOrPut.setEntity(entity);\n              } else {\n                //not using multipart\n                postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n              }\n\n              method = postOrPut;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString(wparams, false);\n              HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n                new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              final ContentStream[] contentStream = new ContentStream[1];\n              for (ContentStream content : streams) {\n                contentStream[0] = content;\n                break;\n              }\n              if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                  \n                });\n              } else {\n                postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n                  @Override\n                  public Header getContentType() {\n                    return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n                  }\n                  \n                  @Override\n                  public boolean isRepeatable() {\n                    return false;\n                  }\n                });\n              }\n              method = postOrPut;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          method = null;\n          if(is != null) {\n            is.close();\n          }\n          // If out of tries then just rethrow (as normal error).\n          if (tries < 1) {\n            throw r;\n          }\n        }\n      }\n    } catch (IOException ex) {\n      throw new SolrServerException(\"error reading streams\", ex);\n    }\n    \n    return method;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e","cf5f0a722ca79f92ea9e7ab1a7d803909655f0f8","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","c2cb68c00dbca95047d023c1885c85ffc344a53d","4be6b65a4bd628f9b1c1a8832622df34d6eba980"],"bugIntro":["a80295646116e67c2ff8ef0ee2e840fcc73b2951","c6c352d7c0d11b06232c1f29ee12f2ad7676a73f","42718e80a64f6c041cebc3699ab91cd1c928444d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + ClientUtils.toQueryString(queryParams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String pstr = ClientUtils.toQueryString(wparams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42718e80a64f6c041cebc3699ab91cd1c928444d","date":1448186182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + ClientUtils.toQueryString(wparams, false));\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + ClientUtils.toQueryString(queryParams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String pstr = ClientUtils.toQueryString(wparams, false);\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(url + pstr) : new HttpPut(url + pstr);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6c352d7c0d11b06232c1f29ee12f2ad7676a73f","date":1452780002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":["619e4192fc71e882a9451dbb535af03ed840d8c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a80295646116e67c2ff8ef0ee2e840fcc73b2951","date":1498726731,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(final SolrRequest request, String collection) throws IOException, SolrServerException {\n\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a92ffe0d2961113e5588e614f8dc22b42bf10a95","date":1503304229,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    contentType,\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"619e4192fc71e882a9451dbb535af03ed840d8c7","date":1503243015,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f70adfac95b2d648b95733c2ebeb80b1ef8876c5","date":1503244356,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3051d6122751c8f6cc1e9cf24592658b59843ec2","date":1503298024,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/v2\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97bcd657104d24ce5e89db102939e68a6784bdda","date":1509417991,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = requestWriter.getContentStreams(request);\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n      if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        if (!isMultipart) {\n          postOrPut.addHeader(\"Content-Type\",\n              \"application/x-www-form-urlencoded; charset=UTF-8\");\n        }\n\n        List<FormBodyPart> parts = new LinkedList<>();\n        Iterator<String> iter = wparams.getParameterNamesIterator();\n        while (iter.hasNext()) {\n          String p = iter.next();\n          String[] vals = wparams.getParams(p);\n          if (vals != null) {\n            for (String v : vals) {\n              if (isMultipart) {\n                parts.add(new FormBodyPart(p, new StringBody(v, StandardCharsets.UTF_8)));\n              } else {\n                postOrPutParams.add(new BasicNameValuePair(p, v));\n              }\n            }\n          }\n        }\n\n        // TODO: remove deprecated - first simple attempt failed, see {@link MultipartEntityBuilder}\n        if (isMultipart && streams != null) {\n          for (ContentStream content : streams) {\n            String contentType = content.getContentType();\n            if (contentType == null) {\n              contentType = BinaryResponseParser.BINARY_CONTENT_TYPE; // default\n            }\n            String name = content.getName();\n            if (name == null) {\n              name = \"\";\n            }\n            parts.add(new FormBodyPart(name,\n                new InputStreamBody(\n                    content.getStream(),\n                    ContentType.parse(contentType),\n                    content.getName())));\n          }\n        }\n\n        if (parts.size() > 0) {\n          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.STRICT);\n          for (FormBodyPart p : parts) {\n            entity.addPart(p);\n          }\n          postOrPut.setEntity(entity);\n        } else {\n          //not using multipart\n          postOrPut.setEntity(new UrlEncodedFormEntity(postOrPutParams, StandardCharsets.UTF_8));\n        }\n\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n\n        // Single stream as body\n        // Using a loop just to get the first one\n        final ContentStream[] contentStream = new ContentStream[1];\n        for (ContentStream content : streams) {\n          contentStream[0] = content;\n          break;\n        }\n        if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n\n          });\n        } else {\n          Long size = contentStream[0].getSize();\n          postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n            @Override\n            public Header getContentType() {\n              return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n            }\n\n            @Override\n            public boolean isRepeatable() {\n              return false;\n            }\n          });\n        }\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b348431b834ecbda752134f7d345c754e283815","date":1567051312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51aeac3c35e69d5e76df30ad382f32f993d5f05","date":1567649655,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  protected HttpRequestBase createMethod(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  protected HttpRequestBase createMethod(SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#createMethod(SolrRequest,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  protected HttpRequestBase createMethod(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    Header[] contextHeaders = buildRequestSpecificHeaders(request);\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      HttpGet result = new HttpGet(basePath + path + wparams.toQueryString());\n\n      populateHeaders(result, contextHeaders);\n      return result;\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n\n        populateHeaders(postOrPut, contextHeaders);\n\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  protected HttpRequestBase createMethod(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String collection) throws IOException, SolrServerException {\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    SolrParams params = request.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(request);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(request) : null;\n    String path = requestWriter.getPath(request);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n    if (invariantParams != null) {\n      wparams.add(invariantParams);\n    }\n\n    String basePath = baseUrl;\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (request instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null || ((V2Request) request).isForceV2()) {\n        basePath = baseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = baseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == request.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return new HttpGet(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.DELETE == request.getMethod()) {\n      return new HttpDelete(basePath + path + wparams.toQueryString());\n    }\n\n    if (SolrRequest.METHOD.POST == request.getMethod() || SolrRequest.METHOD.PUT == request.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        for (ContentStream cs : streams) {\n          if (cs.getName() == null) {\n            hasNullStreamName = true;\n            break;\n          }\n        }\n      }\n      boolean isMultipart = ((this.useMultiPartPost && SolrRequest.METHOD.POST == request.getMethod())\n          || (streams != null && streams.size() > 1)) && !hasNullStreamName;\n\n      LinkedList<NameValuePair> postOrPutParams = new LinkedList<>();\n\n      if(contentWriter != null) {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        postOrPut.addHeader(\"Content-Type\",\n            contentWriter.getContentType());\n        postOrPut.setEntity(new BasicHttpEntity(){\n          @Override\n          public boolean isStreaming() {\n            return true;\n          }\n\n          @Override\n          public void writeTo(OutputStream outstream) throws IOException {\n            contentWriter.write(outstream);\n          }\n        });\n        return postOrPut;\n\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(request.getQueryParams(), wparams));\n        String fullQueryUrl = url + queryParams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = fillContentStream(request, streams, wparams, isMultipart, postOrPutParams, fullQueryUrl);\n        return postOrPut;\n      }\n      // It is has one stream, it is the post body, put the params in the URL\n      else {\n        String fullQueryUrl = url + wparams.toQueryString();\n        HttpEntityEnclosingRequestBase postOrPut = SolrRequest.METHOD.POST == request.getMethod() ?\n            new HttpPost(fullQueryUrl) : new HttpPut(fullQueryUrl);\n        fillSingleContentStream(streams, postOrPut);\n\n        return postOrPut;\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + request.getMethod());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b348431b834ecbda752134f7d345c754e283815":["97bcd657104d24ce5e89db102939e68a6784bdda"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["859081acf00749f5dd462772c571d611d4a4d2db","767d389403b701039ee599ec2ac8a838f45d8cb7"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["c44cc06c26e456fe9c215072b79fce30babe3975"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["30c8e5574b55d57947e989443dfde611646530ee","f70adfac95b2d648b95733c2ebeb80b1ef8876c5"],"c44cc06c26e456fe9c215072b79fce30babe3975":["a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"a80295646116e67c2ff8ef0ee2e840fcc73b2951":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["859081acf00749f5dd462772c571d611d4a4d2db","767d389403b701039ee599ec2ac8a838f45d8cb7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3022960bd0a67a6f828074db6d078b29b254d1f5"],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["3b348431b834ecbda752134f7d345c754e283815"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f70adfac95b2d648b95733c2ebeb80b1ef8876c5":["28288370235ed02234a64753cdbf0c6ec096304a","619e4192fc71e882a9451dbb535af03ed840d8c7"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["859081acf00749f5dd462772c571d611d4a4d2db"],"a92ffe0d2961113e5588e614f8dc22b42bf10a95":["28288370235ed02234a64753cdbf0c6ec096304a","f70adfac95b2d648b95733c2ebeb80b1ef8876c5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a80295646116e67c2ff8ef0ee2e840fcc73b2951","4d3fc88a06a44fc3112186e9be4562b36713955d"],"859081acf00749f5dd462772c571d611d4a4d2db":["c6c352d7c0d11b06232c1f29ee12f2ad7676a73f"],"3022960bd0a67a6f828074db6d078b29b254d1f5":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"619e4192fc71e882a9451dbb535af03ed840d8c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"c6c352d7c0d11b06232c1f29ee12f2ad7676a73f":["42718e80a64f6c041cebc3699ab91cd1c928444d"],"97bcd657104d24ce5e89db102939e68a6784bdda":["a92ffe0d2961113e5588e614f8dc22b42bf10a95"],"42718e80a64f6c041cebc3699ab91cd1c928444d":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"c99002731351c8c955238845b0038682148eec53":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c99002731351c8c955238845b0038682148eec53"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a51aeac3c35e69d5e76df30ad382f32f993d5f05","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"3b348431b834ecbda752134f7d345c754e283815":["a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["c99002731351c8c955238845b0038682148eec53"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","b0b597c65628ca9e73913a07e81691f8229bae35"],"a80295646116e67c2ff8ef0ee2e840fcc73b2951":["28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"f70adfac95b2d648b95733c2ebeb80b1ef8876c5":["3051d6122751c8f6cc1e9cf24592658b59843ec2","a92ffe0d2961113e5588e614f8dc22b42bf10a95"],"30c8e5574b55d57947e989443dfde611646530ee":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["4d3fc88a06a44fc3112186e9be4562b36713955d","b31ebc7a867ddea79d438a8fca876a94e644d11a","a80295646116e67c2ff8ef0ee2e840fcc73b2951","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a92ffe0d2961113e5588e614f8dc22b42bf10a95":["97bcd657104d24ce5e89db102939e68a6784bdda"],"28288370235ed02234a64753cdbf0c6ec096304a":["f70adfac95b2d648b95733c2ebeb80b1ef8876c5","30c8e5574b55d57947e989443dfde611646530ee","a92ffe0d2961113e5588e614f8dc22b42bf10a95","619e4192fc71e882a9451dbb535af03ed840d8c7"],"859081acf00749f5dd462772c571d611d4a4d2db":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","767d389403b701039ee599ec2ac8a838f45d8cb7"],"3022960bd0a67a6f828074db6d078b29b254d1f5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","42718e80a64f6c041cebc3699ab91cd1c928444d"],"619e4192fc71e882a9451dbb535af03ed840d8c7":["f70adfac95b2d648b95733c2ebeb80b1ef8876c5"],"c6c352d7c0d11b06232c1f29ee12f2ad7676a73f":["859081acf00749f5dd462772c571d611d4a4d2db"],"97bcd657104d24ce5e89db102939e68a6784bdda":["3b348431b834ecbda752134f7d345c754e283815"],"42718e80a64f6c041cebc3699ab91cd1c928444d":["c6c352d7c0d11b06232c1f29ee12f2ad7676a73f"],"c99002731351c8c955238845b0038682148eec53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","3051d6122751c8f6cc1e9cf24592658b59843ec2","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}