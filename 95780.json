{"path":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#encodeBlock().mjava","commits":[{"id":"a2f37c70d502802371a3ac864572b2ffc7730ffc","date":1377155841,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#encodeBlock().mjava","pathOld":"/dev/null","sourceNew":"    void encodeBlock() {\n      final int originalLength = data.length;\n      Arrays.fill(buffer, bufferSize, BLOCK_SIZE, 0);\n      final int unaryBlockSize = unaryBlockSize();\n      final int pforBlockSize = computeOptimalNumberOfBits();\n      final int blockSize;\n      if (pforBlockSize <= unaryBlockSize) {\n        // use pfor\n        blockSize = pforBlockSize;\n        data.bytes = ArrayUtil.grow(data.bytes, data.length + blockSize + MAX_BYTE_BLOCK_COUNT);\n        int token = bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0;\n        token |= bitsPerValue;\n        if (numExceptions > 0) {\n          token |= HAS_EXCEPTIONS;\n        }\n        data.writeByte((byte) token);\n        pforEncode();\n      } else {\n        // use unary\n        blockSize = unaryBlockSize;\n        final int token = UNARY | (bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0);\n        data.writeByte((byte) token);\n        unaryEncode();\n      }\n\n      if (bufferSize < BLOCK_SIZE) {\n        data.writeByte((byte) bufferSize);\n      }\n\n      ++numBlocks;\n\n      assert data.length - originalLength == blockSize : (data.length - originalLength) + \" <> \" + blockSize;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#encodeBlock().mjava","pathOld":"/dev/null","sourceNew":"    void encodeBlock() {\n      final int originalLength = data.length;\n      Arrays.fill(buffer, bufferSize, BLOCK_SIZE, 0);\n      final int unaryBlockSize = unaryBlockSize();\n      final int pforBlockSize = computeOptimalNumberOfBits();\n      final int blockSize;\n      if (pforBlockSize <= unaryBlockSize) {\n        // use pfor\n        blockSize = pforBlockSize;\n        data.bytes = ArrayUtil.grow(data.bytes, data.length + blockSize + MAX_BYTE_BLOCK_COUNT);\n        int token = bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0;\n        token |= bitsPerValue;\n        if (numExceptions > 0) {\n          token |= HAS_EXCEPTIONS;\n        }\n        data.writeByte((byte) token);\n        pforEncode();\n      } else {\n        // use unary\n        blockSize = unaryBlockSize;\n        final int token = UNARY | (bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0);\n        data.writeByte((byte) token);\n        unaryEncode();\n      }\n\n      if (bufferSize < BLOCK_SIZE) {\n        data.writeByte((byte) bufferSize);\n      }\n\n      ++numBlocks;\n\n      assert data.length - originalLength == blockSize : (data.length - originalLength) + \" <> \" + blockSize;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#encodeBlock().mjava","sourceNew":null,"sourceOld":"    void encodeBlock() {\n      final int originalLength = data.length;\n      Arrays.fill(buffer, bufferSize, BLOCK_SIZE, 0);\n      final int unaryBlockSize = unaryBlockSize();\n      final int pforBlockSize = computeOptimalNumberOfBits();\n      final int blockSize;\n      if (pforBlockSize <= unaryBlockSize) {\n        // use pfor\n        blockSize = pforBlockSize;\n        data.bytes = ArrayUtil.grow(data.bytes, data.length + blockSize + MAX_BYTE_BLOCK_COUNT);\n        int token = bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0;\n        token |= bitsPerValue;\n        if (numExceptions > 0) {\n          token |= HAS_EXCEPTIONS;\n        }\n        data.writeByte((byte) token);\n        pforEncode();\n      } else {\n        // use unary\n        blockSize = unaryBlockSize;\n        final int token = UNARY | (bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0);\n        data.writeByte((byte) token);\n        unaryEncode();\n      }\n\n      if (bufferSize < BLOCK_SIZE) {\n        data.writeByte((byte) bufferSize);\n      }\n\n      ++numBlocks;\n\n      assert data.length - originalLength == blockSize : (data.length - originalLength) + \" <> \" + blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#encodeBlock().mjava","sourceNew":null,"sourceOld":"    void encodeBlock() {\n      final int originalLength = data.length;\n      Arrays.fill(buffer, bufferSize, BLOCK_SIZE, 0);\n      final int unaryBlockSize = unaryBlockSize();\n      final int pforBlockSize = computeOptimalNumberOfBits();\n      final int blockSize;\n      if (pforBlockSize <= unaryBlockSize) {\n        // use pfor\n        blockSize = pforBlockSize;\n        data.bytes = ArrayUtil.grow(data.bytes, data.length + blockSize + MAX_BYTE_BLOCK_COUNT);\n        int token = bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0;\n        token |= bitsPerValue;\n        if (numExceptions > 0) {\n          token |= HAS_EXCEPTIONS;\n        }\n        data.writeByte((byte) token);\n        pforEncode();\n      } else {\n        // use unary\n        blockSize = unaryBlockSize;\n        final int token = UNARY | (bufferSize < BLOCK_SIZE ? LAST_BLOCK : 0);\n        data.writeByte((byte) token);\n        unaryEncode();\n      }\n\n      if (bufferSize < BLOCK_SIZE) {\n        data.writeByte((byte) bufferSize);\n      }\n\n      ++numBlocks;\n\n      assert data.length - originalLength == blockSize : (data.length - originalLength) + \" <> \" + blockSize;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a2f37c70d502802371a3ac864572b2ffc7730ffc","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["a2f37c70d502802371a3ac864572b2ffc7730ffc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2f37c70d502802371a3ac864572b2ffc7730ffc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"]},"commit2Childs":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2f37c70d502802371a3ac864572b2ffc7730ffc","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}