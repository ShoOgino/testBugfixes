{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","sourceNew":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n        CodecUtil.writeFooter(genOutput);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","sourceNew":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n        CodecUtil.writeFooter(genOutput);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","sourceNew":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n        CodecUtil.writeFooter(genOutput);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      IOUtils.deleteFilesIgnoringExceptions(dir, IndexFileNames.SEGMENTS_GEN);\n    }\n  }\n\n","sourceOld":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n        CodecUtil.writeFooter(genOutput);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#writeSegmentsGen(Directory,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * A utility for writing the {@link IndexFileNames#SEGMENTS_GEN} file to a\n   * {@link Directory}.\n   * \n   * <p>\n   * <b>NOTE:</b> this is an internal utility which is kept public so that it's\n   * accessible by code from other packages. You should avoid calling this\n   * method unless you're absolutely sure what you're doing!\n   * \n   * @lucene.internal\n   */\n  public static void writeSegmentsGen(Directory dir, long generation) {\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n        CodecUtil.writeFooter(genOutput);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      IOUtils.deleteFilesIgnoringExceptions(dir, IndexFileNames.SEGMENTS_GEN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}