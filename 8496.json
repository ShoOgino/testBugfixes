{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","commits":[{"id":"e90f002d571348d57377e0d63fd954b0fd1da637","date":1368212480,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        if (abortOnError && srsp.getException() != null)  {\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, srsp.getException());\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0220ee39df0e359431efa5115aeb0729982e3c96"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0220ee39df0e359431efa5115aeb0729982e3c96","date":1372771370,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        if (abortOnError && srsp.getException() != null)  {\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, srsp.getException());\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":["e90f002d571348d57377e0d63fd954b0fd1da637"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        if (abortOnError && srsp.getException() != null)  {\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, srsp.getException());\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String).mjava","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError, String msgOnError) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0220ee39df0e359431efa5115aeb0729982e3c96":["e90f002d571348d57377e0d63fd954b0fd1da637"],"e90f002d571348d57377e0d63fd954b0fd1da637":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e90f002d571348d57377e0d63fd954b0fd1da637","0220ee39df0e359431efa5115aeb0729982e3c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["0220ee39df0e359431efa5115aeb0729982e3c96","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["0220ee39df0e359431efa5115aeb0729982e3c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f26f74e4969851a019d28f10315cb1c77786f22"]},"commit2Childs":{"0220ee39df0e359431efa5115aeb0729982e3c96":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"e90f002d571348d57377e0d63fd954b0fd1da637":["0220ee39df0e359431efa5115aeb0729982e3c96","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e90f002d571348d57377e0d63fd954b0fd1da637"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}