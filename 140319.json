{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","commits":[{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#setCoreContainer(CoreContainer).mjava","sourceNew":"  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCoreContainer(CoreContainer cc) {\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d08eb5e0605b54669b5498a5a5db3502fc932b","date":1511883595,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getDefaultHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrClusterReporter#init(PluginInfo,CoreContainer).mjava","sourceNew":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry {}\", registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period={}\", period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getDefaultHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo pluginInfo, CoreContainer cc) {\n    super.init(pluginInfo, cc);\n    if (reporter != null) {\n      reporter.close();;\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    // start reporter only in cloud mode\n    if (!cc.isZooKeeperAware()) {\n      log.warn(\"Not ZK-aware, not starting...\");\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.info(\"Turning off node reporter, period=\" + period);\n      return;\n    }\n    HttpClient httpClient = cc.getUpdateShardHandler().getDefaultHttpClient();\n    ZkController zk = cc.getZkController();\n    String reporterId = zk.getNodeName();\n    reporter = SolrReporter.Builder.forReports(metricManager, reports)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(reporterId)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(httpClient, new OverseerUrlSupplier(zk));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f90f26c648df8320685eb76fec8bb9972e1994c4","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"3646ead588297558973dbd1162e69791e822b944":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["3646ead588297558973dbd1162e69791e822b944"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["3646ead588297558973dbd1162e69791e822b944"],"3646ead588297558973dbd1162e69791e822b944":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["1aad05eeff7818b0833c02ac6b743aa72054963b","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}