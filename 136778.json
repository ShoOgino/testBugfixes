{"path":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#convertDelay(TimeUnit,long,TimeUnit).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#convertDelay(TimeUnit,long,TimeUnit).mjava","pathOld":"/dev/null","sourceNew":"  public abstract long convertDelay(TimeUnit fromUnit, long value, TimeUnit toUnit);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#convertDelay(TimeUnit,long,TimeUnit).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#convertDelay(TimeUnit,long,TimeUnit).mjava","sourceNew":"  /**\n   * This method allows using TimeSource with APIs that require providing just plain time intervals,\n   * eg. {@link Object#wait(long)}. Values returned by this method are adjusted according to the\n   * time source's notion of time - eg. accelerated time source provided by {@link SimTimeSource}\n   * will return intervals that are proportionally shortened by the multiplier.\n   * <p>NOTE: converting small values may significantly affect precision of the returned values\n   * due to rounding, especially for accelerated time source, so care should be taken to use time\n   * units that result in relatively large values. For example, converting a value of 1 expressed\n   * in seconds would result in less precision than converting a value of 1000 expressed in milliseconds.</p>\n   * @param fromUnit source unit\n   * @param value original value\n   * @param toUnit target unit\n   * @return converted value, possibly scaled by the source's notion of accelerated time\n   * (see {@link SimTimeSource})\n   */\n  public abstract long convertDelay(TimeUnit fromUnit, long value, TimeUnit toUnit);\n\n","sourceOld":"  public abstract long convertDelay(TimeUnit fromUnit, long value, TimeUnit toUnit);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}