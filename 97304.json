{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testEncodeDecode().mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testEncodeDecode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat();\n      double latQuantized = BKDTreeWriter.decodeLat(BKDTreeWriter.encodeLat(lat));\n      assertEquals(lat, latQuantized, BKDTreeWriter.TOLERANCE);\n\n      double lon = randomLon();\n      double lonQuantized = BKDTreeWriter.decodeLon(BKDTreeWriter.encodeLon(lon));\n      assertEquals(lon, lonQuantized, BKDTreeWriter.TOLERANCE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = BKDTreeWriter.decodeLat(BKDTreeWriter.encodeLat(lat));\n      assertEquals(lat, latQuantized, BKDTreeWriter.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = BKDTreeWriter.decodeLon(BKDTreeWriter.encodeLon(lon));\n      assertEquals(lon, lonQuantized, BKDTreeWriter.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat();\n      double latQuantized = BKDTreeWriter.decodeLat(BKDTreeWriter.encodeLat(lat));\n      assertEquals(lat, latQuantized, BKDTreeWriter.TOLERANCE);\n\n      double lon = randomLon();\n      double lonQuantized = BKDTreeWriter.decodeLon(BKDTreeWriter.encodeLon(lon));\n      assertEquals(lon, lonQuantized, BKDTreeWriter.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = DimensionalLatLonField.decodeLat(DimensionalLatLonField.encodeLat(lat));\n      assertEquals(lat, latQuantized, DimensionalLatLonField.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = DimensionalLatLonField.decodeLon(DimensionalLatLonField.encodeLon(lon));\n      assertEquals(lon, lonQuantized, DimensionalLatLonField.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = BKDTreeWriter.decodeLat(BKDTreeWriter.encodeLat(lat));\n      assertEquals(lat, latQuantized, BKDTreeWriter.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = BKDTreeWriter.decodeLon(BKDTreeWriter.encodeLon(lon));\n      assertEquals(lon, lonQuantized, BKDTreeWriter.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}