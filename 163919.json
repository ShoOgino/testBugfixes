{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#merge(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#merge(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#merge(boolean).mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method\n   * into the directory passed to the constructor.\n   * @param mergeDocStores if false, we will not merge the\n   * stored fields nor vectors files\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge(boolean mergeDocStores) throws CorruptIndexException, IOException {\n\n    this.mergeDocStores = mergeDocStores;\n    \n    // NOTE: it's important to add calls to\n    // checkAbort.work(...) if you make any changes to this\n    // method that will spend alot of time.  The frequency\n    // of this check impacts how long\n    // IndexWriter.close(false) takes to actually stop the\n    // threads.\n\n    mergedDocs = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (mergeDocStores && fieldInfos.hasVectors())\n      mergeVectors();\n\n    return mergedDocs;\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method\n   * into the directory passed to the constructor.\n   * @param mergeDocStores if false, we will not merge the\n   * stored fields nor vectors files\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge(boolean mergeDocStores) throws CorruptIndexException, IOException {\n\n    this.mergeDocStores = mergeDocStores;\n    \n    // NOTE: it's important to add calls to\n    // checkAbort.work(...) if you make any changes to this\n    // method that will spend alot of time.  The frequency\n    // of this check impacts how long\n    // IndexWriter.close(false) takes to actually stop the\n    // threads.\n\n    mergedDocs = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (mergeDocStores && fieldInfos.hasVectors())\n      mergeVectors();\n\n    return mergedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#merge(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method\n   * into the directory passed to the constructor.\n   * @param mergeDocStores if false, we will not merge the\n   * stored fields nor vectors files\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge(boolean mergeDocStores) throws CorruptIndexException, IOException {\n\n    this.mergeDocStores = mergeDocStores;\n    \n    // NOTE: it's important to add calls to\n    // checkAbort.work(...) if you make any changes to this\n    // method that will spend alot of time.  The frequency\n    // of this check impacts how long\n    // IndexWriter.close(false) takes to actually stop the\n    // threads.\n\n    mergedDocs = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (mergeDocStores && fieldInfos.hasVectors())\n      mergeVectors();\n\n    return mergedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}