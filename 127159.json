{"path":"src/test-deprecated/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":null,"sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermEnum termEnum = null;\n\n    // create enumeration of all terms\n    termEnum = reader.terms();\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n\n\n    // create enumeration of terms after term 'aaa', including 'aaa'\n    termEnum = reader.terms(new Term(\"content\", \"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertEquals(100, termEnum.docFreq());\n\n    termEnum.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}