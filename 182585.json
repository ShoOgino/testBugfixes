{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","commits":[{"id":"759d2c8462a6935ee9b8e23c16cc0a096fb329b7","date":1363901479,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery=='text:x^6.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery=='text:x^6.0'\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7f84d51c90072fcb78a446a4dad288060aca5f94","7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='(text:x^2.0)^3.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='(text:x^2.0)^3.0'\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery=='text:x^6.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery=='text:x^6.0'\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='(text:x^2.0)^3.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='(text:x^2.0)^3.0'\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f84d51c90072fcb78a446a4dad288060aca5f94","date":1445549611,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    // boost should multiply\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","bugFix":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq = \"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\", \"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\", subqq, \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\", subqq + \"~1\", \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\", \"  {!v=$qq}~1\", \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"fq\", \"id:1\", \"fl\", \"id,score\", \"q\", subqq + \"^3\", \"qq\", \"text:x^2\"\n        , \"debug\", \"query\"\n        )\n        , \"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    assertJQ(req(\"fq\", \"id:1\", \"fl\", \"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\", \"text:x^2\"\n        , \"debug\", \"query\"\n        )\n        , \"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","bugFix":["b0cdf628dda21ad509f09608c835dc27541d1ca3","759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testNestedQueryModifiers().mjava","sourceNew":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq = \"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\", \"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\", subqq, \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\", subqq + \"~1\", \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\", \"  {!v=$qq}~1\", \"qq\", \"\\\"how brown\\\"~2\"\n        , \"debug\", \"query\"\n        )\n        , \"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"fq\", \"id:1\", \"fl\", \"id,score\", \"q\", subqq + \"^3\", \"qq\", \"text:x^2\"\n        , \"debug\", \"query\"\n        )\n        , \"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    assertJQ(req(\"fq\", \"id:1\", \"fl\", \"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\", \"text:x^2\"\n        , \"debug\", \"query\"\n        )\n        , \"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testNestedQueryModifiers() throws Exception {\n    // One previous error was that for nested queries, outer parameters overrode nested parameters.\n    // For example _query_:\"\\\"a b\\\"~2\" was parsed as \"a b\"\n\n    String subqq=\"_query_:\\\"{!v=$qq}\\\"\";\n\n    assertJQ(req(\"q\",\"_query_:\\\"\\\\\\\"how brown\\\\\\\"~2\\\"\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"q\",subqq, \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",subqq+\"~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    // Should explicit slop override?  It currently does not, but that could be considered a bug.\n    assertJQ(req(\"q\",\"  {!v=$qq}~1\", \"qq\",\"\\\"how brown\\\"~2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/response/docs/[0]/id=='1'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", subqq+\"^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n    assertJQ(req(\"fq\",\"id:1\", \"fl\",\"id,score\", \"q\", \"  {!v=$qq}^3\", \"qq\",\"text:x^2\"\n        , \"debug\",\"query\"\n    )\n        ,\"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["7f84d51c90072fcb78a446a4dad288060aca5f94","7d959d418bddfa46d8eea54f0d8b855165586838"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"7f84d51c90072fcb78a446a4dad288060aca5f94":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"7d959d418bddfa46d8eea54f0d8b855165586838":["7f84d51c90072fcb78a446a4dad288060aca5f94"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d959d418bddfa46d8eea54f0d8b855165586838"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"7f84d51c90072fcb78a446a4dad288060aca5f94":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"7d959d418bddfa46d8eea54f0d8b855165586838":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["7f84d51c90072fcb78a446a4dad288060aca5f94"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}