{"path":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"/dev/null","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a6448412ce640b28861f4c00f899484a9adac1","date":1573627357,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n        for (String file : version.files) {\n          //ensure that the files are downloaded and available\n          coreContainer.getPackageStoreAPI().getPackageStore().fetch(file,null);\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","sourceOld":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","sourceOld":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n        for (String file : version.files) {\n          //ensure that the files are downloaded and available\n          coreContainer.getPackageStoreAPI().getPackageStore().fetch(file,null);\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","bugFix":["d1a6448412ce640b28861f4c00f899484a9adac1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","sourceOld":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n        for (String file : version.files) {\n          //ensure that the files are downloaded and available\n          coreContainer.getPackageStoreAPI().getPackageStore().fetch(file,null);\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        loader = new SolrResourceLoader(\n            \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n            paths,\n            Paths.get(coreContainer.getSolrHome()),\n            coreContainer.getResourceLoader().getClassLoader());\n      }\n\n","sourceOld":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        try {\n          loader = new SolrResourceLoader(\n              \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n              paths,\n              coreContainer.getResourceLoader().getInstancePath(),\n              coreContainer.getResourceLoader().getClassLoader());\n        } catch (MalformedURLException e) {\n          log.error(\"Could not load classloader \", e);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389","date":1591056099,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader.Package.Version#Version(Package,PackageAPI.PkgVersion).mjava","sourceNew":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        loader = new PackageResourceLoader(\n            \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n            paths,\n            Paths.get(coreContainer.getSolrHome()),\n            coreContainer.getResourceLoader().getClassLoader());\n      }\n\n","sourceOld":"      Version(Package parent, PackageAPI.PkgVersion v) {\n        this.parent = parent;\n        this.version = v;\n        List<Path> paths = new ArrayList<>();\n\n        List<String> errs = new ArrayList<>();\n        coreContainer.getPackageStoreAPI().validateFiles(version.files, true, s -> errs.add(s));\n        if(!errs.isEmpty()) {\n          throw new RuntimeException(\"Cannot load package: \" +errs);\n        }\n        for (String file : version.files) {\n          paths.add(coreContainer.getPackageStoreAPI().getPackageStore().getRealpath(file));\n        }\n\n        loader = new SolrResourceLoader(\n            \"PACKAGE_LOADER: \" + parent.name() + \":\" + version,\n            paths,\n            Paths.get(coreContainer.getSolrHome()),\n            coreContainer.getResourceLoader().getClassLoader());\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["d1a6448412ce640b28861f4c00f899484a9adac1","d218decf811b7a0a4d86218c54c79c74a962374b"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["d218decf811b7a0a4d86218c54c79c74a962374b"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["d1a6448412ce640b28861f4c00f899484a9adac1"],"d1a6448412ce640b28861f4c00f899484a9adac1":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["d1a6448412ce640b28861f4c00f899484a9adac1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"d1a6448412ce640b28861f4c00f899484a9adac1":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}