{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","pathOld":"/dev/null","sourceNew":"\t// returns file line by line, ignoring empty lines and comments\n\tprivate String[] readLines(File file) throws Exception {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\tnew FileInputStream(file))); \n\t\tArrayList lines = new ArrayList();\n\t\tString line;\t\n\t\twhile ((line = reader.readLine()) != null) {\n\t\t\tString t = line.trim(); \n\t\t\tif (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n\t\t\t\tlines.add(line);\n\t\t\t}\n\t\t}\n\t\treader.close();\n\t\t\n\t\tString[] result = new String[lines.size()];\n\t\tlines.toArray(result);\n\t\treturn result;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","sourceNew":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    ArrayList lines = new ArrayList();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","sourceOld":"\t// returns file line by line, ignoring empty lines and comments\n\tprivate String[] readLines(File file) throws Exception {\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\tnew FileInputStream(file))); \n\t\tArrayList lines = new ArrayList();\n\t\tString line;\t\n\t\twhile ((line = reader.readLine()) != null) {\n\t\t\tString t = line.trim(); \n\t\t\tif (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n\t\t\t\tlines.add(line);\n\t\t\t}\n\t\t}\n\t\treader.close();\n\t\t\n\t\tString[] result = new String[lines.size()];\n\t\tlines.toArray(result);\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","sourceNew":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    List lines = new ArrayList();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","sourceOld":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    ArrayList lines = new ArrayList();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","sourceNew":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    List<String> lines = new ArrayList<String>();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","sourceOld":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    List lines = new ArrayList();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#readLines(File).mjava","sourceNew":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    List<String> lines = new ArrayList<String>();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","sourceOld":"  // returns file line by line, ignoring empty lines and comments\n  private String[] readLines(File file) throws Exception {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(\n        new FileInputStream(file))); \n    List<String> lines = new ArrayList<String>();\n    String line;  \n    while ((line = reader.readLine()) != null) {\n      String t = line.trim(); \n      if (t.length() > 0 && t.charAt(0) != '#' && (!t.startsWith(\"//\"))) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    \n    String[] result = new String[lines.size()];\n    lines.toArray(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}