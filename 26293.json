{"path":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  public void add(String name, boolean isIndexed, boolean storeTermVector,\n                  boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                  boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      if (fi.isIndexed != isIndexed) {\n        fi.isIndexed = true;                      // once indexed, always index\n      }\n      if (fi.storeTermVector != storeTermVector) {\n        fi.storeTermVector = true;                // once vector, always vector\n      }\n      if (fi.storePositionWithTermVector != storePositionWithTermVector) {\n        fi.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        fi.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.omitNorms != omitNorms) {\n        fi.omitNorms = false;                // once norms are stored, always store\n      }\n      if (fi.storePayloads != storePayloads) {\n        fi.storePayloads = true;\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2950465ac68cd5d1343acb6cc8a79390b9c6e837","date":1181045553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  public FieldInfo add(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      return addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      if (fi.isIndexed != isIndexed) {\n        fi.isIndexed = true;                      // once indexed, always index\n      }\n      if (fi.storeTermVector != storeTermVector) {\n        fi.storeTermVector = true;                // once vector, always vector\n      }\n      if (fi.storePositionWithTermVector != storePositionWithTermVector) {\n        fi.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        fi.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.omitNorms != omitNorms) {\n        fi.omitNorms = false;                // once norms are stored, always store\n      }\n      if (fi.storePayloads != storePayloads) {\n        fi.storePayloads = true;\n      }\n\n    }\n    return fi;\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  public void add(String name, boolean isIndexed, boolean storeTermVector,\n                  boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                  boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      if (fi.isIndexed != isIndexed) {\n        fi.isIndexed = true;                      // once indexed, always index\n      }\n      if (fi.storeTermVector != storeTermVector) {\n        fi.storeTermVector = true;                // once vector, always vector\n      }\n      if (fi.storePositionWithTermVector != storePositionWithTermVector) {\n        fi.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        fi.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.omitNorms != omitNorms) {\n        fi.omitNorms = false;                // once norms are stored, always store\n      }\n      if (fi.storePayloads != storePayloads) {\n        fi.storePayloads = true;\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  synchronized public FieldInfo add(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      return addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    }\n    return fi;\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  public FieldInfo add(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      return addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      if (fi.isIndexed != isIndexed) {\n        fi.isIndexed = true;                      // once indexed, always index\n      }\n      if (fi.storeTermVector != storeTermVector) {\n        fi.storeTermVector = true;                // once vector, always vector\n      }\n      if (fi.storePositionWithTermVector != storePositionWithTermVector) {\n        fi.storePositionWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.storeOffsetWithTermVector != storeOffsetWithTermVector) {\n        fi.storeOffsetWithTermVector = true;                // once vector, always vector\n      }\n      if (fi.omitNorms != omitNorms) {\n        fi.omitNorms = false;                // once norms are stored, always store\n      }\n      if (fi.storePayloads != storePayloads) {\n        fi.storePayloads = true;\n      }\n\n    }\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#add(String,boolean,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param omitTf true if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo add(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, boolean omitTf) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      return addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTf);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTf);\n    }\n    return fi;\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   */\n  synchronized public FieldInfo add(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads) {\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      return addInternal(name, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads);\n    }\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"902ba79f4590a41c663c447756d2e5041cbbdda9":["5350389bf83287111f7760b9e3db3af8e3648474"],"2950465ac68cd5d1343acb6cc8a79390b9c6e837":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"5350389bf83287111f7760b9e3db3af8e3648474":["2950465ac68cd5d1343acb6cc8a79390b9c6e837"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["902ba79f4590a41c663c447756d2e5041cbbdda9"]},"commit2Childs":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["2950465ac68cd5d1343acb6cc8a79390b9c6e837"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2950465ac68cd5d1343acb6cc8a79390b9c6e837":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}