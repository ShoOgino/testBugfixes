{"path":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto));\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["fd9cc9d77712aba3662f24632df7539ab75e3667","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["fd9cc9d77712aba3662f24632df7539ab75e3667","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}