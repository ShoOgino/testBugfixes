{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode(int).mjava","sourceNew":"  /**\n   * Like {@link #hashCode()}, but find the hash function of a prefix with the\n   * given number of components, rather than of the entire path.\n   */\n  public int hashCode(int prefixLen) {\n    if (prefixLen < 0 || prefixLen > ncomponents) {\n      prefixLen = ncomponents;\n    }\n    if (prefixLen == 0) {\n      return 0;\n    }\n    int hash = prefixLen;\n    for (int i = 0; i < prefixLen; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[prefixLen - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #hashCode()}, but find the hash function of a prefix with the\n   * given number of components, rather than of the entire path.\n   */\n  public int hashCode(int prefixLen) {\n    if (prefixLen < 0 || prefixLen > ncomponents) {\n      prefixLen = ncomponents;\n    }\n    if (prefixLen == 0) {\n      return 0;\n    }\n    int hash = prefixLen;\n    for (int i = 0; i < prefixLen; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[prefixLen - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Like {@link #hashCode()}, but find the hash function of a prefix with the\n   * given number of components, rather than of the entire path.\n   */\n  public int hashCode(int prefixLen) {\n    if (prefixLen < 0 || prefixLen > ncomponents) {\n      prefixLen = ncomponents;\n    }\n    if (prefixLen == 0) {\n      return 0;\n    }\n    int hash = prefixLen;\n    for (int i = 0; i < prefixLen; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[prefixLen - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Like {@link #hashCode()}, but find the hash function of a prefix with the\n   * given number of components, rather than of the entire path.\n   */\n  public int hashCode(int prefixLen) {\n    if (prefixLen < 0 || prefixLen > ncomponents) {\n      prefixLen = ncomponents;\n    }\n    if (prefixLen == 0) {\n      return 0;\n    }\n    int hash = prefixLen;\n    for (int i = 0; i < prefixLen; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[prefixLen - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}