{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= getSize()) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= getSize()) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1891ff130d9d54192377049a0bdfac6326df16f","date":1340188663,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= getSize()) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    return getTaxoArrays().parents()[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":["209b03e6aa9098ac043cc757e46f758400427b15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"209b03e6aa9098ac043cc757e46f758400427b15","date":1355045906,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    return getTaxoArrays().parents()[ordinal];\n  }\n\n","bugFix":["3d58d08788c3fd51172ba34474cca42499d6391b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    return getParentArray().getArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    FutureObjects.checkIndex(ordinal, nextID);\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    if (ordinal >= nextID) {\n      throw new ArrayIndexOutOfBoundsException(\"requested ordinal is bigger than the largest ordinal in the taxonomy\");\n    }\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    Objects.checkIndex(ordinal, nextID);\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    // Note: the following if() just enforces that a user can never ask\n    // for the parent of a nonexistant category - even if the parent array\n    // was allocated bigger than it really needs to be.\n    FutureObjects.checkIndex(ordinal, nextID);\n    \n    int[] parents = getTaxoArrays().parents();\n    assert ordinal < parents.length : \"requested ordinal (\" + ordinal + \"); parents.length (\" + parents.length + \") !\";\n    return parents[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"456d7e7092cb043c740b4674301660ee8abc26fe":["209b03e6aa9098ac043cc757e46f758400427b15"],"209b03e6aa9098ac043cc757e46f758400427b15":["3d58d08788c3fd51172ba34474cca42499d6391b"],"c1891ff130d9d54192377049a0bdfac6326df16f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c1891ff130d9d54192377049a0bdfac6326df16f","209b03e6aa9098ac043cc757e46f758400427b15"],"3d58d08788c3fd51172ba34474cca42499d6391b":["c1891ff130d9d54192377049a0bdfac6326df16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c1891ff130d9d54192377049a0bdfac6326df16f"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"209b03e6aa9098ac043cc757e46f758400427b15":["456d7e7092cb043c740b4674301660ee8abc26fe","407687e67faf6e1f02a211ca078d8e3eed631027"],"c1891ff130d9d54192377049a0bdfac6326df16f":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["209b03e6aa9098ac043cc757e46f758400427b15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}