{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#checkLiveCounts().mjava","commits":[{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#checkLiveCounts().mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkLiveCounts() throws IOException {\n    final int recomputedCount = liveDocs.getRecomputedCount();\n    // First verify BitVector is self consistent:\n    assert liveDocs.count() == recomputedCount : \"live count=\" + liveDocs.count() + \" vs recomputed count=\" + recomputedCount;\n\n    assert si.getDelCount() == si.docCount - recomputedCount :\n      \"delete count mismatch: info=\" + si.getDelCount() + \" vs BitVector=\" + (si.docCount-recomputedCount);\n\n    // Verify # deletes does not exceed maxDoc for this\n    // segment:\n    assert si.getDelCount() <= maxDoc() : \n      \"delete count mismatch: \" + recomputedCount + \") exceeds max doc (\" + maxDoc() + \") for segment \" + si.name;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#checkLiveCounts().mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkLiveCounts() throws IOException {\n    final int recomputedCount = liveDocs.getRecomputedCount();\n    // First verify BitVector is self consistent:\n    assert liveDocs.count() == recomputedCount : \"live count=\" + liveDocs.count() + \" vs recomputed count=\" + recomputedCount;\n\n    assert si.getDelCount() == si.docCount - recomputedCount :\n      \"delete count mismatch: info=\" + si.getDelCount() + \" vs BitVector=\" + (si.docCount-recomputedCount);\n\n    // Verify # deletes does not exceed maxDoc for this\n    // segment:\n    assert si.getDelCount() <= maxDoc() : \n      \"delete count mismatch: \" + recomputedCount + \") exceeds max doc (\" + maxDoc() + \") for segment \" + si.name;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#checkLiveCounts().mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkLiveCounts() throws IOException {\n    final int recomputedCount = liveDocs.getRecomputedCount();\n    // First verify BitVector is self consistent:\n    assert liveDocs.count() == recomputedCount : \"live count=\" + liveDocs.count() + \" vs recomputed count=\" + recomputedCount;\n\n    assert si.getDelCount() == si.docCount - recomputedCount :\n      \"delete count mismatch: info=\" + si.getDelCount() + \" vs BitVector=\" + (si.docCount-recomputedCount);\n\n    // Verify # deletes does not exceed maxDoc for this\n    // segment:\n    assert si.getDelCount() <= maxDoc() : \n      \"delete count mismatch: \" + recomputedCount + \") exceeds max doc (\" + maxDoc() + \") for segment \" + si.name;\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#checkLiveCounts().mjava","sourceNew":null,"sourceOld":"  private boolean checkLiveCounts() throws IOException {\n    final int recomputedCount = liveDocs.getRecomputedCount();\n    // First verify BitVector is self consistent:\n    assert liveDocs.count() == recomputedCount : \"live count=\" + liveDocs.count() + \" vs recomputed count=\" + recomputedCount;\n\n    assert si.getDelCount() == si.docCount - recomputedCount :\n      \"delete count mismatch: info=\" + si.getDelCount() + \" vs BitVector=\" + (si.docCount-recomputedCount);\n\n    // Verify # deletes does not exceed maxDoc for this\n    // segment:\n    assert si.getDelCount() <= maxDoc() : \n      \"delete count mismatch: \" + recomputedCount + \") exceeds max doc (\" + maxDoc() + \") for segment \" + si.name;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["9ce667c6d3400b22523701c549c0d35e26da8b46","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}