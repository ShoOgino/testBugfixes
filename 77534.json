{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName, 15000, 60000)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["43d1e498704edd2bba13548a189eed4dfccff11b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43d1e498704edd2bba13548a189eed4dfccff11b":["816521ebaad5add9cb96bb88c577394e2938c40b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"43d1e498704edd2bba13548a189eed4dfccff11b":["9ba1b632c041956c93c41aa1143d16a567014891","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["43d1e498704edd2bba13548a189eed4dfccff11b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}