{"path":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DimensionalValues#getMinPackedValue(String).mjava","sourceNew":"  /** Returns minimum value for each dimension, packed, or null if no points were indexed */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","sourceOld":"  /** Returns minimum value for each dimension, packed, or null if no points were indexed */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","sourceNew":"  /** Returns minimum value for each dimension, packed, or null if {@link #size} is <code>0</code> */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","sourceOld":"  /** Returns minimum value for each dimension, packed, or null if no points were indexed */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","sourceNew":"  /** Returns minimum value for each dimension, packed, or null if {@link #size} is <code>0</code> */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","sourceOld":"  /** Returns minimum value for each dimension, packed, or null if no points were indexed */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","sourceNew":"  /** Returns minimum value for each dimension, packed, or null if {@link #size} is <code>0</code> */\n  public abstract byte[] getMinPackedValue() throws IOException;\n\n","sourceOld":"  /** Returns minimum value for each dimension, packed, or null if {@link #size} is <code>0</code> */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getMinPackedValue(String).mjava","sourceNew":null,"sourceOld":"  /** Returns minimum value for each dimension, packed, or null if {@link #size} is <code>0</code> */\n  public abstract byte[] getMinPackedValue(String fieldName) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}