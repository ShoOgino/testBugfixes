{"path":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    MockRAMDirectory dir = new MockRAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    MockRAMDirectory dir = newDirectory(newRandom());\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    MockRAMDirectory dir = new MockRAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory(newRandom());\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    MockRAMDirectory dir = newDirectory(newRandom());\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory(newRandom());\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    RAMDirectory dir = new RAMDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n    try {\n      fieldInfos.write(output);\n      output.close();\n      assertTrue(output.length() > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c2cf5832e0f01230bc2c4886e16887a0d1f3341","date":1301042882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n    assertTrue(dir.fileLength(name) > 0);\n    FieldInfos readIn = new FieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    _TestUtil.add(testDoc, fieldInfos);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n    assertTrue(dir.fileLength(name) > 0);\n    FieldInfos readIn = new FieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n    assertTrue(dir.fileLength(name) > 0);\n    FieldInfos readIn = new FieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    //Positive test of FieldInfos\n    assertTrue(testDoc != null);\n    FieldInfos fieldInfos = new FieldInfos();\n    fieldInfos.add(testDoc);\n    //Since the complement is stored as well in the fields map\n    assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor\n    Directory dir = newDirectory();\n    String name = \"testFile\";\n    IndexOutput output = dir.createOutput(name);\n    assertTrue(output != null);\n    //Use a RAMOutputStream\n    \n      fieldInfos.write(output);\n      output.close();\n      assertTrue(dir.fileLength(name) > 0);\n      FieldInfos readIn = new FieldInfos(dir, name);\n      assertTrue(fieldInfos.size() == readIn.size());\n      FieldInfo info = readIn.fieldInfo(\"textField1\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField2\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == true);\n      assertTrue(info.omitNorms == false);\n\n      info = readIn.fieldInfo(\"textField3\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      info = readIn.fieldInfo(\"omitNorms\");\n      assertTrue(info != null);\n      assertTrue(info.storeTermVector == false);\n      assertTrue(info.omitNorms == true);\n\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n    assertTrue(dir.fileLength(name) > 0);\n    FieldInfos readIn = new FieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","date":1323284809,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == true);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldInfos#test().mjava","sourceNew":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String name = \"testFile\";\n    Directory dir = newDirectory();\n    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);\n\n    FieldInfos readIn = readFieldInfos(dir, name);\n    assertTrue(fieldInfos.size() == readIn.size());\n    FieldInfo info = readIn.fieldInfo(\"textField1\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField2\");\n    assertTrue(info != null);\n    assertTrue(info.omitNorms == false);\n\n    info = readIn.fieldInfo(\"textField3\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    info = readIn.fieldInfo(\"omitNorms\");\n    assertTrue(info != null);\n    assertTrue(info.storeTermVector == false);\n    assertTrue(info.omitNorms == true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3cc749c053615f5871f3b95715fe292f34e70a53":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3cc749c053615f5871f3b95715fe292f34e70a53","ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1f653cfcf159baeaafe5d01682a911e95bba4012","5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d638301ad1cfcae567b681b893bc8781f0ee48a5","ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c2cf5832e0f01230bc2c4886e16887a0d1f3341":["3cc749c053615f5871f3b95715fe292f34e70a53","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1224a4027481acce15495b03bce9b48b93b42722":["5c2cf5832e0f01230bc2c4886e16887a0d1f3341"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}