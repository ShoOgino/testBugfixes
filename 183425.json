{"path":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.exception != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.req.responses.add(rsp);\n        if (rsp.req.responses.size() == rsp.req.actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e69935771ba8cb2303a86bf8a42be7861eaf1da","date":1216694040,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.exception != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.req.responses.add(rsp);\n        if (rsp.req.responses.size() == rsp.req.actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0e69935771ba8cb2303a86bf8a42be7861eaf1da":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["0e69935771ba8cb2303a86bf8a42be7861eaf1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}