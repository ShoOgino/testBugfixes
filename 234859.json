{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * replicationFactor);\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * replicationFactor);\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * replicationFactor);\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testRouteFieldForHashRouter().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * replicationFactor);\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testRouteFieldForHashRouter()throws Exception{\n    String collectionName = \"routeFieldColl\";\n    int numShards = 4;\n    int replicationFactor = 2;\n    int maxShardsPerNode = ((numShards * replicationFactor) / NODE_COUNT) + 1;\n    String shard_fld = \"shard_s\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, replicationFactor)\n        .setMaxShardsPerNode(maxShardsPerNode)\n        .setRouterField(shard_fld)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, numShards, numShards * replicationFactor);\n\n    new UpdateRequest()\n        .add(\"id\", \"6\", shard_fld, \"a\")\n        .add(\"id\", \"7\", shard_fld, \"a\")\n        .add(\"id\", \"8\", shard_fld, \"b\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    assertEquals(3, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    assertEquals(2, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"a\")).getResults().getNumFound());\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"b\")).getResults().getNumFound());\n    assertEquals(0, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c\")).getResults().getNumFound());\n\n\n    cluster.getSolrClient().deleteByQuery(collectionName, \"*:*\");\n    cluster.getSolrClient().commit(collectionName);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"100\", shard_fld, \"c!doc1\"));\n    cluster.getSolrClient().commit(collectionName);\n    assertEquals(1, cluster.getSolrClient().query(collectionName, new SolrQuery(\"*:*\").setParam(_ROUTE_, \"c!\")).getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["b94236357aaa22b76c10629851fe4e376e0cea82"],"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["abfeda0a9738b1b31db7c43aa5f067596bf5c9e1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["abfeda0a9738b1b31db7c43aa5f067596bf5c9e1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"abfeda0a9738b1b31db7c43aa5f067596bf5c9e1":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}