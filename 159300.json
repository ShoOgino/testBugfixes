{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","commits":[{"id":"108e81824177a1a9f2507addadb8894e1cdf9afc","date":1280934266,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","pathOld":"/dev/null","sourceNew":"  // returns current default codec\n  static String installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n    }\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new MockFixedIntBlockCodec());\n\n    return codec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n    }\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(_TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(_TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(_TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static String installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n    }\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new MockFixedIntBlockCodec());\n\n    return codec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7dd7216e41ab0a12c23eeae04f8f8bb86a1f632","date":1281349867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n    }\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(_TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(_TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(_TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#installTestCodecs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#installTestCodecs().mjava","sourceNew":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","sourceOld":"  // returns current default codec\n  static Codec installTestCodecs() {\n    final CodecProvider cp = CodecProvider.getDefault();\n\n    savedDefaultCodec = CodecProvider.getDefaultCodec();\n    String codec = TEST_CODEC;\n\n    final boolean codecHasParam;\n    int codecParam = 0;\n    if (codec.equals(\"random\")) {\n      codec = pickRandomCodec(seedRnd);\n      codecHasParam = false;\n    } else {\n      Matcher m = codecWithParam.matcher(codec);\n      if (m.matches()) {\n        // codec has a fixed param\n        codecHasParam = true;\n        codec = m.group(1);\n        codecParam = Integer.parseInt(m.group(2));\n      } else {\n        codecHasParam = false;\n      }\n    }\n\n    CodecProvider.setDefaultCodec(codec);\n\n    if (codec.equals(\"PreFlex\")) {\n      // If we're running w/ PreFlex codec we must swap in the\n      // test-only PreFlexRW codec (since core PreFlex can\n      // only read segments):\n      swapCodec(new PreFlexRWCodec());\n    }\n\n    swapCodec(new MockSepCodec());\n    swapCodec(new PulsingCodec(codecHasParam && \"Pulsing\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 20)));\n    swapCodec(new MockFixedIntBlockCodec(codecHasParam && \"MockFixedIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 2000)));\n    // baseBlockSize cannot be over 127:\n    swapCodec(new MockVariableIntBlockCodec(codecHasParam && \"MockVariableIntBlock\".equals(codec) ? codecParam : _TestUtil.nextInt(seedRnd, 1, 127)));\n\n    return cp.lookup(codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"d7dd7216e41ab0a12c23eeae04f8f8bb86a1f632":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43b04c27924fe393e38e9f0986e32c634f261859":["d7dd7216e41ab0a12c23eeae04f8f8bb86a1f632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["d7dd7216e41ab0a12c23eeae04f8f8bb86a1f632"],"108e81824177a1a9f2507addadb8894e1cdf9afc":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"d7dd7216e41ab0a12c23eeae04f8f8bb86a1f632":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["108e81824177a1a9f2507addadb8894e1cdf9afc"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}