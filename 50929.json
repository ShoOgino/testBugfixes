{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterator[Long],Iterator[Integer]).mjava","commits":[{"id":"0c13ac3312389224caec142b1fa4e837caa80ee0","date":1279383717,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterator[Long],Iterator[Integer]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterator[Long]).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterator<Long> neededBounds, final Iterator<Integer> neededShifts\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (long l=min; l<=max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"Long.valueOf(0x\"+Long.toHexString(min>>>shift)+\"L),Long.valueOf(0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().longValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().longValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterator<Long> neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (long l=min; l<=max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l-lower) );\n        }\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"Long.valueOf(0x\"+Long.toHexString(min>>>shift)+\"L),Long.valueOf(0x\"+Long.toHexString(max>>>shift)+\"L),\");\n        assertEquals( \"inner min bound\", neededBounds.next().longValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().longValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"778eb8d25c0eed19bb220d78402ae26e3f67c2d9","date":1279386974,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterator[Long],Iterator[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (long l=min; l<=max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().longValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().longValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterator<Long> neededBounds, final Iterator<Integer> neededShifts\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (long l=min; l<=max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"Long.valueOf(0x\"+Long.toHexString(min>>>shift)+\"L),Long.valueOf(0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().longValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().longValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}