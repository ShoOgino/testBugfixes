{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","sourceNew":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n    \"short toolong evenmuchlongertext a ab toolong foo\"),\n    MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTermReuse(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","sourceOld":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n    \"short toolong evenmuchlongertext a ab toolong foo\"),\n    MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTermReuse(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","sourceNew":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n    \"short toolong evenmuchlongertext a ab toolong foo\"),\n    MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTerm(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","sourceOld":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n    \"short toolong evenmuchlongertext a ab toolong foo\"),\n    MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTermReuse(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/OffsetLimitTokenFilterTest#testFilter().mjava","sourceNew":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(\n        MockTokenizer.WHITESPACE, false);\n    stream.setReader(new StringReader(\"short toolong evenmuchlongertext a ab toolong foo\"));\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    stream.setReader(new StringReader(\"short toolong evenmuchlongertext a ab toolong foo\"));\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    stream.setReader(new StringReader(\"short toolong evenmuchlongertext a ab toolong foo\"));\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTerm(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","sourceOld":"  public void testFilter() throws Exception {\n    // we disable MockTokenizer checks because we will forcefully limit the \n    // tokenstream and call end() before incrementToken() returns false.\n    MockTokenizer stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    OffsetLimitTokenFilter filter = new OffsetLimitTokenFilter(stream, 10);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n    \"short toolong evenmuchlongertext a ab toolong foo\"),\n    MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 12);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\"});\n    \n    stream = new MockTokenizer(new StringReader(\n        \"short toolong evenmuchlongertext a ab toolong foo\"),\n        MockTokenizer.WHITESPACE, false);\n    stream.setEnableChecks(false);\n    filter = new OffsetLimitTokenFilter(stream, 30);\n    assertTokenStreamContents(filter, new String[] {\"short\", \"toolong\",\n        \"evenmuchlongertext\"});\n    \n    checkOneTerm(new Analyzer() {\n      \n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false);\n        return new TokenStreamComponents(tokenizer, new OffsetLimitTokenFilter(tokenizer, 10));\n      }\n    }, \"llenges\", \"llenges\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}