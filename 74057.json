{"path":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","pathOld":"/dev/null","sourceNew":"  public Explanation explain(final int doc) throws IOException {\n    Explanation result = new Explanation();\n    PhraseQuery query = (PhraseQuery)weight.getQuery();\n\n    result.setDescription(\"phraseScore(\" + query + \"), product of:\");\n    \n    Explanation weightExplanation = weight.explain();\n    result.addDetail(weightExplanation);\n\n    Explanation tfExplanation = new Explanation();\n    score(new HitCollector() {\n        public final void collect(int d, float score) {}\n      }, doc+1);\n\n    float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n    result.addDetail(tfExplanation);\n    \n    Explanation normExplanation = new Explanation();\n    normExplanation.setValue(Similarity.decodeNorm(norms[doc]));\n    String field = query.getTerms()[0].field();\n    normExplanation.setDescription(\"norm(field=\"+field + \", doc=\"+doc + \")\");\n    result.addDetail(normExplanation);\n\n    result.setValue(weightExplanation.getValue() *\n                    tfExplanation.getValue() *\n                    normExplanation.getValue());\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d26db6980435280d32792a7ddd3e26866ac98ea9","date":1042658704,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","sourceNew":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    score(new HitCollector() {\n        public final void collect(int d, float score) {}\n      }, doc+1);\n\n    float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","sourceOld":"  public Explanation explain(final int doc) throws IOException {\n    Explanation result = new Explanation();\n    PhraseQuery query = (PhraseQuery)weight.getQuery();\n\n    result.setDescription(\"phraseScore(\" + query + \"), product of:\");\n    \n    Explanation weightExplanation = weight.explain();\n    result.addDetail(weightExplanation);\n\n    Explanation tfExplanation = new Explanation();\n    score(new HitCollector() {\n        public final void collect(int d, float score) {}\n      }, doc+1);\n\n    float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n    result.addDetail(tfExplanation);\n    \n    Explanation normExplanation = new Explanation();\n    normExplanation.setValue(Similarity.decodeNorm(norms[doc]));\n    String field = query.getTerms()[0].field();\n    normExplanation.setDescription(\"norm(field=\"+field + \", doc=\"+doc + \")\");\n    result.addDetail(normExplanation);\n\n    result.setValue(weightExplanation.getValue() *\n                    tfExplanation.getValue() *\n                    normExplanation.getValue());\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d","date":1063243547,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","sourceNew":"    public Explanation explain(final int doc) throws IOException {\n        Explanation tfExplanation = new Explanation();\n\n        score(new HitCollector() {\n            public final void collect(int d, float score) {\n            }\n        }, doc + 1);\n\n        float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n        tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n        tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n        return tfExplanation;\n    }\n\n","sourceOld":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    score(new HitCollector() {\n        public final void collect(int d, float score) {}\n      }, doc+1);\n\n    float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","sourceNew":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    while (next() && doc() < doc) {}\n\n    float phraseFreq = (doc() == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","sourceOld":"    public Explanation explain(final int doc) throws IOException {\n        Explanation tfExplanation = new Explanation();\n\n        score(new HitCollector() {\n            public final void collect(int d, float score) {\n            }\n        }, doc + 1);\n\n        float phraseFreq = (first.doc == doc) ? freq : 0.0f;\n        tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n        tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n        return tfExplanation;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","sourceNew":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    int d = advance(doc);\n    float phraseFreq = (d == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","sourceOld":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    while (next() && doc() < doc) {}\n\n    float phraseFreq = (doc() == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#explain(int).mjava","sourceNew":null,"sourceOld":"  public Explanation explain(final int doc) throws IOException {\n    Explanation tfExplanation = new Explanation();\n\n    int d = advance(doc);\n    float phraseFreq = (d == doc) ? freq : 0.0f;\n    tfExplanation.setValue(getSimilarity().tf(phraseFreq));\n    tfExplanation.setDescription(\"tf(phraseFreq=\" + phraseFreq + \")\");\n\n    return tfExplanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["15c469602973ef1a33c9a07367a380d278ffab20"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d26db6980435280d32792a7ddd3e26866ac98ea9":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["d26db6980435280d32792a7ddd3e26866ac98ea9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"15c469602973ef1a33c9a07367a380d278ffab20":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30a558487f2298c2c19ceca9103c1b6865d64708":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["d26db6980435280d32792a7ddd3e26866ac98ea9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"d26db6980435280d32792a7ddd3e26866ac98ea9":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}