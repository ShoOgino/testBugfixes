{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024 * 1024];\n    byte [] buf2 = new byte [64 * 1024 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d71bab1a294de9e75ab0fb1ad9cc385c3868f5","date":1324787046,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","sourceNew":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","sourceOld":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024 * 1024];\n    byte [] buf2 = new byte [64 * 1024 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#assertFilesIdentical(File,File).mjava","sourceNew":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","sourceOld":"  /**\n   * Make sure two files are byte-byte identical.\n   */\n  private void assertFilesIdentical(File golden, File sorted) throws IOException {\n    assertEquals(golden.length(), sorted.length());\n\n    byte [] buf1 = new byte [64 * 1024];\n    byte [] buf2 = new byte [64 * 1024];\n    int len;\n    DataInputStream is1 = new DataInputStream(new FileInputStream(golden));\n    DataInputStream is2 = new DataInputStream(new FileInputStream(sorted));\n    while ((len = is1.read(buf1)) > 0) {\n      is2.readFully(buf2, 0, len);\n      for (int i = 0; i < len; i++) {\n        assertEquals(buf1[i], buf2[i]);\n      }\n    }\n    IOUtils.close(is1, is2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e8d71bab1a294de9e75ab0fb1ad9cc385c3868f5"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d71bab1a294de9e75ab0fb1ad9cc385c3868f5":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["e8d71bab1a294de9e75ab0fb1ad9cc385c3868f5"],"e8d71bab1a294de9e75ab0fb1ad9cc385c3868f5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}