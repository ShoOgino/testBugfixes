{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","commits":[{"id":"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2","date":1351440252,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongLiteralsAndMatchs() throws IOException {\n    // literals and matchs length > 16\n    final byte[] uncompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < uncompressed.length; ++i) {\n      uncompressed[i] = (byte) i;\n    }\n    test(uncompressed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongLiteralsAndMatchs() throws IOException {\n    // literals and matchs length > 16\n    final byte[] uncompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < uncompressed.length; ++i) {\n      uncompressed[i] = (byte) i;\n    }\n    test(uncompressed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","sourceNew":"  public void testLongLiteralsAndMatchs() throws IOException {\n    // literals and matchs length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","sourceOld":"  public void testLongLiteralsAndMatchs() throws IOException {\n    // literals and matchs length > 16\n    final byte[] uncompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < uncompressed.length; ++i) {\n      uncompressed[i] = (byte) i;\n    }\n    test(uncompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd","date":1351768691,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongMatchs().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongLiteralsAndMatchs().mjava","sourceNew":"  public void testLongMatchs() throws IOException {\n    // match length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","sourceOld":"  public void testLongLiteralsAndMatchs() throws IOException {\n    // literals and matchs length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["dc37197c294c6ecfdf2d133b3bb323be2e71a4e2"],"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc37197c294c6ecfdf2d133b3bb323be2e71a4e2"],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["078bbd4ef812eb14d6d5b1c0ab72b4df820604dd"],"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc37197c294c6ecfdf2d133b3bb323be2e71a4e2","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"078bbd4ef812eb14d6d5b1c0ab72b4df820604dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}