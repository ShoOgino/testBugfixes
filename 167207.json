{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders(boolean).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Just an encapsulation for checkPreferredsAreLeaders to make returning easier.\n  // the doAsserts var is to actually print the problem and fail the test if the condition is not met.\n  private boolean checkPreferredsAreLeaders(boolean doAsserts) throws KeeperException, InterruptedException {\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    for (Slice slice : docCollection.getSlices()) {\n      for (Replica rep : slice.getReplicas()) {\n        if (rep.getBool(\"property.preferredleader\", false)) {\n          boolean isLeader = rep.getBool(\"leader\", false);\n          if (doAsserts) {\n            assertTrue(\"PreferredLeader should be the leader: \", isLeader);\n          } else if (isLeader == false) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkPreferredsAreLeaders(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Just an encapsulation for checkPreferredsAreLeaders to make returning easier.\n  // the doAsserts var is to actually print the problem and fail the test if the condition is not met.\n  private boolean checkPreferredsAreLeaders(boolean doAsserts) throws KeeperException, InterruptedException {\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    for (Slice slice : docCollection.getSlices()) {\n      for (Replica rep : slice.getReplicas()) {\n        if (rep.getBool(\"property.preferredleader\", false)) {\n          boolean isLeader = rep.getBool(\"leader\", false);\n          if (doAsserts) {\n            assertTrue(\"PreferredLeader should be the leader: \", isLeader);\n          } else if (isLeader == false) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}