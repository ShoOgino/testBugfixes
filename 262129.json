{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","commits":[{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    assertEquals(11, grid.getLevelForDistance(ctx.getDistCalc().distanceToDegrees(0.001)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    assertEquals(11, grid.getLevelForDistance(ctx.getDistCalc().distanceToDegrees(0.001)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","sourceNew":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    double degrees = DistanceUtils.dist2Degrees(0.001, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    assertEquals(11, grid.getLevelForDistance(degrees));\n  }\n\n","sourceOld":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    assertEquals(11, grid.getLevelForDistance(ctx.getDistCalc().distanceToDegrees(0.001)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","sourceNew":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    double degrees = DistanceUtils.dist2Degrees(0.001, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    assertEquals(11, grid.getLevelForDistance(degrees));\n  }\n\n","sourceOld":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    double degrees = DistanceUtils.dist2Degrees(0.001, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    assertEquals(11, grid.getLevelForDistance(degrees));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#testOneMeterPrecision().mjava","sourceNew":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    double degrees = DistanceUtils.dist2Degrees(0.001, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    assertEquals(11, grid.getLevelForDistance(degrees));\n  }\n\n","sourceOld":"  @Test\n  public void testOneMeterPrecision() {\n    init(GeohashPrefixTree.getMaxLevelsPossible());\n    GeohashPrefixTree grid = (GeohashPrefixTree) ((RecursivePrefixTreeStrategy) strategy).getGrid();\n    //DWS: I know this to be true.  11 is needed for one meter\n    double degrees = DistanceUtils.dist2Degrees(0.001, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    assertEquals(11, grid.getLevelForDistance(degrees));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["da956410d7a790f567af4e7e94584fb0930212f2","112d77ac8d3e10a362516ad834c9a11d35c94234"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da956410d7a790f567af4e7e94584fb0930212f2":["85ac3534293008a0b7704f8ba54592d51fd29fa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["d0d1f90e969803cc84174589b5e4a39b7935fecd","da956410d7a790f567af4e7e94584fb0930212f2"],"da956410d7a790f567af4e7e94584fb0930212f2":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}