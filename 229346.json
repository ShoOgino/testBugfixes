{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","sourceNew":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","sourceOld":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","sourceNew":"  public void testMinFunction() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n    QueryUtils.check(query);\n    // all 10 hits should have score = 2 (min payload value)\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n      Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n      String exp = explain.toString();\n      assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n      assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n    }\n  }  \n\n","sourceOld":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","sourceNew":"  public void testMinFunction() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n    QueryUtils.check(query);\n    // all 10 hits should have score = 2 (min payload value)\n    hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n      Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n      String exp = explain.toString();\n      assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n      assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n    }\n  }  \n\n","sourceOld":"  public void testMinFunction() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n    QueryUtils.check(query);\n    // all 10 hits should have score = 2 (min payload value)\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n      Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n      String exp = explain.toString();\n      assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n      assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73561ba4c64c1aea2ba4b3873f80b9b2a2946816","date":1438618499,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","sourceNew":null,"sourceOld":"  public void testMinFunction() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n    QueryUtils.check(query);\n    // all 10 hits should have score = 2 (min payload value)\n    hits = searcher.search(query, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n      Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n      String exp = explain.toString();\n      assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n      assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}