{"path":"lucene/core/src/test/org/apache/lucene/index/TestTerms#testTermMinMaxRandom().mjava","commits":[{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTerms#testTermMinMaxRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermMinMaxRandom() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    BytesRef minTerm = null;\n    BytesRef maxTerm = null;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      Field field = new TextField(\"field\", \"\", Field.Store.NO);\n      doc.add(field);\n      //System.out.println(\"  doc \" + i);\n      CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[atLeast(10)];\n      for(int j=0;j<tokens.length;j++) {\n        byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 20)];\n        random().nextBytes(bytes);\n        BytesRef tokenBytes = new BytesRef(bytes);\n        //System.out.println(\"    token \" + tokenBytes);\n        if (minTerm == null || tokenBytes.compareTo(minTerm) < 0) {\n          //System.out.println(\"      ** new min\");\n          minTerm = tokenBytes;\n        }\n        if (maxTerm == null || tokenBytes.compareTo(maxTerm) > 0) {\n          //System.out.println(\"      ** new max\");\n          maxTerm = tokenBytes;\n        }\n        tokens[j] = new CannedBinaryTokenStream.BinaryToken(tokenBytes);\n      }\n      field.setTokenStream(new CannedBinaryTokenStream(tokens));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    assertEquals(minTerm, terms.getMin());\n    assertEquals(maxTerm, terms.getMax());\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTerms#testTermMinMaxRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermMinMaxRandom() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    BytesRef minTerm = null;\n    BytesRef maxTerm = null;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      Field field = new TextField(\"field\", \"\", Field.Store.NO);\n      doc.add(field);\n      //System.out.println(\"  doc \" + i);\n      CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[atLeast(10)];\n      for(int j=0;j<tokens.length;j++) {\n        byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 20)];\n        random().nextBytes(bytes);\n        BytesRef tokenBytes = new BytesRef(bytes);\n        //System.out.println(\"    token \" + tokenBytes);\n        if (minTerm == null || tokenBytes.compareTo(minTerm) < 0) {\n          //System.out.println(\"      ** new min\");\n          minTerm = tokenBytes;\n        }\n        if (maxTerm == null || tokenBytes.compareTo(maxTerm) > 0) {\n          //System.out.println(\"      ** new max\");\n          maxTerm = tokenBytes;\n        }\n        tokens[j] = new CannedBinaryTokenStream.BinaryToken(tokenBytes);\n      }\n      field.setTokenStream(new CannedBinaryTokenStream(tokens));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    assertEquals(minTerm, terms.getMin());\n    assertEquals(maxTerm, terms.getMax());\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTerms#testTermMinMaxRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTerms#testTermMinMaxRandom().mjava","sourceNew":"  public void testTermMinMaxRandom() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    BytesRef minTerm = null;\n    BytesRef maxTerm = null;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      Field field = new TextField(\"field\", \"\", Field.Store.NO);\n      doc.add(field);\n      //System.out.println(\"  doc \" + i);\n      CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[atLeast(10)];\n      for(int j=0;j<tokens.length;j++) {\n        byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 20)];\n        random().nextBytes(bytes);\n        BytesRef tokenBytes = new BytesRef(bytes);\n        //System.out.println(\"    token \" + tokenBytes);\n        if (minTerm == null || tokenBytes.compareTo(minTerm) < 0) {\n          //System.out.println(\"      ** new min\");\n          minTerm = tokenBytes;\n        }\n        if (maxTerm == null || tokenBytes.compareTo(maxTerm) > 0) {\n          //System.out.println(\"      ** new max\");\n          maxTerm = tokenBytes;\n        }\n        tokens[j] = new CannedBinaryTokenStream.BinaryToken(tokenBytes);\n      }\n      field.setTokenStream(new CannedBinaryTokenStream(tokens));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    Terms terms = MultiTerms.getTerms(r, \"field\");\n    assertEquals(minTerm, terms.getMin());\n    assertEquals(maxTerm, terms.getMax());\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTermMinMaxRandom() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(100);\n    BytesRef minTerm = null;\n    BytesRef maxTerm = null;\n    for(int i=0;i<numDocs;i++ ){\n      Document doc = new Document();\n      Field field = new TextField(\"field\", \"\", Field.Store.NO);\n      doc.add(field);\n      //System.out.println(\"  doc \" + i);\n      CannedBinaryTokenStream.BinaryToken[] tokens = new CannedBinaryTokenStream.BinaryToken[atLeast(10)];\n      for(int j=0;j<tokens.length;j++) {\n        byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 20)];\n        random().nextBytes(bytes);\n        BytesRef tokenBytes = new BytesRef(bytes);\n        //System.out.println(\"    token \" + tokenBytes);\n        if (minTerm == null || tokenBytes.compareTo(minTerm) < 0) {\n          //System.out.println(\"      ** new min\");\n          minTerm = tokenBytes;\n        }\n        if (maxTerm == null || tokenBytes.compareTo(maxTerm) > 0) {\n          //System.out.println(\"      ** new max\");\n          maxTerm = tokenBytes;\n        }\n        tokens[j] = new CannedBinaryTokenStream.BinaryToken(tokenBytes);\n      }\n      field.setTokenStream(new CannedBinaryTokenStream(tokens));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    assertEquals(minTerm, terms.getMin());\n    assertEquals(maxTerm, terms.getMax());\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0974f33be0e2189e71f36b67f1017f4072b1a126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0974f33be0e2189e71f36b67f1017f4072b1a126":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","04e775de416dd2d8067b10db1c8af975a1d5017e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}