{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<byte[]>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,AtomicReaderContext,Bits,Map[Term,TermContext],boolean).mjava","sourceNew":null,"sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, boolean collectPayloads)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    this.collectPayloads = collectPayloads;\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    matchPayload = new LinkedList<>();\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(context, acceptDocs, termContexts);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}