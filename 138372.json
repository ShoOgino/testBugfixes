{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","commits":[{"id":"68cfd3a389f231b8fe23dae4d0ddb2463e79b525","date":1495808626,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Lists.newArrayList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5085e3af6fb4df64be01b9d6192c92722eb91c6b","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Lists.newArrayList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null != sortParam && sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        sortComparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n      }\n    }    \n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null != sortParam && sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        sortComparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n      }\n    }    \n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null != sortParam && sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        sortComparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n      }\n    }    \n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    sortOrder = extractSortOrder(expression, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArrayEvaluator#ArrayEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null != sortParam && sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        sortComparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n      }\n    }    \n  }\n\n","sourceOld":"  public ArrayEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory, Arrays.asList(\"sort\"));\n    \n    StreamExpressionNamedParameter sortParam = factory.getNamedOperand(expression, \"sort\");\n    if(null != sortParam && sortParam.getParameter() instanceof StreamExpressionValue){\n      String sortOrder = ((StreamExpressionValue)sortParam.getParameter()).getValue().trim().toLowerCase(Locale.ROOT);\n      if(\"asc\".equals(sortOrder) || \"desc\".equals(sortOrder)){\n        sortComparator = \"asc\".equals(sortOrder) ? (left,right) -> left.compareTo(right) : (left,right) -> right.compareTo(left);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - invalid 'sort' parameter - expecting either 'asc' or 'desc'\", expression));\n      }\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"5085e3af6fb4df64be01b9d6192c92722eb91c6b":["e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","5085e3af6fb4df64be01b9d6192c92722eb91c6b"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["28288370235ed02234a64753cdbf0c6ec096304a","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["28288370235ed02234a64753cdbf0c6ec096304a"],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","5085e3af6fb4df64be01b9d6192c92722eb91c6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5085e3af6fb4df64be01b9d6192c92722eb91c6b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["5085e3af6fb4df64be01b9d6192c92722eb91c6b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","68cfd3a389f231b8fe23dae4d0ddb2463e79b525","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["e2ca4206e5497c29b07a997ea7fc47d3bac0a352","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}