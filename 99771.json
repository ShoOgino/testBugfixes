{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNoIndexSort().mjava","commits":[{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNoIndexSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoIndexSort() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.INT)));\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader.open(w).close();\n    w.addDocument(new Document());\n    // this makes a sorted segment:\n    w.forceMerge(1);\n    // this makes another segment, so that MultiDocValues isn't just a no-op:\n    w.addDocument(new Document());\n    IndexReader r = DirectoryReader.open(w);\n    \n    String message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getDocsWithField(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getNumericValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getBinaryValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedSetValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedNumericValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"815972da4a13279b8e975d2e32ca450649d6c295","date":1462635959,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testNoIndexSort().mjava","sourceNew":null,"sourceOld":"  public void testNoIndexSort() throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexSort(new Sort(new SortField(\"foo\", SortField.Type.INT)));\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader.open(w).close();\n    w.addDocument(new Document());\n    // this makes a sorted segment:\n    w.forceMerge(1);\n    // this makes another segment, so that MultiDocValues isn't just a no-op:\n    w.addDocument(new Document());\n    IndexReader r = DirectoryReader.open(w);\n    \n    String message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getDocsWithField(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getNumericValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getBinaryValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedSetValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    message = expectThrows(IllegalArgumentException.class, () -> {\n        MultiDocValues.getSortedNumericValues(r, \"foo\");\n      }).getMessage();\n    assertTrue(message.contains(\"cannot handle index sort\"));\n    assertTrue(message.contains(\"indexSort=<int: \\\"foo\\\">\"));\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"815972da4a13279b8e975d2e32ca450649d6c295":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"815972da4a13279b8e975d2e32ca450649d6c295":[],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["815972da4a13279b8e975d2e32ca450649d6c295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["815972da4a13279b8e975d2e32ca450649d6c295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}