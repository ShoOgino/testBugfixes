{"path":"lucene/core/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73ab989727307be90eb75c2ce4ef41d383974f3","date":1580322291,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Line2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: check if point lies on any line segment\n      if (tree.isPointOnLine(ax, ay)) {\n        return Relation.CELL_INSIDE_QUERY;\n      }\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, ax, ay, bx, by, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == bx && ay == by) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, bx, by, cx, cy, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      // indexed \"triangle\" is a line:\n      if (tree.crossesLine(minX, maxX, minY, maxY, cx, cy, ax, ay, true)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (Component2D.pointInTriangle(minX, maxX, minY, maxY, tree.x1, tree.y1, ax, ay, bx, by, cx, cy) == true ||\n        tree.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, true)) {\n      // indexed \"triangle\" is a triangle:\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["c568a1e2a5125c2245150eebb030a81baa158b31"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}