{"path":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","commits":[{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    req.trackRequestResult(null, false);\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    req.trackRequestResult(null, false);\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    req.trackRequestResult(null, false);\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleError(Throwable ex) {\n    req.trackRequestResult(null, false);\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n  }\n\n","bugFix":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, null, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275053d3f983b2205591864f4ac619da2917f679","date":1550676562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"Error when calling {} to {}\", req.toString(), req.node.getUrl(), ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, null, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"error\", ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, null, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/ErrorReportingConcurrentUpdateSolrClient[StreamingSolrClients]#handleError(Throwable).mjava","sourceNew":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"Error when calling {} to {}\", req, req.node.getUrl(), ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, null, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleError(Throwable ex) {\n    log.error(\"Error when calling {} to {}\", req.toString(), req.node.getUrl(), ex);\n    Error error = new Error();\n    error.e = (Exception) ex;\n    if (ex instanceof SolrException) {\n      error.statusCode = ((SolrException) ex).code();\n    }\n    error.req = req;\n    errors.add(error);\n    if (!req.shouldRetry(error)) {\n      // only track the error if we are not retrying the request\n      req.trackRequestResult(null, null, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"275053d3f983b2205591864f4ac619da2917f679":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["275053d3f983b2205591864f4ac619da2917f679"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["275053d3f983b2205591864f4ac619da2917f679"],"275053d3f983b2205591864f4ac619da2917f679":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}