{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testMergeStream().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testMergeStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    //Test ascending\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new AscFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    //Test descending\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new DescFieldComp(\"a_i\"));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    //Test compound sort\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new AscFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new DescFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testMergeStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    //Test ascending\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new AscFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    //Test descending\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new DescFieldComp(\"a_i\"));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    //Test compound sort\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new AscFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new DescFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testMergeStream().mjava","sourceNew":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    //Test ascending\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    //Test descending\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    //Test compound sort\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    //Test ascending\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new AscFieldComp(\"a_i\"));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    //Test descending\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new DescFieldComp(\"a_i\"));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    //Test compound sort\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new AscFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new AscFieldComp(\"a_f\"),new DescFieldComp(\"a_i\")));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}