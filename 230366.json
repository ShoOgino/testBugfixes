{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeBaseDocSet().mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeBaseDocSet().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#computeBaseDocSet().mjava","sourceNew":"  /**\n   * Computes a base {@link DocSet} for the current request to be used\n   * when computing global stats for the local index.\n   *\n   * This is typically the same as the main DocSet for the {@link ResponseBuilder}\n   * unless {@link CommonParams#TAG tag}ged filter queries have been excluded using \n   * the {@link CommonParams#EXCLUDE ex} local param\n   */\n  public DocSet computeBaseDocSet() throws IOException {\n\n    DocSet docs = rb.getResults().docSet;\n    Map<?,?> tagMap = (Map<?,?>) rb.req.getContext().get(\"tags\");\n\n    if (excludeTagList.isEmpty() || null == tagMap) {\n      // either the exclude list is empty, or there\n      // aren't any tagged filters to exclude anyway.\n      return docs;\n    }\n\n    IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n    for (String excludeTag : excludeTagList) {\n      Object olst = tagMap.get(excludeTag);\n      // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n      if (!(olst instanceof Collection)) continue;\n      for (Object o : (Collection<?>)olst) {\n        if (!(o instanceof QParser)) continue;\n        QParser qp = (QParser)o;\n        try {\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        } catch (SyntaxError e) {\n          // this shouldn't be possible since the request should have already\n          // failed when attempting to execute the query, but just in case...\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Excluded query can't be parsed: \" + \n                                  originalParam + \" due to: \" + e.getMessage(), e);\n        }\n      }\n    }\n    if (excludeSet.size() == 0) return docs;\n    \n    List<Query> qlist = new ArrayList<Query>();\n    \n    // add the base query\n    if (!excludeSet.containsKey(rb.getQuery())) {\n      qlist.add(rb.getQuery());\n    }\n    \n    // add the filters\n    if (rb.getFilters() != null) {\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n      }\n    }\n    \n    // get the new base docset for this facet\n    return searcher.getDocSet(qlist);\n  }\n\n","sourceOld":"  /**\n   * Computes a base {@link DocSet} for the current request to be used\n   * when computing global stats for the local index.\n   *\n   * This is typically the same as the main DocSet for the {@link ResponseBuilder}\n   * unless {@link CommonParams#TAG tag}ged filter queries have been excluded using \n   * the {@link CommonParams#EXCLUDE ex} local param\n   */\n  public DocSet computeBaseDocSet() throws IOException {\n\n    DocSet docs = rb.getResults().docSet;\n    Map<?,?> tagMap = (Map<?,?>) rb.req.getContext().get(\"tags\");\n\n    if (excludeTagList.isEmpty() || null == tagMap) {\n      // either the exclude list is empty, or there\n      // aren't any tagged filters to exclude anyway.\n      return docs;\n    }\n\n    IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n    for (String excludeTag : excludeTagList) {\n      Object olst = tagMap.get(excludeTag);\n      // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n      if (!(olst instanceof Collection)) continue;\n      for (Object o : (Collection<?>)olst) {\n        if (!(o instanceof QParser)) continue;\n        QParser qp = (QParser)o;\n        try {\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        } catch (SyntaxError e) {\n          // this shouldn't be possible since the request should have already\n          // failed when attempting to execute the query, but just in case...\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Excluded query can't be parsed: \" + \n                                  originalParam + \" due to: \" + e.getMessage(), e);\n        }\n      }\n    }\n    if (excludeSet.size() == 0) return docs;\n    \n    List<Query> qlist = new ArrayList<Query>();\n    \n    // add the base query\n    if (!excludeSet.containsKey(rb.getQuery())) {\n      qlist.add(rb.getQuery());\n    }\n    \n    // add the filters\n    if (rb.getFilters() != null) {\n      for (Query q : rb.getFilters()) {\n        if (!excludeSet.containsKey(q)) {\n          qlist.add(q);\n        }\n      }\n    }\n    \n    // get the new base docset for this facet\n    return searcher.getDocSet(qlist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["283ff02f401ec3e7a2fad73643970f052383fb0c"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}