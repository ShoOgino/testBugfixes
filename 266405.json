{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    if (inputWindow.size() > 0) {\n      inputWindow.removeFirst();\n    }\n    while (getNextToken()) {\n      inputWindow.add(captureState());\n      if (inputWindow.size() == maxShingleSize) {\n        break;\n      }\n    }\n    gramSize.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#shiftInputWindow().mjava","sourceNew":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","sourceOld":"  /**\n   * <p>Fills {@link #inputWindow} with input stream tokens, if available, \n   * shifting to the right if the window was previously full.\n   * <p>Resets {@link #gramSize} to its minimum value.\n   *\n   * @throws IOException if there's a problem getting the next token\n   */\n  private void shiftInputWindow() throws IOException {\n    InputWindowToken firstToken = null;\n    if (inputWindow.size() > 0) {\n      firstToken = inputWindow.removeFirst();\n    }\n    while (inputWindow.size() < maxShingleSize) {\n      if (null != firstToken) {  // recycle the firstToken, if available\n        if (null != getNextToken(firstToken)) {\n          inputWindow.add(firstToken); // the firstToken becomes the last\n          firstToken = null;\n        } else {\n          break; // end of input stream\n        }\n      } else {\n        InputWindowToken nextToken = getNextToken(null);\n        if (null != nextToken) {\n          inputWindow.add(nextToken);\n        } else {\n          break; // end of input stream\n        }\n      }\n    }\n    gramSize.reset();\n    isOutputHere = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}