{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a","date":1289919830,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1772ed9c586acb97c8905f4908fab99ac0d31aef","date":1303975326,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac4d32d46572c5cf9701cfe18cf4eabfec45ef8","date":1303995951,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(c.failures.size() == 0);\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = 15;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    _TestUtil.checkIndex(c.dir2);\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.writer2.setInfoStream(VERBOSE ? System.out : null);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2, true);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["cca56866c19997e28ef073622656669c15210540"],"5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","1772ed9c586acb97c8905f4908fab99ac0d31aef"],"fac4d32d46572c5cf9701cfe18cf4eabfec45ef8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1772ed9c586acb97c8905f4908fab99ac0d31aef"],"1772ed9c586acb97c8905f4908fab99ac0d31aef":["5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a","1772ed9c586acb97c8905f4908fab99ac0d31aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cca56866c19997e28ef073622656669c15210540"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cca56866c19997e28ef073622656669c15210540":["1772ed9c586acb97c8905f4908fab99ac0d31aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","1772ed9c586acb97c8905f4908fab99ac0d31aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"fac4d32d46572c5cf9701cfe18cf4eabfec45ef8":[],"1772ed9c586acb97c8905f4908fab99ac0d31aef":["135621f3a0670a9394eb563224a3b76cc4dddc0f","fac4d32d46572c5cf9701cfe18cf4eabfec45ef8","a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fac4d32d46572c5cf9701cfe18cf4eabfec45ef8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["5fff8d3ee91620a83b0a3ac1c9f85b384c7cf32a","85a883878c0af761245ab048babc63d099f835f3"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","06584e6e98d592b34e1329b384182f368d2025e8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","fac4d32d46572c5cf9701cfe18cf4eabfec45ef8","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}