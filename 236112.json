{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","commits":[{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      ConfigSolr cfg = new ConfigSolrXml(new SolrResourceLoader(\"solr/collection1\"), null, is, null, false, null);\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a877077e0a22a42eebce7d1052c58e97d3afb12d","f225b9b576dc345ee8c27f91147b4afc0350511c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config, cc);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      ConfigSolr cfg = new ConfigSolrXml(new SolrResourceLoader(\"solr/collection1\"), null, is, null, false, null);\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config, cc);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config, cc);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config, cc);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f225b9b576dc345ee8c27f91147b4afc0350511c","date":1373552135,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":["e475642767c688ede5728d7918326f70b4e0bf3a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException, ParserConfigurationException, SAXException {\n    CoreContainer cc = null;\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n    try {\n      InputStream is = new FileInputStream(new File(solrHome, \"solr.xml\"));\n      Config config = new Config(new SolrResourceLoader(\"solr/collection1\"), null, new InputSource(is), null, false);\n      boolean oldStyle = (config.getNode(\"solr/cores\", false) != null);\n      ConfigSolr cfg;\n      if (oldStyle) {\n        cfg = new ConfigSolrXmlOld(config, cc);\n      } else {\n        cfg = new ConfigSolrXml(config, cc);\n      }\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CLASS, null), \"testHttpShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_CONNTIMEOUT, 0), 110);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_NAME, null), \"testShardHandlerFactory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_SHARDHANDLERFACTORY_SOCKETTIMEOUT, 0), 100);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    } finally {\n      if (cc != null) cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0), 3);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0), 37);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f763a1acdb27217b4799d1ca51c816739835a3e0","date":1387388124,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COLLECTIONSHANDLER, null), \"testCollectionsHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_INFOHANDLER, null), \"testInfoHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0), 3);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0), 37);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0), 3);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0), 37);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COLLECTIONSHANDLER, null), \"testCollectionsHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_INFOHANDLER, null), \"testInfoHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0), 3);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0), 37);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03681d28699f1218ed73de3e36e303ca6bcadec7","date":1394805879,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", \"testAdminHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null));\n      assertEquals(\"Did not find expected value\", \"testCollectionsHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_COLLECTIONSHANDLER, null));\n      assertEquals(\"Did not find expected value\", \"testInfoHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_INFOHANDLER, null));\n      assertEquals(\"Did not find expected value\", 11, cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0));\n      assertEquals(\"Did not find expected value\", \"testCoreRootDirectory\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null));\n      assertEquals(\"Did not find expected value\", 22, cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", 33, cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", 3, cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0));\n      assertEquals(\"Did not find expected value\", 37, cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0));\n      assertEquals(\"Did not find expected value\", \"testHost\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null));\n      assertEquals(\"Did not find expected value\", \"testHostContext\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null));\n      assertEquals(\"Did not find expected value\", 44, cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0));\n      assertEquals(\"Did not find expected value\", 55, cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0));\n      assertEquals(\"Did not find expected value\", \"testLoggingClass\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null));\n      assertEquals(\"Did not find expected value\", \"testLoggingEnabled\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null));\n      assertEquals(\"Did not find expected value\", 88, cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0));\n      assertEquals(\"Did not find expected value\", 99, cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0));\n      assertEquals(\"Did not find expected value\", \"testManagementPath\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null));\n      assertEquals(\"Did not find expected value\", \"testSharedLib\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null));\n      assertEquals(\"Did not find expected value\", \"testShareSchema\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null));\n      assertEquals(\"Did not find expected value\", 66, cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0));\n      assertEquals(\"Did not find expected value\", 77, cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", \"testZkHost\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null), \"testAdminHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COLLECTIONSHANDLER, null), \"testCollectionsHandler\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_INFOHANDLER, null), \"testInfoHandler\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0), 11);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null), \"testCoreRootDirectory\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0), 22);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0), 33);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0), 3);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0), 37);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null), \"testHost\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null), \"testHostContext\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0), 44);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0), 55);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null), \"testLoggingClass\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null), \"testLoggingEnabled\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0), 88);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0), 99);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null), \"testManagementPath\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null), \"testSharedLib\");\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null), \"testShareSchema\");\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0), 66);\n      assertEquals(\"Did not find expected value\", cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0), 77);\n      assertEquals(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null), \"testZkHost\");\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a877077e0a22a42eebce7d1052c58e97d3afb12d","date":1405981118,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\", cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"zk host port\", \"44\", cfg.getZkHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","sourceOld":"  @Test\n  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    SolrResourceLoader loader = null;\n    try {\n      loader = new SolrResourceLoader(solrHome.getAbsolutePath());\n      ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n\n      assertEquals(\"Did not find expected value\", \"testAdminHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINHANDLER, null));\n      assertEquals(\"Did not find expected value\", \"testCollectionsHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_COLLECTIONSHANDLER, null));\n      assertEquals(\"Did not find expected value\", \"testInfoHandler\", cfg.get(ConfigSolr.CfgProp.SOLR_INFOHANDLER, null));\n      assertEquals(\"Did not find expected value\", 11, cfg.getInt(ConfigSolr.CfgProp.SOLR_CORELOADTHREADS, 0));\n      assertEquals(\"Did not find expected value\", \"testCoreRootDirectory\", cfg.get(ConfigSolr.CfgProp.SOLR_COREROOTDIRECTORY, null));\n      assertEquals(\"Did not find expected value\", 22, cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATECONNTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", 33, cfg.getInt(ConfigSolr.CfgProp.SOLR_DISTRIBUPDATESOTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", 3, cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONS, 0));\n      assertEquals(\"Did not find expected value\", 37, cfg.getInt(ConfigSolr.CfgProp.SOLR_MAXUPDATECONNECTIONSPERHOST, 0));\n      assertEquals(\"Did not find expected value\", \"testHost\", cfg.get(ConfigSolr.CfgProp.SOLR_HOST, null));\n      assertEquals(\"Did not find expected value\", \"testHostContext\", cfg.get(ConfigSolr.CfgProp.SOLR_HOSTCONTEXT, null));\n      assertEquals(\"Did not find expected value\", 44, cfg.getInt(ConfigSolr.CfgProp.SOLR_HOSTPORT, 0));\n      assertEquals(\"Did not find expected value\", 55, cfg.getInt(ConfigSolr.CfgProp.SOLR_LEADERVOTEWAIT, 0));\n      assertEquals(\"Did not find expected value\", \"testLoggingClass\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null));\n      assertEquals(\"Did not find expected value\", \"testLoggingEnabled\", cfg.get(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, null));\n      assertEquals(\"Did not find expected value\", 88, cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 0));\n      assertEquals(\"Did not find expected value\", 99, cfg.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, 0));\n      assertEquals(\"Did not find expected value\", \"testManagementPath\", cfg.get(ConfigSolr.CfgProp.SOLR_MANAGEMENTPATH, null));\n      assertEquals(\"Did not find expected value\", \"testSharedLib\", cfg.get(ConfigSolr.CfgProp.SOLR_SHAREDLIB, null));\n      assertEquals(\"Did not find expected value\", \"testShareSchema\", cfg.get(ConfigSolr.CfgProp.SOLR_SHARESCHEMA, null));\n      assertEquals(\"Did not find expected value\", 66, cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, 0));\n      assertEquals(\"Did not find expected value\", 77, cfg.getInt(ConfigSolr.CfgProp.SOLR_ZKCLIENTTIMEOUT, 0));\n      assertEquals(\"Did not find expected value\", \"testZkHost\", cfg.get(ConfigSolr.CfgProp.SOLR_ZKHOST, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_PERSISTENT, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_CORES_DEFAULT_CORE_NAME, null));\n      assertNull(\"Did not find expected value\", cfg.get(ConfigSolr.CfgProp.SOLR_ADMINPATH, null));\n    }\n    finally {\n      loader.close();\n    }\n\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","03681d28699f1218ed73de3e36e303ca6bcadec7","e475642767c688ede5728d7918326f70b4e0bf3a"],"bugIntro":["4b02ae24808d82a22a424499d7ad8840dc668120","d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b02ae24808d82a22a424499d7ad8840dc668120","date":1408388109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\" + File.separator, cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"zk host port\", \"44\", cfg.getZkHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\", cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"zk host port\", \"44\", cfg.getZkHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","bugFix":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"bugIntro":["4bb5e36693e1b5167f92325b87847a0d8bf100f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2c1938c9f5c1c27e65b3a92640108988277ee9b","date":1418411102,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\" + File.separator, cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\" + File.separator, cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"zk host port\", \"44\", cfg.getZkHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","bugFix":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bb5e36693e1b5167f92325b87847a0d8bf100f5","date":1418983514,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertEquals(\"core root dir\", \"testCoreRootDirectory\" + File.separator, cfg.getCoreRootDirectory());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","bugFix":["4b02ae24808d82a22a424499d7ad8840dc668120"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n    assertEquals(\"persistent\", true, cfg.isPersistent());\n    assertEquals(\"core admin path\", ConfigSolr.DEFAULT_CORE_ADMIN_PATH, cfg.getAdminPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    ConfigSolr cfg = ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", cfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", cfg.getZkHostContext());\n    assertEquals(\"solr host port\", \"44\", cfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, cfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, cfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", cfg.getZkHost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04983a1b95aca878f0db04dda112e321ea6483f8","date":1434226973,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dc6df6d3cec2cda16c96f408123470a6c069a29","date":1447321406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.getAbsolutePath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getDistributedSocketTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(0));\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":null,"bugIntro":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3783d6f4d080f4f0116769e0e1b0f0f440565c4","date":1468932683,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(0));\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"defa11d88d50ec356d5e7428f1ebc89623e840ac","date":1527653148,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2be0a2886c76942ff986465eabde7b858895dc9","date":1555349228,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n\n    assertEquals(\"maxBooleanClauses\", (Integer) 42, cfg.getBooleanQueryMaxClauseCount());\n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n    \n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n    Path testSrcRoot = TEST_PATH();\n    Files.copy(testSrcRoot.resolve(\"solr-50-all.xml\"), solrHome.resolve(\"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(solrHome, new Properties());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n\n    assertEquals(\"maxBooleanClauses\", (Integer) 42, cfg.getBooleanQueryMaxClauseCount());\n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n\n    File testSrcRoot = new File(SolrTestCaseJ4.TEST_HOME());\n    FileUtils.copyFile(new File(testSrcRoot, \"solr-50-all.xml\"), new File(solrHome, \"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(loader, solrHome.toPath());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n\n    assertEquals(\"maxBooleanClauses\", (Integer) 42, cfg.getBooleanQueryMaxClauseCount());\n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXml#testAllInfoPresent().mjava","sourceNew":"  public void testAllInfoPresent() throws IOException {\n    Path testSrcRoot = TEST_PATH();\n    Files.copy(testSrcRoot.resolve(\"solr-50-all.xml\"), solrHome.resolve(\"solr.xml\"));\n\n    System.setProperty(\"solr.allowPaths\", OS.isFamilyWindows() ? \"C:\\\\tmp,C:\\\\home\\\\john\" : \"/tmp,/home/john\");\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(solrHome, new Properties());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n\n    assertEquals(\"maxBooleanClauses\", (Integer) 42, cfg.getBooleanQueryMaxClauseCount());\n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n    assertTrue(\"allowPaths\", cfg.getAllowPaths().containsAll(OS.isFamilyWindows() ?\n            Set.of(\"C:\\\\tmp\", \"C:\\\\home\\\\john\").stream().map(s -> Path.of(s)).collect(Collectors.toSet()) :\n            Set.of(\"/tmp\", \"/home/john\").stream().map(s -> Path.of(s)).collect(Collectors.toSet())\n        )\n    );\n    System.clearProperty(\"solr.allowPaths\");\n  }\n\n","sourceOld":"  public void testAllInfoPresent() throws IOException {\n    Path testSrcRoot = TEST_PATH();\n    Files.copy(testSrcRoot.resolve(\"solr-50-all.xml\"), solrHome.resolve(\"solr.xml\"));\n\n    NodeConfig cfg = SolrXmlConfig.fromSolrHome(solrHome, new Properties());\n    CloudConfig ccfg = cfg.getCloudConfig();\n    UpdateShardHandlerConfig ucfg = cfg.getUpdateShardHandlerConfig();\n    PluginInfo[] backupRepoConfigs = cfg.getBackupRepositoryPlugins();\n\n    assertEquals(\"maxBooleanClauses\", (Integer) 42, cfg.getBooleanQueryMaxClauseCount());\n    assertEquals(\"core admin handler class\", \"testAdminHandler\", cfg.getCoreAdminHandlerClass());\n    assertEquals(\"collection handler class\", \"testCollectionsHandler\", cfg.getCollectionsHandlerClass());\n    assertEquals(\"info handler class\", \"testInfoHandler\", cfg.getInfoHandlerClass());\n    assertEquals(\"config set handler class\", \"testConfigSetsHandler\", cfg.getConfigSetsHandlerClass());\n    assertEquals(\"core load threads\", 11, cfg.getCoreLoadThreadCount(false));\n    assertEquals(\"replay update threads\", 100, cfg.getReplayUpdatesThreads());\n    assertThat(\"core root dir\", cfg.getCoreRootDirectory().toString(), containsString(\"testCoreRootDirectory\"));\n    assertEquals(\"distrib conn timeout\", 22, cfg.getUpdateShardHandlerConfig().getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, cfg.getUpdateShardHandlerConfig().getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, cfg.getUpdateShardHandlerConfig().getMaxUpdateConnectionsPerHost());\n    assertEquals(\"distrib conn timeout\", 22, ucfg.getDistributedConnectionTimeout());\n    assertEquals(\"distrib socket timeout\", 33, ucfg.getDistributedSocketTimeout());\n    assertEquals(\"max update conn\", 3, ucfg.getMaxUpdateConnections());\n    assertEquals(\"max update conn/host\", 37, ucfg.getMaxUpdateConnectionsPerHost());\n    assertEquals(\"host\", \"testHost\", ccfg.getHost());\n    assertEquals(\"zk host context\", \"testHostContext\", ccfg.getSolrHostContext());\n    assertEquals(\"solr host port\", 44, ccfg.getSolrHostPort());\n    assertEquals(\"leader vote wait\", 55, ccfg.getLeaderVoteWait());\n    assertEquals(\"logging class\", \"testLoggingClass\", cfg.getLogWatcherConfig().getLoggingClass());\n    assertEquals(\"log watcher\", true, cfg.getLogWatcherConfig().isEnabled());\n    assertEquals(\"log watcher size\", 88, cfg.getLogWatcherConfig().getWatcherSize());\n    assertEquals(\"log watcher thresh\", \"99\", cfg.getLogWatcherConfig().getWatcherThreshold());\n    assertEquals(\"manage path\", \"testManagementPath\", cfg.getManagementPath());\n    assertEquals(\"shardLib\", \"testSharedLib\", cfg.getSharedLibDirectory());\n    assertEquals(\"schema cache\", true, cfg.hasSchemaCache());\n    assertEquals(\"trans cache size\", 66, cfg.getTransientCacheSize());\n    assertEquals(\"zk client timeout\", 77, ccfg.getZkClientTimeout());\n    assertEquals(\"zk host\", \"testZkHost\", ccfg.getZkHost());\n    assertEquals(\"zk ACL provider\", \"DefaultZkACLProvider\", ccfg.getZkACLProviderClass());\n    assertEquals(\"zk credentials provider\", \"DefaultZkCredentialsProvider\", ccfg.getZkCredentialsProviderClass());\n    assertEquals(1, backupRepoConfigs.length);\n    assertEquals(\"local\", backupRepoConfigs[0].name);\n    assertEquals(\"a.b.C\", backupRepoConfigs[0].className);\n    assertEquals(\"true\", backupRepoConfigs[0].attributes.get(\"default\"));\n    assertEquals(0, backupRepoConfigs[0].initArgs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b02ae24808d82a22a424499d7ad8840dc668120":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["04983a1b95aca878f0db04dda112e321ea6483f8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["4bb5e36693e1b5167f92325b87847a0d8bf100f5"],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["03681d28699f1218ed73de3e36e303ca6bcadec7"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["7116474e2e390259937401cf928323e0cbc75e60"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"e15199583d3635cb940942caed05132dd6c4c7c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"04983a1b95aca878f0db04dda112e321ea6483f8":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","e15199583d3635cb940942caed05132dd6c4c7c6"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a2be0a2886c76942ff986465eabde7b858895dc9"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"defa11d88d50ec356d5e7428f1ebc89623e840ac":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"d2c1938c9f5c1c27e65b3a92640108988277ee9b":["4b02ae24808d82a22a424499d7ad8840dc668120"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"03681d28699f1218ed73de3e36e303ca6bcadec7":["f763a1acdb27217b4799d1ca51c816739835a3e0"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a2be0a2886c76942ff986465eabde7b858895dc9":["defa11d88d50ec356d5e7428f1ebc89623e840ac"],"f763a1acdb27217b4799d1ca51c816739835a3e0":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","f763a1acdb27217b4799d1ca51c816739835a3e0"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a626ec4d1c92e59fe390724d6220081047b03ce7","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"4bb5e36693e1b5167f92325b87847a0d8bf100f5":["d2c1938c9f5c1c27e65b3a92640108988277ee9b"]},"commit2Childs":{"4b02ae24808d82a22a424499d7ad8840dc668120":["d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"7116474e2e390259937401cf928323e0cbc75e60":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["9dc6df6d3cec2cda16c96f408123470a6c069a29"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a877077e0a22a42eebce7d1052c58e97d3afb12d":["4b02ae24808d82a22a424499d7ad8840dc668120"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"e15199583d3635cb940942caed05132dd6c4c7c6":["04983a1b95aca878f0db04dda112e321ea6483f8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"04983a1b95aca878f0db04dda112e321ea6483f8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e475642767c688ede5728d7918326f70b4e0bf3a"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a7035935aa89f6951286e9005cbeb16e89a082a2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["f763a1acdb27217b4799d1ca51c816739835a3e0"],"defa11d88d50ec356d5e7428f1ebc89623e840ac":["a2be0a2886c76942ff986465eabde7b858895dc9"],"d2c1938c9f5c1c27e65b3a92640108988277ee9b":["4bb5e36693e1b5167f92325b87847a0d8bf100f5"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"e475642767c688ede5728d7918326f70b4e0bf3a":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"03681d28699f1218ed73de3e36e303ca6bcadec7":["a877077e0a22a42eebce7d1052c58e97d3afb12d"],"a2be0a2886c76942ff986465eabde7b858895dc9":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f763a1acdb27217b4799d1ca51c816739835a3e0":["03681d28699f1218ed73de3e36e303ca6bcadec7","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["defa11d88d50ec356d5e7428f1ebc89623e840ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9dc6df6d3cec2cda16c96f408123470a6c069a29":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"4bb5e36693e1b5167f92325b87847a0d8bf100f5":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}