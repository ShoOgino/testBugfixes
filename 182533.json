{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","commits":[{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","pathOld":"/dev/null","sourceNew":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = runAutomaton.getInitialState();\n    for (int i = 0; i < sortedTransitions.length; i++) {\n      b.append(\"  \").append(i);\n      if (runAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      for (int j = 0; j < sortedTransitions[i].length; j++) {\n        b.append(\"  \").append(i);\n        sortedTransitions[i][j].appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","pathOld":"/dev/null","sourceNew":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = runAutomaton.getInitialState();\n    for (int i = 0; i < sortedTransitions.length; i++) {\n      b.append(\"  \").append(i);\n      if (runAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      for (int j = 0; j < sortedTransitions[i].length; j++) {\n        b.append(\"  \").append(i);\n        sortedTransitions[i][j].appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","sourceNew":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < lightAutomaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (lightAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      lightAutomaton.initTransition(i, scratch);\n      int numTransitions = lightAutomaton.getNumTransitions(i);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(scratch.dest);\n        b.append(scratch.min);\n        if (scratch.min != scratch.max) {\n          b.append(\"-\");\n          b.append(scratch.max);\n        }\n        lightAutomaton.getNextTransition(scratch);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = runAutomaton.getInitialState();\n    for (int i = 0; i < sortedTransitions.length; i++) {\n      b.append(\"  \").append(i);\n      if (runAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      for (int j = 0; j < sortedTransitions[i].length; j++) {\n        b.append(\"  \").append(i);\n        sortedTransitions[i][j].appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","sourceNew":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < lightAutomaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (lightAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      int numTransitions = lightAutomaton.initTransition(i, transition);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(transition.dest);\n        b.append(transition.min);\n        if (transition.min != transition.max) {\n          b.append(\"-\");\n          b.append(transition.max);\n        }\n        lightAutomaton.getNextTransition(transition);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < lightAutomaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (lightAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      lightAutomaton.initTransition(i, scratch);\n      int numTransitions = lightAutomaton.getNumTransitions(i);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(scratch.dest);\n        b.append(scratch.min);\n        if (scratch.min != scratch.max) {\n          b.append(\"-\");\n          b.append(scratch.max);\n        }\n        lightAutomaton.getNextTransition(scratch);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","sourceNew":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < automaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (automaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      int numTransitions = automaton.initTransition(i, transition);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(transition.dest);\n        b.append(transition.min);\n        if (transition.min != transition.max) {\n          b.append(\"-\");\n          b.append(transition.max);\n        }\n        automaton.getNextTransition(transition);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < lightAutomaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (lightAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      int numTransitions = lightAutomaton.initTransition(i, transition);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(transition.dest);\n        b.append(transition.min);\n        if (transition.min != transition.max) {\n          b.append(\"-\");\n          b.append(transition.max);\n        }\n        lightAutomaton.getNextTransition(transition);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","sourceNew":null,"sourceOld":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = 0;\n    for (int i = 0; i < automaton.getNumStates(); i++) {\n      b.append(\"  \").append(i);\n      if (automaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == 0) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      int numTransitions = automaton.initTransition(i, transition);\n      for (int j = 0; j < numTransitions; j++) {\n        b.append(\"  \").append(i);\n        b.append(\" -> \");\n        b.append(transition.dest);\n        b.append(transition.min);\n        if (transition.min != transition.max) {\n          b.append(\"-\");\n          b.append(transition.max);\n        }\n        automaton.getNextTransition(transition);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#toDot().mjava","sourceNew":null,"sourceOld":"  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph CompiledAutomaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    int initial = runAutomaton.getInitialState();\n    for (int i = 0; i < sortedTransitions.length; i++) {\n      b.append(\"  \").append(i);\n      if (runAutomaton.isAccept(i)) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (i == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(i).append(\"\\n\");\n      }\n      for (int j = 0; j < sortedTransitions[i].length; j++) {\n        b.append(\"  \").append(i);\n        sortedTransitions[i][j].appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"5c84485629d80d203608e8975a1139de9933cc38":["2f948dd442d23baa6cbb28daf77c8db78b351329","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","050ba1ba249733cac50c2612418b7179591d2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"],"050ba1ba249733cac50c2612418b7179591d2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f948dd442d23baa6cbb28daf77c8db78b351329","050ba1ba249733cac50c2612418b7179591d2df9"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"050ba1ba249733cac50c2612418b7179591d2df9":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}