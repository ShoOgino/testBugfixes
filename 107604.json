{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":null,"sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}