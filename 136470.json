{"path":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76ab9983349b199b0e6f65776c0087b0c08a10d","date":1282230089,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","d76ab9983349b199b0e6f65776c0087b0c08a10d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d76ab9983349b199b0e6f65776c0087b0c08a10d"]},"commit2Childs":{"d76ab9983349b199b0e6f65776c0087b0c08a10d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["d76ab9983349b199b0e6f65776c0087b0c08a10d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}