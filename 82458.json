{"path":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","commits":[{"id":"3a0b8ae4ac997de7adea27f34c380588fa28d646","date":1253188966,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", new Integer(10000), new Integer(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", new Integer(10), new Integer(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", new Integer(10000), new Integer(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", new Integer(10), new Integer(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", new Integer(10000), new Integer(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", new Integer(10), new Integer(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", new Integer(10000), new Integer(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", new Integer(10), new Integer(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n    // a deprecated filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public BitSet bits(IndexReader reader) {\n        return new BitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"0a046c0c310bc77931fc8441bd920053b607dd14":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["0a046c0c310bc77931fc8441bd920053b607dd14"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a0b8ae4ac997de7adea27f34c380588fa28d646"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3a0b8ae4ac997de7adea27f34c380588fa28d646":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}