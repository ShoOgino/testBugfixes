{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","commits":[{"id":"631022b03d06792c2b320d2264e643c3e9496289","date":1556909947,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: nodes) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    nodes.remove(overseer1);\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    JettySolrRunner leaderJetty = getOverseerJetty();\n    logOverseerState();\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n    waitForNewOverseer(10, nodes.get(0), false);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(1500000, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25356bcccc79647d4c68b0984d3d29dc1a1f1d26"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f6f264dabc60105e80dcbd51c335ad7eca16085","date":1556982140,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","sourceNew":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient())) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    nodes.remove(overseer1); // remove the designated overseer\n\n    JettySolrRunner leaderJetty = getOverseerJetty();\n    logOverseerState();\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n    waitForNewOverseer(10, nodes.get(0), false);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(15, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","sourceOld":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: nodes) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    nodes.remove(overseer1);\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    JettySolrRunner leaderJetty = getOverseerJetty();\n    logOverseerState();\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n    waitForNewOverseer(10, nodes.get(0), false);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(1500000, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25356bcccc79647d4c68b0984d3d29dc1a1f1d26","date":1557170963,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","sourceNew":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient())) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    int counter = 0;\n    while (overseer1 == null && counter < 10) {\n      overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n      Thread.sleep(1000);\n    }\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n    JettySolrRunner leaderJetty = getOverseerJetty();\n\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    nodes.remove(overseer1); // remove the designated overseer\n\n    logOverseerState();\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(15, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","sourceOld":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient())) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    nodes.remove(overseer1); // remove the designated overseer\n\n    JettySolrRunner leaderJetty = getOverseerJetty();\n    logOverseerState();\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n    waitForNewOverseer(10, nodes.get(0), false);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(15, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","bugFix":["631022b03d06792c2b320d2264e643c3e9496289"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testDesignatedOverseerRestarts().mjava","sourceNew":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient())) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    int counter = 0;\n    while (overseer1 == null && counter < 10) {\n      overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n      Thread.sleep(1000);\n    }\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n    JettySolrRunner leaderJetty = getOverseerJetty();\n\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    nodes.remove(overseer1); // remove the designated overseer\n\n    logOverseerState();\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: {}\", overseer1);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(15, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","sourceOld":"  @Test\n  public void testDesignatedOverseerRestarts() throws Exception {\n    logOverseerState();\n    // Remove the OVERSEER role, in case it was already assigned by another test in this suite\n    for (String node: OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient())) {\n      CollectionAdminRequest.removeRole(node, \"overseer\").process(cluster.getSolrClient());\n    }\n    String overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n    int counter = 0;\n    while (overseer1 == null && counter < 10) {\n      overseer1 = OverseerCollectionConfigSetProcessor.getLeaderNode(zkClient());\n      Thread.sleep(1000);\n    }\n\n    // Setting overseer role to the current overseer\n    CollectionAdminRequest.addRole(overseer1, \"overseer\").process(cluster.getSolrClient());\n    waitForNewOverseer(15, overseer1, false);\n    JettySolrRunner leaderJetty = getOverseerJetty();\n\n    List<String> nodes = OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zkClient());\n    nodes.remove(overseer1); // remove the designated overseer\n\n    logOverseerState();\n    // kill the current overseer, and check that the next node in the election queue assumes leadership\n    leaderJetty.stop();\n    log.info(\"Killing designated overseer: \"+overseer1);\n\n    // after 5 seconds, bring back dead designated overseer and assert that it assumes leadership \"right away\",\n    // i.e. without any other node assuming leadership before this node becomes leader.\n    Thread.sleep(5);\n    logOverseerState();\n    log.info(\"Starting back the prioritized overseer..\");\n    leaderJetty.start();\n    waitForNewOverseer(15, overseer1, true); // assert that there is just a single leadership transition\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"631022b03d06792c2b320d2264e643c3e9496289":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25356bcccc79647d4c68b0984d3d29dc1a1f1d26":["9f6f264dabc60105e80dcbd51c335ad7eca16085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f6f264dabc60105e80dcbd51c335ad7eca16085":["631022b03d06792c2b320d2264e643c3e9496289"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["25356bcccc79647d4c68b0984d3d29dc1a1f1d26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"631022b03d06792c2b320d2264e643c3e9496289":["9f6f264dabc60105e80dcbd51c335ad7eca16085"],"25356bcccc79647d4c68b0984d3d29dc1a1f1d26":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["631022b03d06792c2b320d2264e643c3e9496289"],"9f6f264dabc60105e80dcbd51c335ad7eca16085":["25356bcccc79647d4c68b0984d3d29dc1a1f1d26"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}