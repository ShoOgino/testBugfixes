{"path":"sandbox/contributions/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","commits":[{"id":"8497ea87d47a78ce96caf21099e6e5fd3536b512","date":1040423984,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"sandbox/contributions/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tClass stemClass = Class.forName(\"net.sf.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2 && args[2].equals(\"-o\")) {\n\t    outstream = new FileOutputStream(args[3]);\n\t} else if (args.length == 2) {\n\t    System.err.println(\"Usage: TestApp <input file> [-o <output file>]\");\n\t    return;\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"769b42f300ec1653b3a27fe7cc5bd991480f77a8","date":1074859503,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","pathOld":"sandbox/contributions/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Throwable {\n\n    if (args.length < 2) {\n      exitWithUsage();\n    }\n\n    Class stemClass = Class.forName(\"net.sf.snowball.ext.\" +\n                                    args[0] + \"Stemmer\");\n    SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n    Method stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n    Reader reader;\n    reader = new InputStreamReader(new FileInputStream(args[1]));\n    reader = new BufferedReader(reader);\n\n    StringBuffer input = new StringBuffer();\n\n    OutputStream outstream = System.out;\n\n    if (args.length > 2 && args[2].equals(\"-o\")) {\n      outstream = new FileOutputStream(args[3]);\n    } else if (args.length > 2) {\n      exitWithUsage();\n    }\n\n    Writer output = new OutputStreamWriter(outstream);\n    output = new BufferedWriter(output);\n\n    int repeat = 1;\n    if (args.length > 4) {\n      repeat = Integer.parseInt(args[4]);\n    }\n\n    Object[] emptyArgs = new Object[0];\n    int character;\n    while ((character = reader.read()) != -1) {\n      char ch = (char) character;\n      if (Character.isWhitespace(ch)) {\n        if (input.length() > 0) {\n          stemmer.setCurrent(input.toString());\n          for (int i = repeat; i != 0; i--) {\n            stemMethod.invoke(stemmer, emptyArgs);\n          }\n          output.write(stemmer.getCurrent());\n          output.write('\\n');\n          input.delete(0, input.length());\n        }\n      } else {\n        input.append(Character.toLowerCase(ch));\n      }\n    }\n    output.flush();\n  }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tClass stemClass = Class.forName(\"net.sf.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2 && args[2].equals(\"-o\")) {\n\t    outstream = new FileOutputStream(args[3]);\n\t} else if (args.length == 2) {\n\t    System.err.println(\"Usage: TestApp <input file> [-o <output file>]\");\n\t    return;\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","pathOld":"sandbox/contributions/snowball/src/java/net/sf/snowball/TestApp#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Throwable {\n\n    if (args.length < 2) {\n      exitWithUsage();\n    }\n\n    Class stemClass = Class.forName(\"net.sf.snowball.ext.\" +\n                                    args[0] + \"Stemmer\");\n    SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n    Method stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n    Reader reader;\n    reader = new InputStreamReader(new FileInputStream(args[1]));\n    reader = new BufferedReader(reader);\n\n    StringBuffer input = new StringBuffer();\n\n    OutputStream outstream = System.out;\n\n    if (args.length > 2 && args[2].equals(\"-o\")) {\n      outstream = new FileOutputStream(args[3]);\n    } else if (args.length > 2) {\n      exitWithUsage();\n    }\n\n    Writer output = new OutputStreamWriter(outstream);\n    output = new BufferedWriter(output);\n\n    int repeat = 1;\n    if (args.length > 4) {\n      repeat = Integer.parseInt(args[4]);\n    }\n\n    Object[] emptyArgs = new Object[0];\n    int character;\n    while ((character = reader.read()) != -1) {\n      char ch = (char) character;\n      if (Character.isWhitespace(ch)) {\n        if (input.length() > 0) {\n          stemmer.setCurrent(input.toString());\n          for (int i = repeat; i != 0; i--) {\n            stemMethod.invoke(stemmer, emptyArgs);\n          }\n          output.write(stemmer.getCurrent());\n          output.write('\\n');\n          input.delete(0, input.length());\n        }\n      } else {\n        input.append(Character.toLowerCase(ch));\n      }\n    }\n    output.flush();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Throwable {\n\n    if (args.length < 2) {\n      exitWithUsage();\n    }\n\n    Class stemClass = Class.forName(\"net.sf.snowball.ext.\" +\n                                    args[0] + \"Stemmer\");\n    SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n    Method stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n    Reader reader;\n    reader = new InputStreamReader(new FileInputStream(args[1]));\n    reader = new BufferedReader(reader);\n\n    StringBuffer input = new StringBuffer();\n\n    OutputStream outstream = System.out;\n\n    if (args.length > 2 && args[2].equals(\"-o\")) {\n      outstream = new FileOutputStream(args[3]);\n    } else if (args.length > 2) {\n      exitWithUsage();\n    }\n\n    Writer output = new OutputStreamWriter(outstream);\n    output = new BufferedWriter(output);\n\n    int repeat = 1;\n    if (args.length > 4) {\n      repeat = Integer.parseInt(args[4]);\n    }\n\n    Object[] emptyArgs = new Object[0];\n    int character;\n    while ((character = reader.read()) != -1) {\n      char ch = (char) character;\n      if (Character.isWhitespace(ch)) {\n        if (input.length() > 0) {\n          stemmer.setCurrent(input.toString());\n          for (int i = repeat; i != 0; i--) {\n            stemMethod.invoke(stemmer, emptyArgs);\n          }\n          output.write(stemmer.getCurrent());\n          output.write('\\n');\n          input.delete(0, input.length());\n        }\n      } else {\n        input.append(Character.toLowerCase(ch));\n      }\n    }\n    output.flush();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["769b42f300ec1653b3a27fe7cc5bd991480f77a8"],"769b42f300ec1653b3a27fe7cc5bd991480f77a8":["8497ea87d47a78ce96caf21099e6e5fd3536b512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8497ea87d47a78ce96caf21099e6e5fd3536b512":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"769b42f300ec1653b3a27fe7cc5bd991480f77a8":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497ea87d47a78ce96caf21099e6e5fd3536b512"],"8497ea87d47a78ce96caf21099e6e5fd3536b512":["769b42f300ec1653b3a27fe7cc5bd991480f77a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}