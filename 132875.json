{"path":"sandbox/projects/appex/src/java/search/util/IOUtils#moveFiles(File,File).mjava","commits":[{"id":"e3074d05d861bc1436ee03619fdee547f9c51d22","date":1020526983,"type":0,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"sandbox/projects/appex/src/java/search/util/IOUtils#moveFiles(File,File).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Moves files from one directory to another. The source directory is not moved.\n     * <br><br>\n     * Implementation note: Only files are moved. Directories within the source\n     * are not moved as well.\n     * @param File Source directory.\n     * @param File Destination directory.\n     */\n    public static void moveFiles(File source, File destination)\n            throws IOException\n    {\n        InputStream in = null;\n        OutputStream out = null;\n        if (!source.isDirectory())\n            throw new IOException(\"Expected a directory but \"\n                                  + source.toString() + \" is a file!\");\n        if (!destination.isDirectory())\n            throw new IOException(\"Expected a directory but \"\n                                  + destination.toString() + \" is a file!\");\n        File[] farray = source.listFiles();\n        try\n        {\n            for (int i = 0; i < farray.length; i++)\n            {\n                if (farray[i].isFile())\n                {\n                    File target = new File(destination, farray[i].getName());\n                    if (!target.exists() || target.canWrite())\n                    {\n                        in = new FileInputStream(farray[i]);\n                        out = new FileOutputStream(target);\n                        transferData(in, out);\n                        in.close();\n                        out.close();\n                        if (target.exists())\n                            farray[i].delete();\n                    }\n                }\n            }\n            in = null;\n            out = null;\n        }\n        finally\n        {\n            if (in != null)\n                in.close();\n            if (out != null)\n                out.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021","date":1020873003,"type":4,"author":"Kelvin Tan","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/projects/appex/src/java/search/util/IOUtils#moveFiles(File,File).mjava","sourceNew":null,"sourceOld":"    /**\n     * Moves files from one directory to another. The source directory is not moved.\n     * <br><br>\n     * Implementation note: Only files are moved. Directories within the source\n     * are not moved as well.\n     * @param File Source directory.\n     * @param File Destination directory.\n     */\n    public static void moveFiles(File source, File destination)\n            throws IOException\n    {\n        InputStream in = null;\n        OutputStream out = null;\n        if (!source.isDirectory())\n            throw new IOException(\"Expected a directory but \"\n                                  + source.toString() + \" is a file!\");\n        if (!destination.isDirectory())\n            throw new IOException(\"Expected a directory but \"\n                                  + destination.toString() + \" is a file!\");\n        File[] farray = source.listFiles();\n        try\n        {\n            for (int i = 0; i < farray.length; i++)\n            {\n                if (farray[i].isFile())\n                {\n                    File target = new File(destination, farray[i].getName());\n                    if (!target.exists() || target.canWrite())\n                    {\n                        in = new FileInputStream(farray[i]);\n                        out = new FileOutputStream(target);\n                        transferData(in, out);\n                        in.close();\n                        out.close();\n                        if (target.exists())\n                            farray[i].delete();\n                    }\n                }\n            }\n            in = null;\n            out = null;\n        }\n        finally\n        {\n            if (in != null)\n                in.close();\n            if (out != null)\n                out.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["bd3ecd9f4bf2fbf3fc3feba1dfd4d87be36cb021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}