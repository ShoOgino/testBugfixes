{"path":"solr/core/src/test/org/apache/solr/handler/tagger/Tagger2Test#testMultibyteChar().mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/Tagger2Test#testMultibyteChar().mjava","pathOld":"/dev/null","sourceNew":"  /** Ensure character offsets work for multi-byte characters */\n  @Test\n  public void testMultibyteChar() throws Exception {\n    //  https://unicode-table.com/en/2019/\n    //             0         1         2         3         4\n    //             01234567890123456789012345678901234567890\n    String TEXT = \"He mentionned ’Obama’ in the White House\";\n    assertEquals(40, TEXT.length()); // char length (in Java, UTF16)\n\n    String QUOTE = TEXT.substring(14, 15);\n    assertEquals(8217, QUOTE.codePointAt(0));\n\n    //UTF8\n    assertEquals(3, QUOTE.getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(1, \"a\".getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(40 + 2*2, TEXT.getBytes(StandardCharsets.UTF_8).length);\n\n    //UTF16 big endian    (by specifying big/little endian, there is no \"byte order mark\")\n    assertEquals(2, QUOTE.getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(2, \"a\".getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(40 * 2, TEXT.getBytes(StandardCharsets.UTF_16BE).length);\n\n\n    buildNames(\"Obama\");\n\n    assertTags(TEXT, \"Obama\");\n\n    // TODO test surrogate pairs (i.e. code points not in the BMP)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/Tagger2Test#testMultibyteChar().mjava","pathOld":"/dev/null","sourceNew":"  /** Ensure character offsets work for multi-byte characters */\n  @Test\n  public void testMultibyteChar() throws Exception {\n    //  https://unicode-table.com/en/2019/\n    //             0         1         2         3         4\n    //             01234567890123456789012345678901234567890\n    String TEXT = \"He mentionned ’Obama’ in the White House\";\n    assertEquals(40, TEXT.length()); // char length (in Java, UTF16)\n\n    String QUOTE = TEXT.substring(14, 15);\n    assertEquals(8217, QUOTE.codePointAt(0));\n\n    //UTF8\n    assertEquals(3, QUOTE.getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(1, \"a\".getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(40 + 2*2, TEXT.getBytes(StandardCharsets.UTF_8).length);\n\n    //UTF16 big endian    (by specifying big/little endian, there is no \"byte order mark\")\n    assertEquals(2, QUOTE.getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(2, \"a\".getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(40 * 2, TEXT.getBytes(StandardCharsets.UTF_16BE).length);\n\n\n    buildNames(\"Obama\");\n\n    assertTags(TEXT, \"Obama\");\n\n    // TODO test surrogate pairs (i.e. code points not in the BMP)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/tagger/Tagger2Test#testMultibyteChar().mjava","pathOld":"/dev/null","sourceNew":"  /** Ensure character offsets work for multi-byte characters */\n  @Test\n  public void testMultibyteChar() throws Exception {\n    //  https://unicode-table.com/en/2019/\n    //             0         1         2         3         4\n    //             01234567890123456789012345678901234567890\n    String TEXT = \"He mentionned ’Obama’ in the White House\";\n    assertEquals(40, TEXT.length()); // char length (in Java, UTF16)\n\n    String QUOTE = TEXT.substring(14, 15);\n    assertEquals(8217, QUOTE.codePointAt(0));\n\n    //UTF8\n    assertEquals(3, QUOTE.getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(1, \"a\".getBytes(StandardCharsets.UTF_8).length);\n    assertEquals(40 + 2*2, TEXT.getBytes(StandardCharsets.UTF_8).length);\n\n    //UTF16 big endian    (by specifying big/little endian, there is no \"byte order mark\")\n    assertEquals(2, QUOTE.getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(2, \"a\".getBytes(StandardCharsets.UTF_16BE).length);\n    assertEquals(40 * 2, TEXT.getBytes(StandardCharsets.UTF_16BE).length);\n\n\n    buildNames(\"Obama\");\n\n    assertTags(TEXT, \"Obama\");\n\n    // TODO test surrogate pairs (i.e. code points not in the BMP)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}