{"path":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","commits":[{"id":"ff40ad80f7ee098df7921f3467ede1806a08284b","date":1044643516,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"/dev/null","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a b\"));\n    \n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    System.out.println(query);\n    Hits hits = searcher.search(query); \n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07199b50babd5f7f62e5b72acb4ed751e799de1a","date":1066875648,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a b\"));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a b\"));\n    \n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    System.out.println(query);\n    Hits hits = searcher.search(query); \n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a b\"));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    Query query = QueryParser.parse(\"a NOT b\", \"field\", new SimpleAnalyzer());\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(\"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNot#testNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestNot#testNot().mjava","sourceNew":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","sourceOld":"  public void testNot() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(d1);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"a NOT b\");\n    //System.out.println(query);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["ff40ad80f7ee098df7921f3467ede1806a08284b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"ff40ad80f7ee098df7921f3467ede1806a08284b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["773e104db917d6cc9acade5a8aeb91a886192b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"773e104db917d6cc9acade5a8aeb91a886192b99":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["773e104db917d6cc9acade5a8aeb91a886192b99"],"ff40ad80f7ee098df7921f3467ede1806a08284b":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff40ad80f7ee098df7921f3467ede1806a08284b"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"773e104db917d6cc9acade5a8aeb91a886192b99":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}