{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataEntityBuilder#buildEntry(String,Reader,ExtensionProfile).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataEntityBuilder#buildEntry(String,Reader,ExtensionProfile).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Builds a {@link BaseFeed} instance from the {@link Reader} provided by \n     * the {@link GDataRequest} \n     * @param feedId - \n     *            the feed ID to request the feed type from the registry \n     * @param reader - \n     *            the reader to build the feed from  \n     * @param profile - extension profile to parse the resource \n     * @return - a BaseFeed instance \n     * @throws FeedNotFoundException - \n     *             if the feed is not registered \n     * @throws IOException - \n     *             if an I/O Exception occures on the provided reader \n     * @throws ParseException - \n     *             if the entry could not be parsed \n     */ \n    public static BaseEntry buildEntry(final String feedId, final Reader reader,final ExtensionProfile profile) \n            throws FeedNotFoundException, ParseException, IOException { \n \n        BaseEntry retVal = null; \n        try { \n            retVal = ((BaseFeed) createEntityInstance(feedId)).createEntry(); \n        } catch (FeedNotFoundException e) { \n            throw e; \n        } catch (Exception e) { \n            DataBuilderException ex = new DataBuilderException( \n                    \"Could not build Entry for Entry class \", e); \n            ex.setStackTrace(e.getStackTrace()); \n            throw ex; \n        } \n        retVal.parseAtom(new ExtensionProfile(), reader); \n        return retVal; \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataEntityBuilder#buildEntry(String,Reader,ExtensionProfile).mjava","sourceNew":null,"sourceOld":"    /** \n     * Builds a {@link BaseFeed} instance from the {@link Reader} provided by \n     * the {@link GDataRequest} \n     * @param feedId - \n     *            the feed ID to request the feed type from the registry \n     * @param reader - \n     *            the reader to build the feed from  \n     * @param profile - extension profile to parse the resource \n     * @return - a BaseFeed instance \n     * @throws FeedNotFoundException - \n     *             if the feed is not registered \n     * @throws IOException - \n     *             if an I/O Exception occures on the provided reader \n     * @throws ParseException - \n     *             if the entry could not be parsed \n     */ \n    public static BaseEntry buildEntry(final String feedId, final Reader reader,final ExtensionProfile profile) \n            throws FeedNotFoundException, ParseException, IOException { \n \n        BaseEntry retVal = null; \n        try { \n            retVal = ((BaseFeed) createEntityInstance(feedId)).createEntry(); \n        } catch (FeedNotFoundException e) { \n            throw e; \n        } catch (Exception e) { \n            DataBuilderException ex = new DataBuilderException( \n                    \"Could not build Entry for Entry class \", e); \n            ex.setStackTrace(e.getStackTrace()); \n            throw ex; \n        } \n        retVal.parseAtom(new ExtensionProfile(), reader); \n        return retVal; \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"52754a40a1550056d5637c8992b4076b5ed77328":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}