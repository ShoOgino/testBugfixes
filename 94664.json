{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","commits":[{"id":"217b516e59f574c979a72ba66ee8e9423e06cafd","date":1233574218,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void mixedContent() {\n    String xml = \"<xhtml:p xmlns:xhtml=\\\"http://xhtml.com/\\\" >This text is \\n\" +\n            \"  <xhtml:b>bold</xhtml:b> and this text is \\n\" +\n            \"  <xhtml:u>underlined</xhtml:u>!\\n\" +\n            \"</xhtml:p>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/p\");\n    rr.addField(\"p\", \"/p\", true);\n    rr.addField(\"b\", \"/p/b\", true);\n    rr.addField(\"u\", \"/p/u\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> row = l.get(0);\n\n    Assert.assertEquals(\"bold\", ((List) row.get(\"b\")).get(0));\n    Assert.assertEquals(\"underlined\", ((List) row.get(\"u\")).get(0));\n    String p = (String) ((List) row.get(\"p\")).get(0);\n    Assert.assertTrue(p.contains(\"This text is\"));\n    Assert.assertTrue(p.contains(\"and this text is\"));\n    Assert.assertTrue(p.contains(\"!\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb","date":1233863590,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","sourceNew":"  @Test\n  public void mixedContent() {\n    String xml = \"<xhtml:p xmlns:xhtml=\\\"http://xhtml.com/\\\" >This text is \\n\" +\n            \"  <xhtml:b>bold</xhtml:b> and this text is \\n\" +\n            \"  <xhtml:u>underlined</xhtml:u>!\\n\" +\n            \"</xhtml:p>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/p\");\n    rr.addField(\"p\", \"/p\", true);\n    rr.addField(\"b\", \"/p/b\", true);\n    rr.addField(\"u\", \"/p/u\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> row = l.get(0);\n\n    Assert.assertEquals(\"bold\", ((List) row.get(\"b\")).get(0));\n    Assert.assertEquals(\"underlined\", ((List) row.get(\"u\")).get(0));\n    String p = (String) ((List) row.get(\"p\")).get(0);\n    Assert.assertTrue(p.contains(\"This text is\"));\n    Assert.assertTrue(p.contains(\"and this text is\"));\n    Assert.assertTrue(p.contains(\"!\"));\n    // Should not contain content from child elements\n    Assert.assertFalse(p.contains(\"bold\"));\n  }\n\n","sourceOld":"  @Test\n  public void mixedContent() {\n    String xml = \"<xhtml:p xmlns:xhtml=\\\"http://xhtml.com/\\\" >This text is \\n\" +\n            \"  <xhtml:b>bold</xhtml:b> and this text is \\n\" +\n            \"  <xhtml:u>underlined</xhtml:u>!\\n\" +\n            \"</xhtml:p>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/p\");\n    rr.addField(\"p\", \"/p\", true);\n    rr.addField(\"b\", \"/p/b\", true);\n    rr.addField(\"u\", \"/p/u\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> row = l.get(0);\n\n    Assert.assertEquals(\"bold\", ((List) row.get(\"b\")).get(0));\n    Assert.assertEquals(\"underlined\", ((List) row.get(\"u\")).get(0));\n    String p = (String) ((List) row.get(\"p\")).get(0);\n    Assert.assertTrue(p.contains(\"This text is\"));\n    Assert.assertTrue(p.contains(\"and this text is\"));\n    Assert.assertTrue(p.contains(\"!\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#mixedContent().mjava","sourceNew":"  @Test\n  public void mixedContent() {\n    String xml = \"<xhtml:p xmlns:xhtml=\\\"http://xhtml.com/\\\" >This text is \\n\" +\n            \"  <xhtml:b>bold</xhtml:b> and this text is \\n\" +\n            \"  <xhtml:u>underlined</xhtml:u>!\\n\" +\n            \"</xhtml:p>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/p\");\n    rr.addField(\"p\", \"/p\", true);\n    rr.addField(\"b\", \"/p/b\", true);\n    rr.addField(\"u\", \"/p/u\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> row = l.get(0);\n\n    Assert.assertEquals(\"bold\", ((List) row.get(\"b\")).get(0));\n    Assert.assertEquals(\"underlined\", ((List) row.get(\"u\")).get(0));\n    String p = (String) ((List) row.get(\"p\")).get(0);\n    Assert.assertTrue(p.contains(\"This text is\"));\n    Assert.assertTrue(p.contains(\"and this text is\"));\n    Assert.assertTrue(p.contains(\"!\"));\n    // Should not contain content from child elements\n    Assert.assertFalse(p.contains(\"bold\"));\n  }\n\n","sourceOld":"  @Test\n  public void mixedContent() {\n    String xml = \"<xhtml:p xmlns:xhtml=\\\"http://xhtml.com/\\\" >This text is \\n\" +\n            \"  <xhtml:b>bold</xhtml:b> and this text is \\n\" +\n            \"  <xhtml:u>underlined</xhtml:u>!\\n\" +\n            \"</xhtml:p>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/p\");\n    rr.addField(\"p\", \"/p\", true);\n    rr.addField(\"b\", \"/p/b\", true);\n    rr.addField(\"u\", \"/p/u\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> row = l.get(0);\n\n    Assert.assertEquals(\"bold\", ((List) row.get(\"b\")).get(0));\n    Assert.assertEquals(\"underlined\", ((List) row.get(\"u\")).get(0));\n    String p = (String) ((List) row.get(\"p\")).get(0);\n    Assert.assertTrue(p.contains(\"This text is\"));\n    Assert.assertTrue(p.contains(\"and this text is\"));\n    Assert.assertTrue(p.contains(\"!\"));\n    // Should not contain content from child elements\n    Assert.assertFalse(p.contains(\"bold\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"217b516e59f574c979a72ba66ee8e9423e06cafd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["217b516e59f574c979a72ba66ee8e9423e06cafd"]},"commit2Childs":{"217b516e59f574c979a72ba66ee8e9423e06cafd":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["217b516e59f574c979a72ba66ee8e9423e06cafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}