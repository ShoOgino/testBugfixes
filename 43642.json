{"path":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j=0;j<normGen.length;j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf3977590572c7fced6fb6cd7de274a8cf09eca7","date":1168512679,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j=0;j<normGen.length;j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(-1);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n    output.writeStringStringMap(diagnostics);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28fc88c40c08a36c52720dae60beee72d91b031","date":1265661085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    assert delCount <= docCount: \"delCount=\" + delCount + \" docCount=\" + docCount + \" segment=\" + name;\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n    output.writeStringStringMap(diagnostics);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n    output.writeStringStringMap(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#write(IndexOutput).mjava","sourceNew":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    assert delCount <= docCount: \"delCount=\" + delCount + \" docCount=\" + docCount + \" segment=\" + name;\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n    output.writeStringStringMap(diagnostics);\n  }\n\n","sourceOld":"  /**\n   * Save this segment's info.\n   */\n  void write(IndexOutput output)\n    throws IOException {\n    assert delCount <= docCount: \"delCount=\" + delCount + \" docCount=\" + docCount + \" segment=\" + name;\n    output.writeString(name);\n    output.writeInt(docCount);\n    output.writeLong(delGen);\n    output.writeInt(docStoreOffset);\n    if (docStoreOffset != -1) {\n      output.writeString(docStoreSegment);\n      output.writeByte((byte) (docStoreIsCompoundFile ? 1:0));\n    }\n\n    output.writeByte((byte) (hasSingleNormFile ? 1:0));\n    if (normGen == null) {\n      output.writeInt(NO);\n    } else {\n      output.writeInt(normGen.length);\n      for(int j = 0; j < normGen.length; j++) {\n        output.writeLong(normGen[j]);\n      }\n    }\n    output.writeByte(isCompoundFile);\n    output.writeInt(delCount);\n    output.writeByte((byte) (hasProx ? 1:0));\n    output.writeStringStringMap(diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34e2c71b6406443562df54db233fde0728502f64":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"8a5cfde941b2f8208d739344fef3821381885618":["cf3977590572c7fced6fb6cd7de274a8cf09eca7"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8a5cfde941b2f8208d739344fef3821381885618"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"902ba79f4590a41c663c447756d2e5041cbbdda9":["34e2c71b6406443562df54db233fde0728502f64"],"cf3977590572c7fced6fb6cd7de274a8cf09eca7":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d28fc88c40c08a36c52720dae60beee72d91b031"],"d28fc88c40c08a36c52720dae60beee72d91b031":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"]},"commit2Childs":{"34e2c71b6406443562df54db233fde0728502f64":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"8a5cfde941b2f8208d739344fef3821381885618":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["cf3977590572c7fced6fb6cd7de274a8cf09eca7"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["d28fc88c40c08a36c52720dae60beee72d91b031"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"cf3977590572c7fced6fb6cd7de274a8cf09eca7":["8a5cfde941b2f8208d739344fef3821381885618"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["34e2c71b6406443562df54db233fde0728502f64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d28fc88c40c08a36c52720dae60beee72d91b031":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}