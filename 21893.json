{"path":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","commits":[{"id":"351c452f1c3ded97338e6d3db2b585c5f89b0410","date":1291733593,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestUAX29TokenizerFactory#testHyphen().mjava","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8c4bb144102e537495ae5b321f77a9898f7b0b8","date":1291834816,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestUAX29TokenizerFactory#testHyphen().mjava","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29TokenizerFactory factory = new UAX29TokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"/dev/null","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestUAX29URLEmailTokenizerFactory#testHyphen().mjava","sourceNew":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","sourceOld":"  public void testHyphen() throws Exception {\n    Reader reader = new StringReader(\"some-dashed-phrase\");\n    UAX29URLEmailTokenizerFactory factory = new UAX29URLEmailTokenizerFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"some\", \"dashed\", \"phrase\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351c452f1c3ded97338e6d3db2b585c5f89b0410":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["351c452f1c3ded97338e6d3db2b585c5f89b0410"],"c26f00b574427b55127e869b935845554afde1fa":["351c452f1c3ded97338e6d3db2b585c5f89b0410","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["351c452f1c3ded97338e6d3db2b585c5f89b0410"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351c452f1c3ded97338e6d3db2b585c5f89b0410"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351c452f1c3ded97338e6d3db2b585c5f89b0410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"351c452f1c3ded97338e6d3db2b585c5f89b0410":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["351c452f1c3ded97338e6d3db2b585c5f89b0410","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}