{"path":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","commits":[{"id":"71130cfca9e17db547b4f78cce4b0ad0af72f638","date":1362280541,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","pathOld":"/dev/null","sourceNew":"  synchronized static void progress(int myId, String core) {\n    if (nextTime - System.currentTimeMillis() <= 0) {\n      verbose(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTime - (System.currentTimeMillis() / 1000)));\n      lastCount = myId;\n      nextTime += (System.currentTimeMillis() / 1000) * 60;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e","date":1362676527,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","sourceNew":"  synchronized static void progress(int myId, String core) {\n    if (nextTime - System.currentTimeMillis() <= 0) {\n      SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTime - (System.currentTimeMillis() / 1000)));\n      lastCount = myId;\n      nextTime += (System.currentTimeMillis() / 1000) * 60;\n    }\n  }\n\n","sourceOld":"  synchronized static void progress(int myId, String core) {\n    if (nextTime - System.currentTimeMillis() <= 0) {\n      verbose(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTime - (System.currentTimeMillis() / 1000)));\n      lastCount = myId;\n      nextTime += (System.currentTimeMillis() / 1000) * 60;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","sourceNew":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  synchronized static void progress(int myId, String core) {\n    if (nextTime - System.currentTimeMillis() <= 0) {\n      SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTime - (System.currentTimeMillis() / 1000)));\n      lastCount = myId;\n      nextTime += (System.currentTimeMillis() / 1000) * 60;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","sourceNew":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","sourceNew":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    }\n  }\n\n","sourceOld":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ad96fd05c63ec22c1203121a27e0a1adce4025","date":1552081953,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/Indexer[OpenCloseCoreStressTest]#progress(int,String).mjava","sourceNew":null,"sourceOld":"  synchronized static void progress(int myId, String core) {\n    if (nextTimeout.hasTimedOut()) {\n      log.info(String.format(Locale.ROOT, \" s indexed: [run %,8d] [cycle %,8d] [last minute %,8d] Last core updated: %s. Seconds left in cycle %,4d\",\n          myId, docsThisCycle.get(), myId - lastCount, core, stopTimeout.timeLeft(TimeUnit.SECONDS)));\n      lastCount = myId;\n      nextTimeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}