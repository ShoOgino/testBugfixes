{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","commits":[{"id":"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c","date":1378490020,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(\"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=50]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=100]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8a06631c6dd7816f50f77a22d08dac33e15f1f1","date":1408391117,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","sourceNew":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(\"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=10]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=20]\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(\"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=50]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=100]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3802d95c3a31be21ea2971945049b711d95ef8d5","date":1455055616,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","sourceNew":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    String[] methodParam = random().nextBoolean() ? new String[]{} : new String[]{\"facet.method\",\"uif\"} ;\n    \n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(methodParam\n            , \"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=10]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=20]\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(\"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=10]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=20]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c64189697927b548f74ba66dfa5051548662938","date":1455059336,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testThreadWait().mjava","sourceNew":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    String[] methodParam = random().nextBoolean() ? new String[]{} : new String[]{\"facet.method\",\"uif\"} ;\n    \n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(methodParam\n            , \"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=10]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=20]\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testThreadWait() throws Exception {\n\n    add50ocs();\n    // All I really care about here is the chance to fire off a bunch of threads to the UnIninvertedField.get method\n    // to insure that we get into/out of the lock. Again, it's not entirely deterministic, but it might catch bad\n    // stuff occasionally...\n    assertQ(\"check threading, more threads than fields\",\n        req(\"q\", \"id:*\", \"indent\", \"true\", \"fl\", \"id\", \"rows\", \"1\"\n            , \"facet\", \"true\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f0_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f1_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f2_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f3_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f4_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f5_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f6_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f7_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f8_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.field\", \"f9_ws\"\n            , \"facet.threads\", \"1000\"\n            , \"facet.limit\", \"-1\"\n        )\n        , \"*[count(//lst[@name='facet_fields']/lst)=10]\"\n        , \"*[count(//lst[@name='facet_fields']/lst/int)=20]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8a06631c6dd7816f50f77a22d08dac33e15f1f1":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c64189697927b548f74ba66dfa5051548662938":["b8a06631c6dd7816f50f77a22d08dac33e15f1f1","3802d95c3a31be21ea2971945049b711d95ef8d5"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c64189697927b548f74ba66dfa5051548662938"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["b8a06631c6dd7816f50f77a22d08dac33e15f1f1"]},"commit2Childs":{"b8a06631c6dd7816f50f77a22d08dac33e15f1f1":["3c64189697927b548f74ba66dfa5051548662938","3802d95c3a31be21ea2971945049b711d95ef8d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"3c64189697927b548f74ba66dfa5051548662938":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["b8a06631c6dd7816f50f77a22d08dac33e15f1f1"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["3c64189697927b548f74ba66dfa5051548662938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}