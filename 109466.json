{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}