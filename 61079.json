{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"/dev/null","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":null,"sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"/dev/null","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/FieldStatsInfo#FieldStatsInfo(NamedList[Object],String).mjava","sourceNew":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  public FieldStatsInfo( NamedList<Object> nl, String fname )\n  {\n    name = fname;\n    \n    for( Map.Entry<String, Object> entry : nl ) {\n      if( \"min\".equals( entry.getKey() ) ) {\n        min = (Double)entry.getValue();\n      }\n      else if( \"max\".equals( entry.getKey() ) ) {\n        max = (Double)entry.getValue();\n      }\n      else if( \"sum\".equals( entry.getKey() ) ) {\n        sum = (Double)entry.getValue();\n      }\n      else if( \"count\".equals( entry.getKey() ) ) {\n        count = (Long)entry.getValue();\n      }\n      else if( \"missing\".equals( entry.getKey() ) ) {\n        missing = (Long)entry.getValue();\n      }\n      else if( \"mean\".equals( entry.getKey() ) ) {\n        mean = (Double)entry.getValue();\n      }\n      else if( \"sumOfSquares\".equals( entry.getKey() ) ) {\n        sumOfSquares = (Double)entry.getValue();\n      }\n      else if( \"stddev\".equals( entry.getKey() ) ) {\n        stddev = (Double)entry.getValue();\n      }\n      else if( \"facets\".equals( entry.getKey() ) ) {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> fields = (NamedList<Object>)entry.getValue();\n        facets = new HashMap<String, List<FieldStatsInfo>>();\n        for( Map.Entry<String, Object> ev : fields ) {\n          List<FieldStatsInfo> vals = new ArrayList<FieldStatsInfo>();\n          facets.put( ev.getKey(), vals );\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> vnl = (NamedList<NamedList<Object>>) ev.getValue();\n          for( int i=0; i<vnl.size(); i++ ) {\n            String n = vnl.getName(i);\n            vals.add( new FieldStatsInfo( vnl.getVal(i), n ) );\n          }\n        }\n      }\n      else {\n        throw new RuntimeException( \"unknown key: \"+entry.getKey() + \" [\"+entry.getValue()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}