{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic2().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic2().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic2().mjava","sourceNew":"  public void testBasic2() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = false;\n    add(\"aaa\", \"aaaa1 aaaa2 aaaa3\", keepOrig);\n    add(\"bbb\", \"bbbb1 bbbb2\", keepOrig);\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    if (keepOrig) {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbb/bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaa/aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    } else {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    }\n  }\n\n","sourceOld":"  public void testBasic2() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = false;\n    add(\"aaa\", \"aaaa1 aaaa2 aaaa3\", keepOrig);\n    add(\"bbb\", \"bbbb1 bbbb2\", keepOrig);\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    if (keepOrig) {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbb/bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaa/aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    } else {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic2().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testBasic2().mjava","sourceNew":"  public void testBasic2() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = false;\n    add(\"aaa\", \"aaaa1 aaaa2 aaaa3\", keepOrig);\n    add(\"bbb\", \"bbbb1 bbbb2\", keepOrig);\n    tokensIn = new MockTokenizer(MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.setReader(new StringReader(\"a\"));\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    if (keepOrig) {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbb/bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaa/aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    } else {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    }\n  }\n\n","sourceOld":"  public void testBasic2() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = false;\n    add(\"aaa\", \"aaaa1 aaaa2 aaaa3\", keepOrig);\n    add(\"bbb\", \"bbbb1 bbbb2\", keepOrig);\n    tokensIn = new MockTokenizer(new StringReader(\"a\"),\n                                 MockTokenizer.WHITESPACE,\n                                 true);\n    tokensIn.reset();\n    assertTrue(tokensIn.incrementToken());\n    assertFalse(tokensIn.incrementToken());\n    tokensIn.end();\n    tokensIn.close();\n\n    tokensOut = new SynonymFilter(tokensIn,\n                                     b.build(),\n                                     true);\n    termAtt = tokensOut.addAttribute(CharTermAttribute.class);\n    posIncrAtt = tokensOut.addAttribute(PositionIncrementAttribute.class);\n    posLenAtt = tokensOut.addAttribute(PositionLengthAttribute.class);\n    offsetAtt = tokensOut.addAttribute(OffsetAttribute.class);\n\n    if (keepOrig) {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbb/bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaa/aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    } else {\n      verify(\"xyzzy bbb pot of gold\", \"xyzzy bbbb1 pot/bbbb2 of gold\");\n      verify(\"xyzzy aaa pot of gold\", \"xyzzy aaaa1 pot/aaaa2 of/aaaa3 gold\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}