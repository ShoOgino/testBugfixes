{"path":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,Double).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, Double value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = new StatsValues();\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) {\n    if (value == null) return false;\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10eb287e62f3e48c07b2a817c1750c859bb5e7e7","date":1410374187,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> pairs : facetStatsTerms.get(statsTermNum).entrySet()) {\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> stringIntegerEntry : facetStatsTerms.get(statsTermNum).entrySet()) {\n      Map.Entry pairs = (Map.Entry) stringIntegerEntry;\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> pairs : facetStatsTerms.get(statsTermNum).entrySet()) {\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(statsField);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> pairs : facetStatsTerms.get(statsTermNum).entrySet()) {\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(field_sf, calcDistinct);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#accumulateTermNum(int,BytesRef).mjava","sourceNew":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> pairs : facetStatsTerms.get(statsTermNum).entrySet()) {\n      String key = pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(statsField);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  //function to accumulate counts for statsTermNum to specified value\n  public boolean accumulateTermNum(int statsTermNum, BytesRef value) throws IOException {\n    if (value == null) return false;\n    while (facetStatsTerms.size() <= statsTermNum) {\n      facetStatsTerms.add(new HashMap<String, Integer>());\n    }\n    for (Map.Entry<String, Integer> pairs : facetStatsTerms.get(statsTermNum).entrySet()) {\n      String key = (String) pairs.getKey();\n      StatsValues facetStats = facetStatsValues.get(key);\n      if (facetStats == null) {\n        facetStats = StatsValuesFactory.createStatsValues(statsField);\n        facetStatsValues.put(key, facetStats);\n      }\n      Integer count = (Integer) pairs.getValue();\n      if (count != null) {\n        facetStats.accumulate(value, count);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7"],"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["bf795ee457272965bd751f513787065bbf0a650a"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["11982a7b6834a8571852448312db4624c32990b5","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["73bb5a57dc75b54a39494f99986599cae7dff417","bf795ee457272965bd751f513787065bbf0a650a"],"bf795ee457272965bd751f513787065bbf0a650a":["73bb5a57dc75b54a39494f99986599cae7dff417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"73bb5a57dc75b54a39494f99986599cae7dff417":["11982a7b6834a8571852448312db4624c32990b5"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bf795ee457272965bd751f513787065bbf0a650a":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"11982a7b6834a8571852448312db4624c32990b5":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","bf795ee457272965bd751f513787065bbf0a650a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}