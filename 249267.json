{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testNestedJoinDomain().mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testNestedJoinDomain().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedJoinDomain() throws Exception {\n    Client client = Client.localClient();\n\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"1_s\", \"A\", \"2_s\", \"A\", \"3_s\", \"C\", \"y_s\", \"B\", \"x_t\", \"x   z\", \"z_t\", \"  2 3\"), null);\n    client.add(sdoc(\"id\", \"2\", \"1_s\", \"B\", \"2_s\", \"A\", \"3_s\", \"B\", \"y_s\", \"B\", \"x_t\", \"x y  \", \"z_t\", \"1   3\"), null);\n    client.add(sdoc(\"id\", \"3\", \"1_s\", \"C\", \"2_s\", \"A\", \"3_s\", \"#\", \"y_s\", \"A\", \"x_t\", \"  y z\", \"z_t\", \"1 2  \"), null);\n    client.add(sdoc(\"id\", \"4\", \"1_s\", \"A\", \"2_s\", \"B\", \"3_s\", \"C\", \"y_s\", \"A\", \"x_t\", \"    z\", \"z_t\", \"    3\"), null);\n    client.add(sdoc(\"id\", \"5\", \"1_s\", \"B\", \"2_s\", \"_\", \"3_s\", \"B\", \"y_s\", \"C\", \"x_t\", \"x    \", \"z_t\", \"1   3\"), null);\n    client.add(sdoc(\"id\", \"6\", \"1_s\", \"C\", \"2_s\", \"B\", \"3_s\", \"A\", \"y_s\", \"C\", \"x_t\", \"x y z\", \"z_t\", \"1    \"), null);\n    client.commit();\n\n    assertJQ(req(\"q\", \"x_t:x\", \"rows\", \"0\", // NOTE q - only x=x in base set (1,2,5,6)\n                 \"json.facet\", \"\"\n                 + \"{x: { type: terms, field: 'x_t', \"\n                 + \"      domain: { join: { from:'1_s', to:'2_s' } },\"\n                 //                y1 & y2 are the same facet, with *similar* child facet z1/z2 ...\n                 + \"      facet: { y1: { type: terms, field: 'y_s', \"\n                 //                               z1 & z2 are same field, diff join...\n                 + \"                     facet: { z1: { type: terms, field: 'z_t', \"\n                 + \"                                    domain: { join: { from:'2_s', to:'3_s' } } } } },\"\n                 + \"               y2: { type: terms, field: 'y_s', \"\n                 //                               z1 & z2 are same field, diff join...\n                 + \"                     facet: { z2: { type: terms, field: 'z_t', \"\n                 + \"                                    domain: { join: { from:'3_s', to:'1_s' } } } } } } } }\")\n             , \"facets=={count:4, \"\n             + \"x:{ buckets:[\" // joined 1->2: doc5 drops out, counts: z=4, x=3, y=3 \n             + \"   { val:z, count:4, \" // x=z (docs 1,3,4,6) y terms: A=2, B=1, C=1\n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:A, count:2, \" // A in docs(3,4), joins (A,B) -> docs(2,5,6)\n             + \"               z1: { buckets:[{ val:'1', count:3 }, { val:'3', count:2 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc1, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:A, count:2, \" // A in docs(3,4), joins C -> docs(3,6)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc1, joins C -> docs(3,6)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ] } }, \"\n             + \"   { val:x, count:3, \" // x=x (docs 1,2,!5,6) y terms: B=2, C=1 \n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:B, count:2, \" // B in docs(1,2), joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:B, count:2, \" // B in docs(1,2), joins C,B -> docs(2,3,5,6)\n             + \"               z2: { buckets:[{ val:'1', count:4 }, { val:'3', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ] } }, \"\n             + \"   { val:y, count:3, \" // x=y (docs 2,3,6) y terms: A=1, B=1, C=1 \n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:A, count:1, \" // A in doc3, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc2, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:A, count:1, \" // A in doc3, joins # -> empty set\n             + \"               z2: { buckets:[ ] } }, \"\n             + \"             { val:B, count:1, \" // B in doc2, joins B -> docs(2,5)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ]}  }\"\n             + \"   ]}}\"\n             );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testNestedJoinDomain().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedJoinDomain() throws Exception {\n    Client client = Client.localClient();\n\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"1_s\", \"A\", \"2_s\", \"A\", \"3_s\", \"C\", \"y_s\", \"B\", \"x_t\", \"x   z\", \"z_t\", \"  2 3\"), null);\n    client.add(sdoc(\"id\", \"2\", \"1_s\", \"B\", \"2_s\", \"A\", \"3_s\", \"B\", \"y_s\", \"B\", \"x_t\", \"x y  \", \"z_t\", \"1   3\"), null);\n    client.add(sdoc(\"id\", \"3\", \"1_s\", \"C\", \"2_s\", \"A\", \"3_s\", \"#\", \"y_s\", \"A\", \"x_t\", \"  y z\", \"z_t\", \"1 2  \"), null);\n    client.add(sdoc(\"id\", \"4\", \"1_s\", \"A\", \"2_s\", \"B\", \"3_s\", \"C\", \"y_s\", \"A\", \"x_t\", \"    z\", \"z_t\", \"    3\"), null);\n    client.add(sdoc(\"id\", \"5\", \"1_s\", \"B\", \"2_s\", \"_\", \"3_s\", \"B\", \"y_s\", \"C\", \"x_t\", \"x    \", \"z_t\", \"1   3\"), null);\n    client.add(sdoc(\"id\", \"6\", \"1_s\", \"C\", \"2_s\", \"B\", \"3_s\", \"A\", \"y_s\", \"C\", \"x_t\", \"x y z\", \"z_t\", \"1    \"), null);\n    client.commit();\n\n    assertJQ(req(\"q\", \"x_t:x\", \"rows\", \"0\", // NOTE q - only x=x in base set (1,2,5,6)\n                 \"json.facet\", \"\"\n                 + \"{x: { type: terms, field: 'x_t', \"\n                 + \"      domain: { join: { from:'1_s', to:'2_s' } },\"\n                 //                y1 & y2 are the same facet, with *similar* child facet z1/z2 ...\n                 + \"      facet: { y1: { type: terms, field: 'y_s', \"\n                 //                               z1 & z2 are same field, diff join...\n                 + \"                     facet: { z1: { type: terms, field: 'z_t', \"\n                 + \"                                    domain: { join: { from:'2_s', to:'3_s' } } } } },\"\n                 + \"               y2: { type: terms, field: 'y_s', \"\n                 //                               z1 & z2 are same field, diff join...\n                 + \"                     facet: { z2: { type: terms, field: 'z_t', \"\n                 + \"                                    domain: { join: { from:'3_s', to:'1_s' } } } } } } } }\")\n             , \"facets=={count:4, \"\n             + \"x:{ buckets:[\" // joined 1->2: doc5 drops out, counts: z=4, x=3, y=3 \n             + \"   { val:z, count:4, \" // x=z (docs 1,3,4,6) y terms: A=2, B=1, C=1\n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:A, count:2, \" // A in docs(3,4), joins (A,B) -> docs(2,5,6)\n             + \"               z1: { buckets:[{ val:'1', count:3 }, { val:'3', count:2 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc1, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:A, count:2, \" // A in docs(3,4), joins C -> docs(3,6)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc1, joins C -> docs(3,6)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ] } }, \"\n             + \"   { val:x, count:3, \" // x=x (docs 1,2,!5,6) y terms: B=2, C=1 \n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:B, count:2, \" // B in docs(1,2), joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:B, count:2, \" // B in docs(1,2), joins C,B -> docs(2,3,5,6)\n             + \"               z2: { buckets:[{ val:'1', count:4 }, { val:'3', count:2 }, { val:'2', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ] } }, \"\n             + \"   { val:y, count:3, \" // x=y (docs 2,3,6) y terms: A=1, B=1, C=1 \n             + \"     y1 : { buckets:[ \" // z1 joins 2->3...\n             + \"             { val:A, count:1, \" // A in doc3, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:B, count:1, \" // B in doc2, joins A -> doc6\n             + \"               z1: { buckets:[{ val:'1', count:1 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins B -> docs(2,5)\n             + \"               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } \"\n             + \"          ] }, \"\n             + \"     y2 : { buckets:[ \" // z2 joins 3->1...\n             + \"             { val:A, count:1, \" // A in doc3, joins # -> empty set\n             + \"               z2: { buckets:[ ] } }, \"\n             + \"             { val:B, count:1, \" // B in doc2, joins B -> docs(2,5)\n             + \"               z2: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } }, \"\n             + \"             { val:C, count:1, \" // C in doc6, joins A -> docs(1,4)\n             + \"               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } \"\n             + \"          ]}  }\"\n             + \"   ]}}\"\n             );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}