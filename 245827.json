{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,boolean,boolean,TrieUtils).mjava","commits":[{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,boolean,boolean,TrieUtils).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,TrieUtils).mjava","sourceNew":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeFilter(final String field, String min, String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    if (min==null && max==null) throw new IllegalArgumentException(\"The min and max values cannot be both null.\");\n    this.trieVariant=variant;\n    this.field=field.intern();\n    // just for toString()\n    this.minUnconverted=min;\n    this.maxUnconverted=max;\n    this.minInclusive=minInclusive;\n    this.maxInclusive=maxInclusive;\n    // encode bounds\n    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : (\n      minInclusive ? min : variant.incrementTrieCoded(min)\n    );\n    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : (\n      maxInclusive ? max : variant.decrementTrieCoded(max)\n    );\n  }\n\n","sourceOld":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   */\n  public TrieRangeFilter(final String field, final String min, final String max, final TrieUtils variant) {\n    if (min==null && max==null) throw new IllegalArgumentException(\"The min and max values cannot be both null.\");\n    this.trieVariant=variant;\n    this.minUnconverted=min;\n    this.maxUnconverted=max;\n    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : min;\n    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : max;\n    this.field=field.intern();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460ff12002b740295fc8dfcbefbc0239a33c46e","date":1233355084,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,boolean,boolean,TrieUtils).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,boolean,boolean,TrieUtils).mjava","sourceNew":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeFilter(final String field, String min, String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    if (min==null && max==null) throw new IllegalArgumentException(\"The min and max values cannot be both null.\");\n    this.trieVariant=variant;\n    this.field=field.intern();\n    // just for toString()\n    this.minUnconverted=min;\n    this.maxUnconverted=max;\n    this.minInclusive=minInclusive;\n    this.maxInclusive=maxInclusive;\n    // encode bounds\n    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : (\n      minInclusive ? min : variant.incrementTrieCoded(min)\n    );\n    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : (\n      maxInclusive ? max : variant.decrementTrieCoded(max)\n    );\n    // check encoded values\n    if (\n      this.min.length() != trieVariant.TRIE_CODED_LENGTH ||\n      this.max.length() != trieVariant.TRIE_CODED_LENGTH\n    ) throw new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n  }\n\n","sourceOld":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeFilter(final String field, String min, String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    if (min==null && max==null) throw new IllegalArgumentException(\"The min and max values cannot be both null.\");\n    this.trieVariant=variant;\n    this.field=field.intern();\n    // just for toString()\n    this.minUnconverted=min;\n    this.maxUnconverted=max;\n    this.minInclusive=minInclusive;\n    this.maxInclusive=maxInclusive;\n    // encode bounds\n    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : (\n      minInclusive ? min : variant.incrementTrieCoded(min)\n    );\n    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : (\n      maxInclusive ? max : variant.decrementTrieCoded(max)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#TrieRangeFilter(String,String,String,boolean,boolean,TrieUtils).mjava","sourceNew":null,"sourceOld":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeFilter(final String field, String min, String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    if (min==null && max==null) throw new IllegalArgumentException(\"The min and max values cannot be both null.\");\n    this.trieVariant=variant;\n    this.field=field.intern();\n    // just for toString()\n    this.minUnconverted=min;\n    this.maxUnconverted=max;\n    this.minInclusive=minInclusive;\n    this.maxInclusive=maxInclusive;\n    // encode bounds\n    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : (\n      minInclusive ? min : variant.incrementTrieCoded(min)\n    );\n    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : (\n      maxInclusive ? max : variant.decrementTrieCoded(max)\n    );\n    // check encoded values\n    if (\n      this.min.length() != trieVariant.TRIE_CODED_LENGTH ||\n      this.max.length() != trieVariant.TRIE_CODED_LENGTH\n    ) throw new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7460ff12002b740295fc8dfcbefbc0239a33c46e":["e91724d755098f0c856c612bf56d1edc31044a82"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["7460ff12002b740295fc8dfcbefbc0239a33c46e"],"e91724d755098f0c856c612bf56d1edc31044a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"7460ff12002b740295fc8dfcbefbc0239a33c46e":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["7460ff12002b740295fc8dfcbefbc0239a33c46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}