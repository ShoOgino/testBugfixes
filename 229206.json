{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","commits":[{"id":"e4c0b17b8a1d791b23f2f7ee90448d718112841e","date":1361891420,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","pathOld":"/dev/null","sourceNew":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b2ce976011d0c805f83e22e14d2b02899654234b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2ce976011d0c805f83e22e14d2b02899654234b","date":1361894776,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // TODO: java7 use Integer.compare(starts[i], starts[j])\n        return Long.signum(((long)starts[i]) - starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        // TODO: java7 use Integer.compare(pivot, starts[j])\n        return Long.signum(((long)pivot) - starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","bugFix":["e4c0b17b8a1d791b23f2f7ee90448d718112841e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47da30f6e362ae055711fad41cdcba60b9dee8c6","date":1363626629,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // TODO: java7 use Integer.compare(starts[i], starts[j])\n        return Long.signum(((long)starts[i]) - starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        // TODO: java7 use Integer.compare(pivot, starts[j])\n        return Long.signum(((long)pivot) - starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final Term terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        Term tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = starts[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return Integer.compare(pivot, starts[j]);\n      }\n      \n      int pivot;\n    }.mergeSort(0, numMatches-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":null,"sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#sort().mjava","sourceNew":null,"sourceOld":"  void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n        \n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n        \n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"47da30f6e362ae055711fad41cdcba60b9dee8c6":["b2ce976011d0c805f83e22e14d2b02899654234b"],"b2ce976011d0c805f83e22e14d2b02899654234b":["e4c0b17b8a1d791b23f2f7ee90448d718112841e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","381618eac2691bb34ab9a3fca76ad55c6274517e"],"4831dd345148fcd7c33877b449ade21fc45459d8":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"e4c0b17b8a1d791b23f2f7ee90448d718112841e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"47da30f6e362ae055711fad41cdcba60b9dee8c6":["4831dd345148fcd7c33877b449ade21fc45459d8"],"b2ce976011d0c805f83e22e14d2b02899654234b":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4831dd345148fcd7c33877b449ade21fc45459d8":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"e4c0b17b8a1d791b23f2f7ee90448d718112841e":["b2ce976011d0c805f83e22e14d2b02899654234b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4c0b17b8a1d791b23f2f7ee90448d718112841e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}