{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","commits":[{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput);\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput);\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","sourceNew":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output());\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput());\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput);\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#applyMappings(FST[CharsRef],StringBuilder).mjava","sourceNew":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output());\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput());\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this could be more efficient!\n  static void applyMappings(FST<CharsRef> fst, StringBuilder sb) throws IOException {\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<CharsRef> firstArc = fst.getFirstArc(new FST.Arc<CharsRef>());\n    final CharsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    \n    // temporary stuff\n    final FST.Arc<CharsRef> arc = new FST.Arc<>();\n    int longestMatch;\n    CharsRef longestOutput;\n    \n    for (int i = 0; i < sb.length(); i++) {\n      arc.copyFrom(firstArc);\n      CharsRef output = NO_OUTPUT;\n      longestMatch = -1;\n      longestOutput = null;\n      \n      for (int j = i; j < sb.length(); j++) {\n        char ch = sb.charAt(j);\n        if (fst.findTargetArc(ch, arc, arc, bytesReader) == null) {\n          break;\n        } else {\n          output = fst.outputs.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          longestOutput = fst.outputs.add(output, arc.nextFinalOutput);\n          longestMatch = j;\n        }\n      }\n      \n      if (longestMatch >= 0) {\n        sb.delete(i, longestMatch+1);\n        sb.insert(i, longestOutput);\n        i += (longestOutput.length - 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae9942cbee38a49d234c2f022e3a265133d1914"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["5ae9942cbee38a49d234c2f022e3a265133d1914","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5ae9942cbee38a49d234c2f022e3a265133d1914":["54204c8a3ca26aeafd273139fc29baf70d0f6786","96ea64d994d340044e0d57aeb6a5871539d10ca5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}