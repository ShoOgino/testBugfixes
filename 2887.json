{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      this.properties.putAll(properties);\n      trigger = (String)properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, properties);\n      for (String stageName : stageNames) {\n        try {\n          AutoScaling.EventProcessorStage stage = AutoScaling.EventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)properties.get(AutoScalingParams.CLASS);\n      beforeActions = new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, properties));\n      afterActions = new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, properties));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (String stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      beforeActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, this.properties)));\n      afterActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, this.properties)));\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      this.properties.putAll(properties);\n      trigger = (String)properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, properties);\n      for (String stageName : stageNames) {\n        try {\n          AutoScaling.EventProcessorStage stage = AutoScaling.EventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)properties.get(AutoScalingParams.CLASS);\n      beforeActions = new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, properties));\n      afterActions = new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, properties));\n    }\n\n","bugFix":null,"bugIntro":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5fd294da67452cd8d116692194908de00eb5209","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}