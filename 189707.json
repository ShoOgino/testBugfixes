{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","commits":[{"id":"ee9efffeff762194ca606ff91a43e2f6f56a430f","date":1390409407,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p/>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query, if blank then this query should match all docs with this field\n   * @return a Query instance to perform prefix search\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    if (\"\".equals(termStr)) {\n      return getRangeQuery(parser, sf, null, null, true, true);\n    }\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query, if blank then this query should match all docs with this field\n   * @return a Query instance to perform prefix search\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    if (\"\".equals(termStr)) {\n      return getRangeQuery(parser, sf, null, null, true, true);\n    }\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query, if blank then this query should match all docs with this field\n   * @return a Query instance to perform prefix search\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    if (\"\".equals(termStr)) {\n      return getRangeQuery(parser, sf, null, null, true, true);\n    }\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query, if blank then this query should match all docs with this field\n   * @return a Query instance to perform prefix search\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    if (\"\".equals(termStr)) {\n      return getRangeQuery(parser, sf, null, null, true, true);\n    }\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getPrefixQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query, if blank then this query should match all docs with this field\n   * @return a Query instance to perform prefix search\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    if (\"\".equals(termStr)) {\n      return getExistenceQuery(parser, sf);\n    }\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing prefix searches on this field type.\n   * Also, other QueryParser implementations may have different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param sf           the schema field\n   * @param termStr      the term string for prefix query\n   * @return a Query instance to perform prefix search\n   *\n   */\n  public Query getPrefixQuery(QParser parser, SchemaField sf, String termStr) {\n    PrefixQuery query = new PrefixQuery(new Term(sf.getName(), termStr));\n    query.setRewriteMethod(sf.getType().getRewriteMethod(parser, sf));\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c81907bd971f786e378654d32b80da32b0e950d":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","0c81907bd971f786e378654d32b80da32b0e950d"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}