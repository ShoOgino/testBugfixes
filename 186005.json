{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","commits":[{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (scoreMode.needsScores() == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public float maxScore() {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (scoreMode.needsScores() == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public float maxScore() {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],long).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (scoreMode.needsScores() == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        scoringScorers.add(scorer);\n      }\n      if (scoreMode == ScoreMode.TOP_SCORES && scoringScorers.size() > 1) {\n        Scorer blockMaxScorer = new BlockMaxConjunctionScorer(weight, scoringScorers);\n        if (requiredScorers.isEmpty()) {\n          return blockMaxScorer;\n        }\n        scoringScorers = Collections.singletonList(blockMaxScorer);\n      }\n      requiredScorers.addAll(scoringScorers);\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, long leadCost) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(leadCost);\n\n      if (scoreMode.needsScores() == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public float maxScore() {\n            return 0f;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(leadCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(leadCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","dc14da055888b63b4f8c922d0e1579f3cb315ad7","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}