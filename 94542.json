{"path":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ada808d1fd6b1afb13af55a1dee4c15527af578","date":1337156389,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd9165e54429bb5c99e75d5cb1c926cc98772456","date":1337362687,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[String,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<String,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi.name);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null: \"got \" + fi.getNormType() + \"; field=\" + fi.name;\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[String,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<String,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi.name);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitsNorms()) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.segmentInfo.getDocCount());\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed()) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null: \"got \" + fi.getNormType() + \"; field=\" + fi.name;\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["2ada808d1fd6b1afb13af55a1dee4c15527af578"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["2ada808d1fd6b1afb13af55a1dee4c15527af578"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["cd9165e54429bb5c99e75d5cb1c926cc98772456"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}