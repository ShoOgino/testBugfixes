{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","commits":[{"id":"136796946c32863f11b97ebec6b4091cdfe3a20b","date":1468862468,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new HashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof RenameFieldValueValidator) {\n          renamed.add(((RenameFieldValueValidator)v).getRealFieldName());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new HashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbfb6ddad2ec9fa9128265741535450c3cbc4344","date":1470329280,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new LinkedHashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof SuppressRealFields) {\n          renamed.addAll(((SuppressRealFields)v).getSuppressedFields());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new LinkedHashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new HashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof RenameFieldValueValidator) {\n          renamed.add(((RenameFieldValueValidator)v).getRealFieldName());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new HashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new LinkedHashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof SuppressRealFields) {\n          renamed.addAll(((SuppressRealFields)v).getSuppressedFields());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new LinkedHashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new HashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof RenameFieldValueValidator) {\n          renamed.add(((RenameFieldValueValidator)v).getRealFieldName());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new HashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.GlobValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n\n      final Set<String> renamed = new LinkedHashSet<>(validators.size());\n      for (FlValidator v : validators) {\n        if (v instanceof SuppressRealFields) {\n          renamed.addAll(((SuppressRealFields)v).getSuppressedFields());\n        }\n      }\n      \n      // every real field name matching the glob that is not renamed should be in the results\n      Set<String> result = new LinkedHashSet<>(expected.getFieldNames().size());\n      for (String f : expected.getFieldNames()) {\n        if ( matchesGlob(f) && (! renamed.contains(f) ) ) {\n          result.add(f);\n          assertEquals(glob + \" => \" + f, expected.getFieldValue(f), actual.getFirstValue(f));\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["136796946c32863f11b97ebec6b4091cdfe3a20b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"136796946c32863f11b97ebec6b4091cdfe3a20b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbfb6ddad2ec9fa9128265741535450c3cbc4344"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["136796946c32863f11b97ebec6b4091cdfe3a20b","fbfb6ddad2ec9fa9128265741535450c3cbc4344"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbfb6ddad2ec9fa9128265741535450c3cbc4344"]},"commit2Childs":{"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["136796946c32863f11b97ebec6b4091cdfe3a20b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"136796946c32863f11b97ebec6b4091cdfe3a20b":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}