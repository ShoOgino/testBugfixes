{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","date":1345254460,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"fmap.AAPL:Keywords\", \"ignored_a\",\n            \"fmap.xmpTPg:NPages\", \"ignored_a\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a71200003867bc085f5db6a2dfd536a07be5f8b","date":1346401894,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6873100fc110698801deed62840ac7c77e0614c","date":1376054815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9245a5b2e187bf44b1e2cc53c8a36b10e3bf1","date":1392254529,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a8c5f60a45dea09281bc907fa313c01b8f48ae9","date":1421659326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n    // compressed file\n    loadLocal(\"extraction/open-document.odt\", \n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"open-document\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:\\\"Práctica sobre GnuPG\\\"\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='open-document.odt']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0","date":1422056685,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_content:serif\"), \"//*[@numFound='0']\"); // make sure <style> content is excluded\n    assertQ(req(\"+id:simple2 +t_content:blur\"), \"//*[@numFound='0']\"); // make sure <script> content is excluded\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n    // compressed file\n    loadLocal(\"extraction/open-document.odt\", \n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"open-document\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:\\\"Práctica sobre GnuPG\\\"\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='open-document.odt']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    // test capture\n     loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple4\",\n      \"uprefix\", \"t_\",\n      \"capture\",\"p\",     // capture only what is in the title element\n      \"commit\", \"true\"\n    );\n    assertQ(req(\"+id:simple4 +t_content:Solr\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple4 +t_p:\\\"here is some text\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n    // compressed file\n    loadLocal(\"extraction/open-document.odt\", \n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"open-document\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:\\\"Práctica sobre GnuPG\\\"\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='open-document.odt']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59045549d1c90e922ac9efd8639d2d55ea68699f","date":1488573830,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testExtraction().mjava","sourceNew":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_content:serif\"), \"//*[@numFound='0']\"); // make sure <style> content is excluded\n    assertQ(req(\"+id:simple2 +t_content:blur\"), \"//*[@numFound='0']\"); // make sure <script> content is excluded\n\n    // make sure the fact there is an index-time boost does not fail the parsing\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[2]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n    // compressed file\n    loadLocal(\"extraction/open-document.odt\", \n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"open-document\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:\\\"Práctica sobre GnuPG\\\"\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='open-document.odt']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testExtraction() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    loadLocal(\"extraction/solr-word.pdf\",\n            \"fmap.created\", \"extractedDate\",\n            \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Creation-Date\", \"extractedDate\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n           \"literal.id\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:solr-word\"), \"//*[@numFound='1']\");\n\n\n    loadLocal(\"extraction/simple.html\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.id\", \"two\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"title:Welcome\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractedContent:distinctwords\"),      \"//*[@numFound='0']\");\n    assertQ(req(\"extractedContent:distinct\"),           \"//*[@numFound='1']\");\n    assertQ(req(\"extractedContent:words\"),              \"//*[@numFound='2']\");\n    assertQ(req(\"extractedContent:\\\"distinct words\\\"\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple2\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      \"fmap.content_type\", \"abcxyz\",  // test that lowernames is applied before mapping, and uprefix is applied after mapping\n      \"commit\", \"true\"  // test immediate commit\n    );\n\n    // test that purposely causes a failure to print out the doc for test debugging\n    // assertQ(req(\"q\",\"id:simple2\",\"indent\",\"true\"), \"//*[@numFound='0']\");\n\n    // test both lowernames and unknown field mapping\n    //assertQ(req(\"+id:simple2 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_abcxyz:[* TO *]\"), \"//*[@numFound='1']\");\n    assertQ(req(\"+id:simple2 +t_content:serif\"), \"//*[@numFound='0']\"); // make sure <style> content is excluded\n    assertQ(req(\"+id:simple2 +t_content:blur\"), \"//*[@numFound='0']\"); // make sure <script> content is excluded\n\n    // load again in the exact same way, but boost one field\n    loadLocal(\"extraction/simple.html\",\n      \"literal.id\",\"simple3\",\n      \"uprefix\", \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",  \"fmap.a\",\"t_href\",\n      \"commit\", \"true\"\n\n      ,\"boost.t_href\", \"100.0\"\n    );\n\n    assertQ(req(\"t_href:http\"), \"//*[@numFound='2']\");\n    assertQ(req(\"t_href:http\"), \"//doc[1]/str[.='simple3']\");\n    assertQ(req(\"+id:simple3 +t_content_type:[* TO *]\"), \"//*[@numFound='1']\");//test lowercase and then uprefix\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"three\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    loadLocal(\"extraction/word2003.doc\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"four\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.content\", \"extractedContent\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='0']\");\n    // There is already a PDF file with this content:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='1']\");\n    assertU(commit());\n    assertQ(req(\"title:\\\"Word 2003 Title\\\"\"), \"//*[@numFound='1']\");\n    // now 2 of them:\n    assertQ(req(\"extractedContent:\\\"This is a test of PDF and Word extraction in Solr, it is only a test\\\"\"), \"//*[@numFound='2']\");\n\n    // compressed file\n    loadLocal(\"extraction/tiny.txt.gz\", \n              \"fmap.created\", \"extractedDate\", \n              \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \n              \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"fmap.Last-Modified\", \"extractedDate\",\n              \"literal.id\", \"tiny.txt.gz\");\n    assertU(commit());\n    assertQ(req(\"id:tiny.txt.gz\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='tiny.txt.gz']\"\n            );\n\n    // compressed file\n    loadLocal(\"extraction/open-document.odt\", \n              \"uprefix\", \"ignored_\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"open-document\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:\\\"Práctica sobre GnuPG\\\"\")\n            , \"//*[@numFound='1']\"\n            , \"//*/arr[@name='stream_name']/str[.='open-document.odt']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0":["1a8c5f60a45dea09281bc907fa313c01b8f48ae9"],"59045549d1c90e922ac9efd8639d2d55ea68699f":["14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["6a71200003867bc085f5db6a2dfd536a07be5f8b","b6873100fc110698801deed62840ac7c77e0614c"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["abd55340ba9df8b62edcd692b34e46cf0614a52e","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6a71200003867bc085f5db6a2dfd536a07be5f8b":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"1a8c5f60a45dea09281bc907fa313c01b8f48ae9":["bcf9245a5b2e187bf44b1e2cc53c8a36b10e3bf1"],"b6873100fc110698801deed62840ac7c77e0614c":["6a71200003867bc085f5db6a2dfd536a07be5f8b"],"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["616c1830142ff5c1ddedec1ed898733b73c8e23b","6a71200003867bc085f5db6a2dfd536a07be5f8b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["abd55340ba9df8b62edcd692b34e46cf0614a52e","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9245a5b2e187bf44b1e2cc53c8a36b10e3bf1":["b6873100fc110698801deed62840ac7c77e0614c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59045549d1c90e922ac9efd8639d2d55ea68699f"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0":["59045549d1c90e922ac9efd8639d2d55ea68699f"],"59045549d1c90e922ac9efd8639d2d55ea68699f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"6a71200003867bc085f5db6a2dfd536a07be5f8b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b6873100fc110698801deed62840ac7c77e0614c","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"1a8c5f60a45dea09281bc907fa313c01b8f48ae9":["14ae9ffabd75a5e21eb54bc365eaebeaf858c4f0"],"b6873100fc110698801deed62840ac7c77e0614c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","bcf9245a5b2e187bf44b1e2cc53c8a36b10e3bf1"],"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["616c1830142ff5c1ddedec1ed898733b73c8e23b","6a71200003867bc085f5db6a2dfd536a07be5f8b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bcf9245a5b2e187bf44b1e2cc53c8a36b10e3bf1":["1a8c5f60a45dea09281bc907fa313c01b8f48ae9"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["616c1830142ff5c1ddedec1ed898733b73c8e23b","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d0d1f90e969803cc84174589b5e4a39b7935fecd","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}