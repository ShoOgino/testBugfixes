{"path":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","commits":[{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"/dev/null","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers( countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76349ae49451ab1e1e63e8eeb254f82684b1da25","date":1176847207,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers( countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","bugFix":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6c98c690b593cea727f68742684c979ead1a0a","date":1248688202,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() < minNrShouldMatch) {\n      return new NonMatchingScorer(); // fewer optional clauses than minimum that should match\n    } else if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            (requiredScorers.size() == 1)\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      ((optionalScorers.size() == 1)\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        : countingDisjunctionSumScorer(optionalScorers, 1))); // require 1 in combined, optional scorer.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList allReq = new ArrayList(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer((Scorer) requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer((Scorer) optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["8d6c98c690b593cea727f68742684c979ead1a0a"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"8d6c98c690b593cea727f68742684c979ead1a0a":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"]},"commit2Childs":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["8d6c98c690b593cea727f68742684c979ead1a0a"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d6c98c690b593cea727f68742684c979ead1a0a":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}