{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser().parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c56959837396924832a5c1f8c1670111913c6e9b","date":1353354232,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser().parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde","date":1353446636,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","bugFix":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d30d20145e9c54b7890711c3307fade007068e9f","date":1354032746,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }    \n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        VariableWrapper wrapper = (VariableWrapper) localeObj;\n        o = wrapper.resolve();\n        localeStr = o.toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    String dateFmt = format.toString();\n    DateFormatCacheKey dfck = new DateFormatCacheKey(locale, dateFmt);\n    SimpleDateFormat sdf = cache.get(dfck);\n    if(sdf==null) {\n      sdf = new SimpleDateFormat(dateFmt, locale);\n      cache.put(dfck, sdf);\n    }\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          dfck = new DateFormatCacheKey(locale, DEFAULT_DATE_FORMAT);\n          sdf = cache.get(dfck);\n          if(sdf==null) {\n            sdf = new SimpleDateFormat(dfck.dateFormat, dfck.locale);\n            cache.put(dfck, sdf);\n          }\n          date = new SimpleDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return sdf.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }    \n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac","date":1357584861,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();        \n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, tz, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale, tz).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }    \n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();        \n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, tz, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale, tz).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 3) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two or three parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()==3) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }    \n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c3d81a07652af7c4ca5568fbe7282722c32a40","date":1398935464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }    \n    Locale locale = Locale.ROOT;\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();        \n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();        \n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      VariableWrapper variableWrapper = (VariableWrapper) o;\n      Object variableval = variableWrapper.resolve();\n      if (variableval instanceof Date) {\n        date = (Date) variableval;\n      } else {\n        String s = variableval.toString();\n        try {\n          date = getDateFormat(DEFAULT_DATE_FORMAT, tz, locale).parse(s);\n        } catch (ParseException exp) {\n          wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n        }\n      }\n    } else {\n      String datemathfmt = o.toString();\n      datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n      try {\n        date = getDateMathParser(locale, tz).parseMath(datemathfmt);\n      } catch (ParseException e) {\n        wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n      }\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ROOT;\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if(locale==null) {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported locale: \" + localeStr);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault(); // DWS TODO: is this the right default for us?  Deserves explanation if so.\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":["f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault(); // DWS TODO: is this the right default for us?  Deserves explanation if so.\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault(); // DWS TODO: is this the right default for us?  Deserves explanation if so.\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault(); // DWS TODO: is this the right default for us?  Deserves explanation if so.\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault();\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluate(String,Context).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String evaluate(String expression, Context context) {\n    List<Object> l = parseParams(expression, context.getVariableResolver());\n    if (l.size() < 2 || l.size() > 4) {\n      throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two, three or four parameters \");\n    }\n    Object o = l.get(0);\n    Object format = l.get(1);\n    if (format instanceof VariableWrapper) {\n      VariableWrapper wrapper = (VariableWrapper) format;\n      o = wrapper.resolve();\n      format = o.toString();\n    }\n    Locale locale = Locale.ENGLISH; // we default to ENGLISH for dates for full Java 9 compatibility\n    if(l.size()>2) {\n      Object localeObj = l.get(2);\n      String localeStr = null;\n      if (localeObj  instanceof VariableWrapper) {\n        localeStr = ((VariableWrapper) localeObj).resolve().toString();\n      } else {\n        localeStr = localeObj.toString();\n      }\n      locale = availableLocales.get(localeStr);\n      if (locale == null) try {\n        locale = new Locale.Builder().setLanguageTag(localeStr).build();\n      } catch (IllformedLocaleException ex) {\n        throw new DataImportHandlerException(SEVERE, \"Malformed / non-existent locale: \" + localeStr, ex);\n      }\n    }\n    TimeZone tz = TimeZone.getDefault(); // DWS TODO: is this the right default for us?  Deserves explanation if so.\n    if(l.size()==4) {\n      Object tzObj = l.get(3);\n      String tzStr = null;\n      if (tzObj  instanceof VariableWrapper) {\n        tzStr = ((VariableWrapper) tzObj).resolve().toString();\n      } else {\n        tzStr = tzObj.toString();\n      }\n      if(availableTimezones.contains(tzStr)) {\n        tz = TimeZone.getTimeZone(tzStr);\n      } else {\n        throw new DataImportHandlerException(SEVERE, \"Unsupported Timezone: \" + tzStr);\n      }\n    }\n    String dateFmt = format.toString();\n    SimpleDateFormat fmt = getDateFormat(dateFmt, tz, locale);\n    Date date = null;\n    if (o instanceof VariableWrapper) {\n      date = evaluateWrapper((VariableWrapper) o, locale, tz);\n    } else {\n      date = evaluateString(o.toString(), locale, tz);\n    }\n    return fmt.format(date);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac":["d30d20145e9c54b7890711c3307fade007068e9f"],"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde":["c56959837396924832a5c1f8c1670111913c6e9b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d30d20145e9c54b7890711c3307fade007068e9f"],"0ad30c6a479e764150a3316e57263319775f1df2":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"c56959837396924832a5c1f8c1670111913c6e9b":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d30d20145e9c54b7890711c3307fade007068e9f":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["b0c3d81a07652af7c4ca5568fbe7282722c32a40"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90","0ad30c6a479e764150a3316e57263319775f1df2"],"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b0c3d81a07652af7c4ca5568fbe7282722c32a40":["f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b0c3d81a07652af7c4ca5568fbe7282722c32a40"],"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde":["d30d20145e9c54b7890711c3307fade007068e9f"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c56959837396924832a5c1f8c1670111913c6e9b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c56959837396924832a5c1f8c1670111913c6e9b":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"d30d20145e9c54b7890711c3307fade007068e9f":["f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac","407687e67faf6e1f02a211ca078d8e3eed631027"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0c3d81a07652af7c4ca5568fbe7282722c32a40":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}