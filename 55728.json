{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","commits":[{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCountForAllShards() throws Exception {\n    String collectionName = \"deleteByCountNew\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 2, 2, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 2);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),2);\n      }\n\n      String requestIdAsync = \"1000\";\n\n      try {\n        // Should not be able to delete 2 replicas from all shards (non leader ones)\n        tryRemoveReplicaByCountAsync(collectionName, client, 1, requestIdAsync);\n\n        //Make sure request completes\n        String requestStatus = trackRequestStatus(client, requestIdAsync);\n\n        while ((!requestStatus.equals(RequestStatusState.COMPLETED.getKey()))  && (!requestStatus.equals(RequestStatusState.FAILED.getKey()))) {\n          requestStatus = trackRequestStatus(client, requestIdAsync);\n        }\n\n\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 2);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCountForAllShards() throws Exception {\n    String collectionName = \"deleteByCountNew\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 2, 2, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 2);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),2);\n      }\n\n      String requestIdAsync = \"1000\";\n\n      try {\n        // Should not be able to delete 2 replicas from all shards (non leader ones)\n        tryRemoveReplicaByCountAsync(collectionName, client, 1, requestIdAsync);\n\n        //Make sure request completes\n        String requestStatus = trackRequestStatus(client, requestIdAsync);\n\n        while ((!requestStatus.equals(RequestStatusState.COMPLETED.getKey()))  && (!requestStatus.equals(RequestStatusState.FAILED.getKey()))) {\n          requestStatus = trackRequestStatus(client, requestIdAsync);\n        }\n\n\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 2);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 2));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 1));\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void deleteReplicaByCountForAllShards() throws Exception {\n    String collectionName = \"deleteByCountNew\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, 2, 2, 5);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Collection<Slice> slices = testcoll.getActiveSlices();\n      assertEquals(slices.size(), 2);\n      for (Slice individualShard:  slices) {\n        assertEquals(individualShard.getReplicas().size(),2);\n      }\n\n      String requestIdAsync = \"1000\";\n\n      try {\n        // Should not be able to delete 2 replicas from all shards (non leader ones)\n        tryRemoveReplicaByCountAsync(collectionName, client, 1, requestIdAsync);\n\n        //Make sure request completes\n        String requestStatus = trackRequestStatus(client, requestIdAsync);\n\n        while ((!requestStatus.equals(RequestStatusState.COMPLETED.getKey()))  && (!requestStatus.equals(RequestStatusState.FAILED.getKey()))) {\n          requestStatus = trackRequestStatus(client, requestIdAsync);\n        }\n\n\n        testcoll = getCommonCloudSolrClient().getZkStateReader()\n                .getClusterState().getCollection(collectionName);\n        slices = testcoll.getActiveSlices();\n        assertEquals(slices.size(), 2);\n        for (Slice individualShard:  slices) {\n          assertEquals(individualShard.getReplicas().size(),1);\n        }\n\n      } catch (SolrException se) {\n        fail(\"Should have been able to remove the replica successfully\");\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 2));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 1));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 2));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 1));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","sourceNew":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    Create req = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2);\n    req.process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 4));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 2));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 2));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 1));\n\n  }\n\n","bugFix":["609b19bb8de96c4e5e338d1d4a0349957522b601"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    Create req = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2);\n    req.process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 4));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 2));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    Create req = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2);\n    req.process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 4));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 2));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaByCountForAllShards().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    Create req = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2);\n    req.process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 4));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 2));\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void deleteReplicaByCountForAllShards() throws Exception {\n\n    final String collectionName = \"deleteByCountNew\";\n    Create req = CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2);\n    req.process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Expected two shards with two replicas each\", collectionName, clusterShape(2, 4));\n\n    CollectionAdminRequest.deleteReplicasFromAllShards(collectionName, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected two shards with one replica each\", collectionName, clusterShape(2, 2));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["073a74201a21520f4fc543c9f6d1d87c19a467b2"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["609b19bb8de96c4e5e338d1d4a0349957522b601","bc8f206328a706450934717bec7ccc22ad166fc0"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073a74201a21520f4fc543c9f6d1d87c19a467b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}