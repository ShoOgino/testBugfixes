{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","commits":[{"id":"5ab3f83fe809caa1d81a4ed52dfa5372723b348d","date":1458525918,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b847eda61b25b7a07da480ee8255e33d28134a","date":1458617925,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.url, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.url, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.url, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.url, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testDaemonTopicStream() throws Exception {\n\n    String zkHost = zkServer.getZkAddress();\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, \"collection1\", \"collection1\", \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.url, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n\n    commit();\n\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n\n    indexr(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\");\n\n    commit();\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n                                              COLLECTION,\n                                              COLLECTION,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n                                              COLLECTION,\n                                              COLLECTION,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    Map params = new HashMap();\n    params.put(\"q\",\"a_s:hello0\");\n    params.put(\"rows\", \"500\");\n    params.put(\"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost, COLLECTION, COLLECTION, \"50000000\", 1000000, params);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    Map params1 = new HashMap();\n    params1.put(\"qt\",\"/get\");\n    params1.put(\"ids\",\"50000000\");\n    params1.put(\"fl\",\"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, params1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n        COLLECTIONORALIAS,\n        COLLECTIONORALIAS,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n                                              COLLECTION,\n                                              COLLECTION,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n        COLLECTIONORALIAS,\n        COLLECTIONORALIAS,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n                                              COLLECTION,\n                                              COLLECTION,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTION, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n      TopicStream topicStream = new TopicStream(zkHost,\n          COLLECTIONORALIAS,\n          COLLECTIONORALIAS,\n          \"50000000\",\n          -1,\n          1000000, sParams);\n\n      DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n      daemonStream.setStreamContext(context);\n\n      daemonStream.open();\n\n      // Wait for the checkpoint\n      JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n      SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n      int count = 0;\n      while (count == 0) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n        solrStream.setStreamContext(context);\n        List<Tuple> tuples = getTuples(solrStream);\n        count = tuples.size();\n        if (count > 0) {\n          Tuple t = tuples.get(0);\n          assertTrue(t.getLong(\"id\") == 50000000);\n        } else {\n          System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n        }\n      }\n\n      new UpdateRequest()\n          .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n          .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n          .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n          .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 5; i++) {\n        daemonStream.read();\n      }\n\n      new UpdateRequest()\n          .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 2; i++) {\n        daemonStream.read();\n      }\n\n      daemonStream.shutdown();\n\n      Tuple tuple = daemonStream.read();\n\n      assertTrue(tuple.EOF);\n      daemonStream.close();\n    } finally {\n      cache.close();\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n        COLLECTIONORALIAS,\n        COLLECTIONORALIAS,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n      TopicStream topicStream = new TopicStream(zkHost,\n          COLLECTIONORALIAS,\n          COLLECTIONORALIAS,\n          \"50000000\",\n          -1,\n          1000000, sParams);\n\n      DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n      daemonStream.setStreamContext(context);\n\n      daemonStream.open();\n\n      // Wait for the checkpoint\n      JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n      SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n      int count = 0;\n      while (count == 0) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n        solrStream.setStreamContext(context);\n        List<Tuple> tuples = getTuples(solrStream);\n        count = tuples.size();\n        if (count > 0) {\n          Tuple t = tuples.get(0);\n          assertTrue(t.getLong(\"id\") == 50000000);\n        } else {\n          System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n        }\n      }\n\n      new UpdateRequest()\n          .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n          .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n          .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n          .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 5; i++) {\n        daemonStream.read();\n      }\n\n      new UpdateRequest()\n          .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 2; i++) {\n        daemonStream.read();\n      }\n\n      daemonStream.shutdown();\n\n      Tuple tuple = daemonStream.read();\n\n      assertTrue(tuple.EOF);\n      daemonStream.close();\n    } finally {\n      cache.close();\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n    TopicStream topicStream = new TopicStream(zkHost,\n        COLLECTIONORALIAS,\n        COLLECTIONORALIAS,\n                                              \"50000000\",\n                                              -1,\n                                              1000000, sParams);\n\n    DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n    daemonStream.setStreamContext(context);\n\n    daemonStream.open();\n\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while(count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if(count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for(int i=0; i<2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n    daemonStream.close();\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc8ecbf23873760f4072d6643a3d2e97597030","date":1555542126,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testDaemonTopicStream().mjava","sourceNew":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n      TopicStream topicStream = new TopicStream(zkHost,\n          COLLECTIONORALIAS,\n          COLLECTIONORALIAS,\n          \"50000000\",\n          -1,\n          1000000, sParams);\n\n      DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n      daemonStream.setStreamContext(context);\n\n      daemonStream.open();\n      CheckDaemonStream(context, daemonStream);\n\n      // We should get an error if we try to open an already-open stream.\n      final IOException ex = expectThrows(IOException.class, () -> {\n        daemonStream.open();\n      });\n      assertEquals(\"Should have an intelligible exception message\", ex.getMessage(), \"There is already an open daemon named 'daemon1', no action taken.\");\n      daemonStream.close();\n\n      // We should be able to close then re-open the stream, then close it again, see SOLR-13408\n      daemonStream.open();\n      CheckDaemonStream(context, daemonStream);\n      daemonStream.close();\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDaemonTopicStream() throws Exception {\n    Assume.assumeTrue(!useAlias);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"a_s:hello0\", \"rows\", \"500\", \"fl\", \"id\");\n\n      TopicStream topicStream = new TopicStream(zkHost,\n          COLLECTIONORALIAS,\n          COLLECTIONORALIAS,\n          \"50000000\",\n          -1,\n          1000000, sParams);\n\n      DaemonStream daemonStream = new DaemonStream(topicStream, \"daemon1\", 1000, 500);\n      daemonStream.setStreamContext(context);\n\n      daemonStream.open();\n\n      // Wait for the checkpoint\n      JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n\n      SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n      int count = 0;\n      while (count == 0) {\n        SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n        solrStream.setStreamContext(context);\n        List<Tuple> tuples = getTuples(solrStream);\n        count = tuples.size();\n        if (count > 0) {\n          Tuple t = tuples.get(0);\n          assertTrue(t.getLong(\"id\") == 50000000);\n        } else {\n          System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n        }\n      }\n\n      new UpdateRequest()\n          .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n          .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n          .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n          .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 5; i++) {\n        daemonStream.read();\n      }\n\n      new UpdateRequest()\n          .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n          .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n      for (int i = 0; i < 2; i++) {\n        daemonStream.read();\n      }\n\n      daemonStream.shutdown();\n\n      Tuple tuple = daemonStream.read();\n\n      assertTrue(tuple.EOF);\n      daemonStream.close();\n    } finally {\n      cache.close();\n    }\n\n\n  }\n\n","bugFix":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4","b940572a59da1b42b6c20ab5278155b12816807a","d4b847eda61b25b7a07da480ee8255e33d28134a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["d4b847eda61b25b7a07da480ee8255e33d28134a","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"915201312eef398482b3dffe8a297e1809f3b29a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d4b847eda61b25b7a07da480ee8255e33d28134a":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"b940572a59da1b42b6c20ab5278155b12816807a":["d4b847eda61b25b7a07da480ee8255e33d28134a"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","915201312eef398482b3dffe8a297e1809f3b29a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["d4b847eda61b25b7a07da480ee8255e33d28134a","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["d4b847eda61b25b7a07da480ee8255e33d28134a","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5fc8ecbf23873760f4072d6643a3d2e97597030"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"915201312eef398482b3dffe8a297e1809f3b29a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"d4b847eda61b25b7a07da480ee8255e33d28134a":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["915201312eef398482b3dffe8a297e1809f3b29a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["d4b847eda61b25b7a07da480ee8255e33d28134a"],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}