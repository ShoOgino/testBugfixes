{"path":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,int,String,String[],Callback).mjava","commits":[{"id":"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc","date":1131138902,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,int,String,String[],Callback).mjava","pathOld":"/dev/null","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery();\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 7) q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      else q = randBoolQuery(rnd, level-1, field, vals, cb);\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) occur=BooleanClause.Occur.MUST_NOT;\n      else if (r<5) occur=BooleanClause.Occur.MUST;\n      else occur=BooleanClause.Occur.SHOULD;\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c5acdb258c6bd528d6621dff57b340f4bfae49c","date":1131646450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,int,String,String[],Callback).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 7) q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      else q = randBoolQuery(rnd, level-1, field, vals, cb);\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) occur=BooleanClause.Occur.MUST_NOT;\n      else if (r<5) occur=BooleanClause.Occur.MUST;\n      else occur=BooleanClause.Occur.SHOULD;\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery();\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 7) q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      else q = randBoolQuery(rnd, level-1, field, vals, cb);\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) occur=BooleanClause.Occur.MUST_NOT;\n      else if (r<5) occur=BooleanClause.Occur.MUST;\n      else occur=BooleanClause.Occur.SHOULD;\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97358022f8fb21ca48fc5f2eb205c98a484e2174","date":1255525101,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 7) q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      else q = randBoolQuery(rnd, level-1, field, vals, cb);\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) occur=BooleanClause.Occur.MUST_NOT;\n      else if (r<5) occur=BooleanClause.Occur.MUST;\n      else occur=BooleanClause.Occur.SHOULD;\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97358022f8fb21ca48fc5f2eb205c98a484e2174":["7c5acdb258c6bd528d6621dff57b340f4bfae49c"],"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c5acdb258c6bd528d6621dff57b340f4bfae49c":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97358022f8fb21ca48fc5f2eb205c98a484e2174"]},"commit2Childs":{"97358022f8fb21ca48fc5f2eb205c98a484e2174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc":["7c5acdb258c6bd528d6621dff57b340f4bfae49c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5ad5c18e239ce1e266fa045f3016ec1cb80cdc"],"7c5acdb258c6bd528d6621dff57b340f4bfae49c":["97358022f8fb21ca48fc5f2eb205c98a484e2174"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}