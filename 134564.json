{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","commits":[{"id":"0feb10cdc38728e18bd11f49da14b22e9141bcdc","date":1201897345,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"/dev/null","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f0bd5cdc0a3625f72a2d59f5b815ad6a160aa0","date":1240931573,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n      // In 3.0 this will throw InterruptedException\n      throw new RuntimeException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff031a3ed5a8cf97591566db70c38ca1198de40c","date":1240952384,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n      // In 3.0 this will throw InterruptedException\n      throw new RuntimeException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n      // In 3.0 this will throw InterruptedException\n      throw new RuntimeException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n      // In 3.0 this will throw InterruptedException\n      throw new RuntimeException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#handleMergeException(Throwable).mjava","sourceNew":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","sourceOld":"  /** Called when an exception is hit in a background merge\n   *  thread */\n  protected void handleMergeException(Throwable exc) {\n    try {\n      // When an exception is hit during merge, IndexWriter\n      // removes any partial files and then allows another\n      // merge to run.  If whatever caused the error is not\n      // transient then the exception will keep happening,\n      // so, we sleep here to avoid saturating CPU in such\n      // cases:\n      Thread.sleep(250);\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n    throw new MergePolicy.MergeException(exc, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85f0bd5cdc0a3625f72a2d59f5b815ad6a160aa0":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"ff031a3ed5a8cf97591566db70c38ca1198de40c":["85f0bd5cdc0a3625f72a2d59f5b815ad6a160aa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa4b66eb16ead894fa7130904af6ecf34331f050":["ff031a3ed5a8cf97591566db70c38ca1198de40c"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"85f0bd5cdc0a3625f72a2d59f5b815ad6a160aa0":["ff031a3ed5a8cf97591566db70c38ca1198de40c"],"ff031a3ed5a8cf97591566db70c38ca1198de40c":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["85f0bd5cdc0a3625f72a2d59f5b815ad6a160aa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}