{"path":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#getAttributeImplsIterator().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#getAttributeImplsIterator().mjava","pathOld":"backwards/src/java/org/apache/lucene/util/AttributeSource#getAttributeImplsIterator().mjava","sourceNew":"  /** Returns a new iterator that iterates all unique Attribute implementations.\n   * This iterator may contain less entries that {@link #getAttributeClassesIterator},\n   * if one instance implements more than one Attribute interface.\n   */\n  public Iterator<AttributeImpl> getAttributeImplsIterator() {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      final State initState = currentState;\n      return new Iterator<AttributeImpl>() {\n        private State state = initState;\n      \n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n        \n        public AttributeImpl next() {\n          if (state == null)\n            throw new NoSuchElementException();\n          final AttributeImpl att = state.attribute;\n          state = state.next;\n          return att;\n        }\n        \n        public boolean hasNext() {\n          return state != null;\n        }\n      };\n    } else {\n      return Collections.<AttributeImpl>emptySet().iterator();\n    }\n  }\n\n","sourceOld":"  /** Returns a new iterator that iterates all unique Attribute implementations.\n   * This iterator may contain less entries that {@link #getAttributeClassesIterator},\n   * if one instance implements more than one Attribute interface.\n   */\n  public Iterator<AttributeImpl> getAttributeImplsIterator() {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      final State initState = currentState;\n      return new Iterator<AttributeImpl>() {\n        private State state = initState;\n      \n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n        \n        public AttributeImpl next() {\n          if (state == null)\n            throw new NoSuchElementException();\n          final AttributeImpl att = state.attribute;\n          state = state.next;\n          return att;\n        }\n        \n        public boolean hasNext() {\n          return state != null;\n        }\n      };\n    } else {\n      return Collections.<AttributeImpl>emptySet().iterator();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#getAttributeImplsIterator().mjava","sourceNew":null,"sourceOld":"  /** Returns a new iterator that iterates all unique Attribute implementations.\n   * This iterator may contain less entries that {@link #getAttributeClassesIterator},\n   * if one instance implements more than one Attribute interface.\n   */\n  public Iterator<AttributeImpl> getAttributeImplsIterator() {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      final State initState = currentState;\n      return new Iterator<AttributeImpl>() {\n        private State state = initState;\n      \n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n        \n        public AttributeImpl next() {\n          if (state == null)\n            throw new NoSuchElementException();\n          final AttributeImpl att = state.attribute;\n          state = state.next;\n          return att;\n        }\n        \n        public boolean hasNext() {\n          return state != null;\n        }\n      };\n    } else {\n      return Collections.<AttributeImpl>emptySet().iterator();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}