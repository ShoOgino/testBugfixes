{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","sourceNew":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    int leadPosition = this.leadPosition;\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","sourceOld":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","sourceNew":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","sourceOld":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    int leadPosition = this.leadPosition;\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#startPosition().mjava","sourceNew":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    int leadPosition = this.leadPosition;\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","sourceOld":"  @Override\n  public int startPosition() {\n    // when a match is detected, the top postings is advanced until it has moved\n    // beyond its successor, to ensure that the match is of minimal width.  This\n    // means that we need to record the lead position before it is advanced.\n    // However, the priority queue doesn't guarantee that the top postings is in fact the\n    // earliest in the list, so we need to cycle through all terms to check.\n    // this is slow, but Matches is slow anyway...\n    for (PhrasePositions pp : phrasePositions) {\n      leadPosition = Math.min(leadPosition, pp.position + pp.offset);\n    }\n    return leadPosition;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}