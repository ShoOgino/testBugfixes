{"path":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting if there is a limit.\n    this.sort = params.getFieldBool(field, FacetParams.FACET_SORT, limit>0);\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","sourceNew":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","sourceOld":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting if there is a limit.\n    this.sort = params.getFieldBool(field, FacetParams.FACET_SORT, limit>0);\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba2bd485bcfb228fadd0d133a947f88f0cc2058d","date":1228666670,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","sourceNew":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_COUNT;\n    } else if (this.sort.equals(FacetParams.FACET_SORT_LEX_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_LEX;\n    }\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","sourceOld":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","sourceNew":"  private void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_COUNT;\n    } else if (this.sort.equals(FacetParams.FACET_SORT_LEX_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_LEX;\n    }\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","sourceOld":"  void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_COUNT;\n    } else if (this.sort.equals(FacetParams.FACET_SORT_LEX_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_LEX;\n    }\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1161f19bd84204b140d97fea16ff621e86ce7ab4","date":1235924971,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacet[FacetComponent]#fillParams(SolrParams,String).mjava","sourceNew":"  private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n    this.field = field;\n    this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n    if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_COUNT;\n    } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_INDEX;\n    }\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","sourceOld":"  private void fillParams(SolrParams params, String field) {\n    this.field = field;\n    this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n    this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n    Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n    if (mincount==null) {\n      Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n      // mincount = (zeros!=null && zeros) ? 0 : 1;\n      mincount = (zeros!=null && !zeros) ? 1 : 0;\n      // current default is to include zeros.\n    }\n    this.minCount = mincount;\n    this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n    // default to sorting by count if there is a limit.\n    this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_LEX);\n    if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_COUNT;\n    } else if (this.sort.equals(FacetParams.FACET_SORT_LEX_LEGACY)) {\n      this.sort = FacetParams.FACET_SORT_LEX;\n    }\n    this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["ba2bd485bcfb228fadd0d133a947f88f0cc2058d"],"ba2bd485bcfb228fadd0d133a947f88f0cc2058d":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"1161f19bd84204b140d97fea16ff621e86ce7ab4":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"ba2bd485bcfb228fadd0d133a947f88f0cc2058d":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["ba2bd485bcfb228fadd0d133a947f88f0cc2058d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1161f19bd84204b140d97fea16ff621e86ce7ab4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}