{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","commits":[{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (4+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (4+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96eb3a8dfc7a77ec7e482c2c00272d0b428441b6","date":1398951151,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    long indexFP = indexStream.getFilePointer();\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexFP)\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexFP + \" (wrote numDocs=\" + ((indexFP-HEADER_LENGTH_IDX)/8.0) + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexStream.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexStream.getFilePointer() + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    long indexFP = indexStream.getFilePointer();\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexFP)\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexFP + \" (wrote numDocs=\" + ((indexFP-HEADER_LENGTH_IDX)/8.0) + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) {\n    long indexFP = indexStream.getFilePointer();\n    if (HEADER_LENGTH_IDX+((long) numDocs)*8 != indexFP)\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"fdx size mismatch: docCount is \" + numDocs + \" but fdx file size is \" + indexFP + \" (wrote numDocs=\" + ((indexFP-HEADER_LENGTH_IDX)/8.0) + \" file=\" + indexStream.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3599646b4d4c346cf74d334813488b8b337b5bf5"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"96eb3a8dfc7a77ec7e482c2c00272d0b428441b6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["96eb3a8dfc7a77ec7e482c2c00272d0b428441b6"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["3599646b4d4c346cf74d334813488b8b337b5bf5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076","3599646b4d4c346cf74d334813488b8b337b5bf5"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"96eb3a8dfc7a77ec7e482c2c00272d0b428441b6":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","96eb3a8dfc7a77ec7e482c2c00272d0b428441b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}