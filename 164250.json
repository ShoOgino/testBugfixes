{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","commits":[{"id":"2062967ab57824b59d116b38d53d2058ac7e4592","date":1367320813,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7","date":1369910219,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","sourceNew":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":["2062967ab57824b59d116b38d53d2058ac7e4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","sourceNew":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n      \n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n      requests.add(new RangeSet(rfr.ranges, fr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(List[FacetRequest]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#RangeAccumulator(FacetSearchParams,IndexReader).mjava","sourceNew":"  public RangeAccumulator(List<FacetRequest> facetRequests) {\n    super(new FacetSearchParams(facetRequests));\n    for (FacetRequest fr : facetRequests) {\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"this accumulator only supports RangeFacetRequest; got \" + fr);\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n      \n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n      requests.add(new RangeSet(rfr.ranges, fr.categoryPath.components[0]));\n    }\n  }\n\n","sourceOld":"  public RangeAccumulator(FacetSearchParams fsp, IndexReader reader) {\n    super(fsp, reader, null, null);\n\n    for(FacetRequest fr : fsp.facetRequests) {\n\n      if (!(fr instanceof RangeFacetRequest)) {\n        throw new IllegalArgumentException(\"only RangeFacetRequest is supported; got \" + fsp.facetRequests.get(0).getClass());\n      }\n\n      if (fr.categoryPath.length != 1) {\n        throw new IllegalArgumentException(\"only flat (dimension only) CategoryPath is allowed\");\n      }\n\n      RangeFacetRequest<?> rfr = (RangeFacetRequest<?>) fr;\n\n      requests.add(new RangeSet(rfr.ranges, rfr.categoryPath.components[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2062967ab57824b59d116b38d53d2058ac7e4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["2062967ab57824b59d116b38d53d2058ac7e4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"2062967ab57824b59d116b38d53d2058ac7e4592":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2062967ab57824b59d116b38d53d2058ac7e4592"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}