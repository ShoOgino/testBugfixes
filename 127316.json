{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoMBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoMBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoMBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4faf5124b4b354fe3f62334db03e25aef2098617","date":1501582472,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs, null);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"889865904ccb84e97569ba35ada9860df9ae6f0d","date":1502460448,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(), SolrClusterReporter.class.getName(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd13420bd0311011f8c8f57b29d9b0bbf5384b45","date":1506090747,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c578e90a08fcd7e23e2d77b3063b95a0f6775bae","date":1506091076,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load node reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        SolrMetricReporter reporter = loadReporter(registryName, cc.getResourceLoader(), info, null);\n        ((SolrClusterReporter)reporter).setCoreContainer(cc);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#loadClusterReporters(PluginInfo[],CoreContainer).mjava","sourceNew":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo={}\", info, e);\n      }\n    }\n  }\n\n","sourceOld":"  public void loadClusterReporters(PluginInfo[] pluginInfos, CoreContainer cc) {\n    // don't load for non-cloud instances\n    if (!cc.isZooKeeperAware()) {\n      return;\n    }\n    Map<String, String> attrs = new HashMap<>();\n    attrs.put(\"name\", \"clusterDefault\");\n    attrs.put(\"group\", SolrInfoBean.Group.cluster.toString());\n    Map<String, Object> initArgs = new HashMap<>();\n    initArgs.put(\"period\", DEFAULT_CLOUD_REPORTER_PERIOD);\n    List<PluginInfo> infos = prepareCloudPlugins(pluginInfos, SolrInfoBean.Group.cluster.toString(),\n        attrs, initArgs);\n    String registryName = getRegistryName(SolrInfoBean.Group.cluster);\n    for (PluginInfo info : infos) {\n      try {\n        loadReporter(registryName, cc, info);\n      } catch (Exception e) {\n        log.warn(\"Could not load cluster reporter, pluginInfo=\" + info, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["c578e90a08fcd7e23e2d77b3063b95a0f6775bae"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["4faf5124b4b354fe3f62334db03e25aef2098617","889865904ccb84e97569ba35ada9860df9ae6f0d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4faf5124b4b354fe3f62334db03e25aef2098617"],"889865904ccb84e97569ba35ada9860df9ae6f0d":["4faf5124b4b354fe3f62334db03e25aef2098617"],"c578e90a08fcd7e23e2d77b3063b95a0f6775bae":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b","cd13420bd0311011f8c8f57b29d9b0bbf5384b45"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","c578e90a08fcd7e23e2d77b3063b95a0f6775bae"],"cd13420bd0311011f8c8f57b29d9b0bbf5384b45":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"4faf5124b4b354fe3f62334db03e25aef2098617":["816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["f90f26c648df8320685eb76fec8bb9972e1994c4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["9df8125ba9193a2e2e285ed92157810b1952a244"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["c578e90a08fcd7e23e2d77b3063b95a0f6775bae","cd13420bd0311011f8c8f57b29d9b0bbf5384b45","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"816521ebaad5add9cb96bb88c577394e2938c40b":["4faf5124b4b354fe3f62334db03e25aef2098617"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"c578e90a08fcd7e23e2d77b3063b95a0f6775bae":["f90f26c648df8320685eb76fec8bb9972e1994c4","6240b74b884c5587f2a4062dd27d6c32bf228889"],"889865904ccb84e97569ba35ada9860df9ae6f0d":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"cd13420bd0311011f8c8f57b29d9b0bbf5384b45":["c578e90a08fcd7e23e2d77b3063b95a0f6775bae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"4faf5124b4b354fe3f62334db03e25aef2098617":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","889865904ccb84e97569ba35ada9860df9ae6f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}