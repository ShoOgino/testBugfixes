{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","commits":[{"id":"aec1849055a2ada9ab66fe871645565085cd5462","date":1400041327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"/dev/null","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary;\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["38bbc20b9f0152f78a6f08c072856630e9b89fa1","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"/dev/null","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary;\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"/dev/null","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary;\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRef binary = new BytesRef();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary;\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","bugFix":["aec1849055a2ada9ab66fe871645565085cd5462"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f932d2f40e796e652d4b3f45ad3761dcc37b01f0","date":1433851536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n\n    FieldType fieldType = field.getType();\n\n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n\n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n\n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9677c893edb04511e12413f7ec730c857c5a2483","date":1433854246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n\n    FieldType fieldType = field.getType();\n\n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n\n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n\n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38bbc20b9f0152f78a6f08c072856630e9b89fa1","date":1571567239,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","sourceNew":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(Utils.OBJECT_TO_STRING.apply(original.groupValue.toObject()), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(original.groupValue.toString(), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<BytesRef>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<BytesRef>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","bugFix":["aec1849055a2ada9ab66fe871645565085cd5462"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/command/GroupConverter#fromMutable(SchemaField,TopGroups[MutableValue]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n\n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(Utils.OBJECT_TO_STRING.apply(original.groupValue.toObject()), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","sourceOld":"  static TopGroups<BytesRef> fromMutable(SchemaField field, TopGroups<MutableValue> values) {\n    if (values == null) {\n      return null;\n    }\n    \n    FieldType fieldType = field.getType();\n    \n    @SuppressWarnings(\"unchecked\")\n    GroupDocs<BytesRef> groupDocs[] = new GroupDocs[values.groups.length];\n    \n    for (int i = 0; i < values.groups.length; i++) {\n      GroupDocs<MutableValue> original = values.groups[i];\n      final BytesRef groupValue;\n      if (original.groupValue.exists) {\n        BytesRefBuilder binary = new BytesRefBuilder();\n        fieldType.readableToIndexed(Utils.OBJECT_TO_STRING.apply(original.groupValue.toObject()), binary);\n        groupValue = binary.get();\n      } else {\n        groupValue = null;\n      }\n      groupDocs[i] = new GroupDocs<>(original.score, original.maxScore, original.totalHits, original.scoreDocs, groupValue, original.groupSortValues);\n    }\n    \n    return new TopGroups<>(values.groupSort, values.withinGroupSort, values.totalHitCount, values.totalGroupedHitCount, groupDocs, values.maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9677c893edb04511e12413f7ec730c857c5a2483":["f932d2f40e796e652d4b3f45ad3761dcc37b01f0"],"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["9677c893edb04511e12413f7ec730c857c5a2483"],"aec1849055a2ada9ab66fe871645565085cd5462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aec1849055a2ada9ab66fe871645565085cd5462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f932d2f40e796e652d4b3f45ad3761dcc37b01f0":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"9677c893edb04511e12413f7ec730c857c5a2483":["38bbc20b9f0152f78a6f08c072856630e9b89fa1"],"38bbc20b9f0152f78a6f08c072856630e9b89fa1":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"aec1849055a2ada9ab66fe871645565085cd5462":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aec1849055a2ada9ab66fe871645565085cd5462","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"f932d2f40e796e652d4b3f45ad3761dcc37b01f0":["9677c893edb04511e12413f7ec730c857c5a2483"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f932d2f40e796e652d4b3f45ad3761dcc37b01f0"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}