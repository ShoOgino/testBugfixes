{"path":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","commits":[{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"/dev/null","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    if (rctx.getReturnFields().wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = rctx.getReturnFields().getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        dvFieldsToReturn = rctx.getSearcher().getNonStoredDVs(true);\n      } else {\n        dvFieldsToReturn = new HashSet<>(rctx.getSearcher().getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (rctx.getSearcher().getNonStoredDVs(false).contains(fl)) {\n            dvFieldsToReturn.add(fl);\n          }\n        }\n      }\n    } else {\n      if (rctx.getReturnFields().hasPatternMatching()) {\n        for (String s : rctx.getSearcher().getNonStoredDVs(true)) {\n          if (rctx.getReturnFields().wantsField(s)) {\n            if (null == dvFieldsToReturn) {\n              dvFieldsToReturn = new HashSet<>();\n            }\n            dvFieldsToReturn.add(s);\n          }\n        }\n      } else if (fnames != null) {\n        dvFieldsToReturn = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        dvFieldsToReturn.retainAll(rctx.getSearcher().getNonStoredDVs(false));\n      }\n    }\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    //TODO move onlyPseudoFields calc to ReturnFields\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    docFetcher = rctx.getSearcher().getDocFetcher();\n    dvFieldsToReturn = calcDocValueFieldsForReturn(docFetcher, rctx.getReturnFields());\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    if (rctx.getReturnFields().wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = rctx.getReturnFields().getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        dvFieldsToReturn = rctx.getSearcher().getNonStoredDVs(true);\n      } else {\n        dvFieldsToReturn = new HashSet<>(rctx.getSearcher().getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (rctx.getSearcher().getNonStoredDVs(false).contains(fl)) {\n            dvFieldsToReturn.add(fl);\n          }\n        }\n      }\n    } else {\n      if (rctx.getReturnFields().hasPatternMatching()) {\n        for (String s : rctx.getSearcher().getNonStoredDVs(true)) {\n          if (rctx.getReturnFields().wantsField(s)) {\n            if (null == dvFieldsToReturn) {\n              dvFieldsToReturn = new HashSet<>();\n            }\n            dvFieldsToReturn.add(s);\n          }\n        }\n      } else if (fnames != null) {\n        dvFieldsToReturn = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        dvFieldsToReturn.retainAll(rctx.getSearcher().getNonStoredDVs(false));\n      }\n    }\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    //TODO move onlyPseudoFields calc to ReturnFields\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    docFetcher = rctx.getSearcher().getDocFetcher();\n    dvFieldsToReturn = calcDocValueFieldsForReturn(docFetcher, rctx.getReturnFields());\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    if (rctx.getReturnFields().wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = rctx.getReturnFields().getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        dvFieldsToReturn = rctx.getSearcher().getNonStoredDVs(true);\n      } else {\n        dvFieldsToReturn = new HashSet<>(rctx.getSearcher().getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (rctx.getSearcher().getNonStoredDVs(false).contains(fl)) {\n            dvFieldsToReturn.add(fl);\n          }\n        }\n      }\n    } else {\n      if (rctx.getReturnFields().hasPatternMatching()) {\n        for (String s : rctx.getSearcher().getNonStoredDVs(true)) {\n          if (rctx.getReturnFields().wantsField(s)) {\n            if (null == dvFieldsToReturn) {\n              dvFieldsToReturn = new HashSet<>();\n            }\n            dvFieldsToReturn.add(s);\n          }\n        }\n      } else if (fnames != null) {\n        dvFieldsToReturn = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        dvFieldsToReturn.retainAll(rctx.getSearcher().getNonStoredDVs(false));\n      }\n    }\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","date":1505775734,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    docFetcher = rctx.getSearcher().getDocFetcher();\n\n    retrieveFieldsOptimizer = RetrieveFieldsOptimizer.create(docFetcher, rctx.getReturnFields());\n    retrieveFieldsOptimizer.optimize(docFetcher);\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    //TODO move onlyPseudoFields calc to ReturnFields\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    docFetcher = rctx.getSearcher().getDocFetcher();\n    dvFieldsToReturn = calcDocValueFieldsForReturn(docFetcher, rctx.getReturnFields());\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    docFetcher = rctx.getSearcher().getDocFetcher();\n\n    retrieveFieldsOptimizer = RetrieveFieldsOptimizer.create(docFetcher, rctx.getReturnFields());\n    retrieveFieldsOptimizer.optimize(docFetcher);\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    fnames = rctx.getReturnFields().getLuceneFieldNames();\n    //TODO move onlyPseudoFields calc to ReturnFields\n    onlyPseudoFields = (fnames == null && !rctx.getReturnFields().wantsAllFields() && !rctx.getReturnFields().hasPatternMatching())\n        || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n\n    // add non-stored DV fields that may have been requested\n    docFetcher = rctx.getSearcher().getDocFetcher();\n    dvFieldsToReturn = calcDocValueFieldsForReturn(docFetcher, rctx.getReturnFields());\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#DocsStreamer(ResultContext).mjava","sourceNew":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    docFetcher = rctx.getSearcher().getDocFetcher();\n    solrReturnFields = (SolrReturnFields)rctx.getReturnFields();\n\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","sourceOld":"  public DocsStreamer(ResultContext rctx) {\n    this.rctx = rctx;\n    this.docs = rctx.getDocList();\n    transformer = rctx.getReturnFields().getTransformer();\n    docIterator = this.docs.iterator();\n    docFetcher = rctx.getSearcher().getDocFetcher();\n\n    retrieveFieldsOptimizer = RetrieveFieldsOptimizer.create(docFetcher, rctx.getReturnFields());\n    retrieveFieldsOptimizer.optimize(docFetcher);\n    if (transformer != null) transformer.setContext(rctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["de548de3ce5405595899f548152d4b93ac9eb9cc","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["bdac0dff04219451c7511d62225080a93a0181ea"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["bdac0dff04219451c7511d62225080a93a0181ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdac0dff04219451c7511d62225080a93a0181ea":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ecd141e96e7a7a65822d7fada5ddc585b21149"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"de548de3ce5405595899f548152d4b93ac9eb9cc":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["96ecd141e96e7a7a65822d7fada5ddc585b21149","04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"bdac0dff04219451c7511d62225080a93a0181ea":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["bdac0dff04219451c7511d62225080a93a0181ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}