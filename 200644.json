{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","commits":[{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      synchronized(openFiles) {\n        if (noDeleteOpenFile && openFiles.containsKey(name)) {\n          throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n        }\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1","c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6","date":1205349797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      synchronized(openFiles) {\n        if (noDeleteOpenFile && openFiles.containsKey(name)) {\n          throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n        }\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      synchronized(openFiles) {\n        if (noDeleteOpenFile && openFiles.containsKey(name)) {\n          throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n        }\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65000dee855f8d7329bd4f6310cb44af4d63bd3","date":1242673652,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      synchronized(openFiles) {\n        if (noDeleteOpenFile && openFiles.containsKey(name)) {\n          throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n        }\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#deleteFile(String,boolean).mjava","sourceNew":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","sourceOld":"  private synchronized void deleteFile(String name, boolean forced) throws IOException {\n\n    maybeThrowDeterministicException();\n\n    if (crashed && !forced)\n      throw new IOException(\"cannot delete after crash\");\n\n    if (unSyncedFiles.contains(name))\n      unSyncedFiles.remove(name);\n    if (!forced) {\n      if (noDeleteOpenFile && openFiles.containsKey(name)) {\n        throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot delete\");\n      }\n    }\n    super.deleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"e82780afe6097066eb5befb86e9432f077667e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"]},"commit2Childs":{"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["c65000dee855f8d7329bd4f6310cb44af4d63bd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82780afe6097066eb5befb86e9432f077667e3d"],"c65000dee855f8d7329bd4f6310cb44af4d63bd3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e82780afe6097066eb5befb86e9432f077667e3d":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}