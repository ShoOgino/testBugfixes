{"path":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","commits":[{"id":"4513731041236fcf659e5bfc43d8862e1721a310","date":1504022253,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      /*\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n      */\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    /*\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n    */\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6028626aa0f7c266ef725110257eed11e5b3d1d7","date":1504104056,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      /*\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n      */\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    /*\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n    */\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e439676a588536b3203fc216416f4e57dcff8f3d","date":1504173805,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      /*\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n      */\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    /*\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n    */\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df00ac20ec618ed997bacca597432d686193362d","date":1504183645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      /*\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n      */\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    /*\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n    */\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7","date":1509555533,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongValueFacetCounts#getAllChildrenSortByValue().mjava","sourceNew":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int[] hashCounts = new int[this.hashCounts.size()];\n    long[] hashValues = new long[this.hashCounts.size()];\n    \n    int upto = 0;\n    for (LongIntCursor c : this.hashCounts) {\n      if (c.value != 0) {\n        hashCounts[upto] = c.value;\n        hashValues[upto] = c.key;\n        upto++;\n      }\n    }\n\n    assert upto == this.hashCounts.size() : \"upto=\" + upto + \" hashCounts.size=\" + this.hashCounts.size();\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashValues[i], hashValues[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts[i];\n        hashCounts[i] = hashCounts[j];\n        hashCounts[j] = x;\n\n        long y = hashValues[j];\n        hashValues[j] = hashValues[i];\n        hashValues[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      if (countsAdded == false && hashValues[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n\n      labelValues.add(new LabelAndValue(Long.toString(hashValues[i]),\n                                        hashCounts[i]));\n    }\n\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","sourceOld":"  /** Returns all unique values seen, sorted by value.  */\n  public FacetResult getAllChildrenSortByValue() {\n    List<LabelAndValue> labelValues = new ArrayList<>();\n\n    // compact & sort hash table's arrays by value\n    int upto = 0;\n    for (int i = 0; i < hashCounts.values.length; i++) {\n      if (hashCounts.counts[i] != 0) {\n        hashCounts.counts[upto] = hashCounts.counts[i];\n        hashCounts.values[upto] = hashCounts.values[i];\n        upto++;\n      }\n    }\n\n    // zero fill all remaining counts so if we are called again we don't mistake these as real values\n    Arrays.fill(hashCounts.counts, upto, hashCounts.counts.length, 0);\n\n    assert upto == hashCounts.size : \"upto=\" + upto + \" hashCounts.size=\" + hashCounts.size;\n\n    new InPlaceMergeSorter() {\n      @Override\n      public int compare(int i, int j) {\n        return Long.compare(hashCounts.values[i], hashCounts.values[j]);\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int x = hashCounts.counts[i];\n        hashCounts.counts[i] = hashCounts.counts[j];\n        hashCounts.counts[j] = x;\n\n        long y = hashCounts.values[j];\n        hashCounts.values[j] = hashCounts.values[i];\n        hashCounts.values[i] = y;\n      }\n    }.sort(0, upto);\n\n    boolean countsAdded = false;\n    for (int i = 0; i < upto; i++) {\n      if (countsAdded == false && hashCounts.values[i] >= counts.length) {\n        countsAdded = true;\n        appendCounts(labelValues);\n      }\n\n      labelValues.add(new LabelAndValue(Long.toString(hashCounts.values[i]),\n                                        hashCounts.counts[i]));\n    }\n\n    if (countsAdded == false) {\n      appendCounts(labelValues);\n    }\n\n    return new FacetResult(field, new String[0], totCount, labelValues.toArray(new LabelAndValue[0]), labelValues.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df00ac20ec618ed997bacca597432d686193362d":["6028626aa0f7c266ef725110257eed11e5b3d1d7","e439676a588536b3203fc216416f4e57dcff8f3d"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4513731041236fcf659e5bfc43d8862e1721a310"],"4513731041236fcf659e5bfc43d8862e1721a310":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df00ac20ec618ed997bacca597432d686193362d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e439676a588536b3203fc216416f4e57dcff8f3d":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["df00ac20ec618ed997bacca597432d686193362d"]},"commit2Childs":{"df00ac20ec618ed997bacca597432d686193362d":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["df00ac20ec618ed997bacca597432d686193362d","e439676a588536b3203fc216416f4e57dcff8f3d"],"4513731041236fcf659e5bfc43d8862e1721a310":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6028626aa0f7c266ef725110257eed11e5b3d1d7","4513731041236fcf659e5bfc43d8862e1721a310","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"e439676a588536b3203fc216416f4e57dcff8f3d":["df00ac20ec618ed997bacca597432d686193362d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}