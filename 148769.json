{"path":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"555fcbaea39f68bc5c24b8a94fb024bb5dea3655","date":1429078520,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n    String field = params.get(\"f\");\n    if(Strings.isNullOrEmpty(field)) {\n      field = display;\n    }\n    // When a 'wt' is specified in the transformer, only apply it to the same wt\n    boolean apply = true;\n    if(applyToWT!=null) {\n      String qwt = req.getParams().get(CommonParams.WT);\n      if(qwt==null) {\n        QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n        QueryResponseWriter dw = req.getCore().getQueryResponseWriter(applyToWT);\n        if(qw!=dw) {\n          apply = false;\n        }\n      }\n      else {\n        apply = applyToWT.equals(qwt);\n      }\n    }\n\n    if(apply) {\n      return new RawTransformer( field, display );\n    }\n    \n    if(field.equals(display)) {\n      return null; // nothing\n    }\n    return new RenameFieldTransformer( field, display, false );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b5d3613911d665344055ef7970e1783b3348b5c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5d3613911d665344055ef7970e1783b3348b5c0","date":1521487734,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n    String field = params.get(\"f\");\n    if(Strings.isNullOrEmpty(field)) {\n      field = display;\n    }\n    // When a 'wt' is specified in the transformer, only apply it to the same wt\n    boolean apply = true;\n    if(applyToWT!=null) {\n      String qwt = req.getParams().get(CommonParams.WT);\n      if(qwt==null) {\n        QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n        QueryResponseWriter dw = req.getCore().getQueryResponseWriter(applyToWT);\n        if(qw!=dw) {\n          apply = false;\n        }\n      }\n      else {\n        apply = applyToWT.equals(qwt);\n      }\n    }\n\n    if(apply) {\n      return new RawTransformer( field, display );\n    }\n    \n    if (field.equals(display)) {\n      // we have to ensure the field is returned\n      return new NoopFieldTransformer(field);\n    }\n    return new RenameFieldTransformer( field, display, false );\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n    String field = params.get(\"f\");\n    if(Strings.isNullOrEmpty(field)) {\n      field = display;\n    }\n    // When a 'wt' is specified in the transformer, only apply it to the same wt\n    boolean apply = true;\n    if(applyToWT!=null) {\n      String qwt = req.getParams().get(CommonParams.WT);\n      if(qwt==null) {\n        QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n        QueryResponseWriter dw = req.getCore().getQueryResponseWriter(applyToWT);\n        if(qw!=dw) {\n          apply = false;\n        }\n      }\n      else {\n        apply = applyToWT.equals(qwt);\n      }\n    }\n\n    if(apply) {\n      return new RawTransformer( field, display );\n    }\n    \n    if(field.equals(display)) {\n      return null; // nothing\n    }\n    return new RenameFieldTransformer( field, display, false );\n  }\n\n","bugFix":["555fcbaea39f68bc5c24b8a94fb024bb5dea3655"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"373ea6b2f051d2a56e8e78a5da11de7aa52ed399","date":1536159014,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/RawValueTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n    String field = params.get(\"f\");\n    if(Strings.isNullOrEmpty(field)) {\n      field = display;\n    }\n    // When a 'wt' is specified in the transformer, only apply it to the same wt\n    boolean apply = true;\n    if(applyToWT!=null) {\n      String qwt = req.getParams().get(CommonParams.WT);\n      if(qwt==null) {\n        QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n        QueryResponseWriter dw = req.getCore().getQueryResponseWriter(applyToWT);\n        if(qw!=dw) {\n          apply = false;\n        }\n      }\n      else {\n        apply = applyToWT.equals(qwt);\n      }\n    }\n\n    if(apply) {\n      return new RawTransformer( field, display );\n    }\n    \n    if (field.equals(display)) {\n      // we have to ensure the field is returned\n      return new DocTransformer.NoopFieldTransformer(field);\n    }\n    return new RenameFieldTransformer( field, display, false );\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n    String field = params.get(\"f\");\n    if(Strings.isNullOrEmpty(field)) {\n      field = display;\n    }\n    // When a 'wt' is specified in the transformer, only apply it to the same wt\n    boolean apply = true;\n    if(applyToWT!=null) {\n      String qwt = req.getParams().get(CommonParams.WT);\n      if(qwt==null) {\n        QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n        QueryResponseWriter dw = req.getCore().getQueryResponseWriter(applyToWT);\n        if(qw!=dw) {\n          apply = false;\n        }\n      }\n      else {\n        apply = applyToWT.equals(qwt);\n      }\n    }\n\n    if(apply) {\n      return new RawTransformer( field, display );\n    }\n    \n    if (field.equals(display)) {\n      // we have to ensure the field is returned\n      return new NoopFieldTransformer(field);\n    }\n    return new RenameFieldTransformer( field, display, false );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d3613911d665344055ef7970e1783b3348b5c0":["555fcbaea39f68bc5c24b8a94fb024bb5dea3655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["b5d3613911d665344055ef7970e1783b3348b5c0"],"555fcbaea39f68bc5c24b8a94fb024bb5dea3655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"]},"commit2Childs":{"b5d3613911d665344055ef7970e1783b3348b5c0":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["555fcbaea39f68bc5c24b8a94fb024bb5dea3655"],"555fcbaea39f68bc5c24b8a94fb024bb5dea3655":["b5d3613911d665344055ef7970e1783b3348b5c0"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}