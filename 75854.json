{"path":"src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","pathOld":"src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    rand = newRandom();\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":"  public void testEquals() {\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","pathOld":"src/test/org/apache/lucene/util/TestOpenBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    rand = newRandom();\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","sourceOld":"  public void testEquals() {\n    rand = newRandom();\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(new Object()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cb1066f2afe9450585d0d10063ea4450085236f1"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}