{"path":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","63c3b81be29df3abe3b6c0446b054f7f52576091","63c3b81be29df3abe3b6c0446b054f7f52576091"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(r.fields().terms(\"field\"));\n      } else {\n        Terms terms = r.fields().terms(\"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seek(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seek(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, te.seek((long) buffer[idx]));\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + prefixRef.utf8ToString());\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\");\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator();\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), termsEnum.term().startsWith(prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicIndexReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicIndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["382fe3a6ca9745891afebda9b9a57cc158305545"],"2553b00f699380c64959ccb27991289aae87be2e":["79c2cb24929f2649a8875fb629086171f914d5ce","fd9cc9d77712aba3662f24632df7539ab75e3667"],"382fe3a6ca9745891afebda9b9a57cc158305545":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","fd9cc9d77712aba3662f24632df7539ab75e3667"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","868186558eb3a854ce7e720a52bb445795d54910"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"868186558eb3a854ce7e720a52bb445795d54910":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["d083e83f225b11e5fdd900e83d26ddb385b6955c","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","fd9cc9d77712aba3662f24632df7539ab75e3667"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3cc749c053615f5871f3b95715fe292f34e70a53":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"2553b00f699380c64959ccb27991289aae87be2e":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["3cc749c053615f5871f3b95715fe292f34e70a53"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["382fe3a6ca9745891afebda9b9a57cc158305545"],"79c2cb24929f2649a8875fb629086171f914d5ce":["2553b00f699380c64959ccb27991289aae87be2e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","60ba444201d2570214b6fcf1d15600dc1a01f548"],"45669a651c970812a680841b97a77cce06af559f":[],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}