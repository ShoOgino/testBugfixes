{"path":"solr/core/src/java/org/apache/solr/search/SortSpecParsing#parseSortSpecImpl(String,IndexSchema,SolrQueryRequest).mjava","commits":[{"id":"2c72019fa1d825f8209f23a6897c39e6006e3027","date":1448987188,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SortSpecParsing#parseSortSpecImpl(String,IndexSchema,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private static SortSpec parseSortSpecImpl(String sortSpec, IndexSchema schema,\n      SolrQueryRequest optionalReq) {\n    if (sortSpec == null || sortSpec.length() == 0) return newEmptySortSpec();\n\n    List<SortField> sorts = new ArrayList<>(4);\n    List<SchemaField> fields = new ArrayList<>(4);\n\n    try {\n\n      StrParser sp = new StrParser(sortSpec);\n      while (sp.pos < sp.end) {\n        sp.eatws();\n\n        final int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String field = sp.getId(null);\n        Exception qParserException = null;\n\n        if ((field == null || !Character.isWhitespace(sp.peekChar())) && (optionalReq != null)) {\n          // let's try it as a function instead\n          field = null;\n          String funcStr = sp.val.substring(start);\n\n          QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, optionalReq);\n          Query q = null;\n          try {\n            if (parser instanceof FunctionQParser) {\n              FunctionQParser fparser = (FunctionQParser)parser;\n              fparser.setParseMultipleSources(false);\n              fparser.setParseToEnd(false);\n              \n              q = fparser.getQuery();\n              \n              if (fparser.localParams != null) {\n                if (fparser.valFollowedParams) {\n                  // need to find the end of the function query via the string parser\n                  int leftOver = fparser.sp.end - fparser.sp.pos;\n                  sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n                } else {\n                  // the value was via the \"v\" param in localParams, so we need to find\n                  // the end of the local params themselves to pick up where we left off\n                  sp.pos = start + fparser.localParamsEnd;\n                }\n              } else {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              }\n            } else {\n              // A QParser that's not for function queries.\n              // It must have been specified via local params.\n              q = parser.getQuery();\n\n              assert parser.getLocalParams() != null;\n              sp.pos = start + parser.localParamsEnd;\n            }\n\n            Boolean top = sp.getSortDirection();\n            if (null != top) {\n              // we have a Query and a valid direction\n              if (q instanceof FunctionQuery) {\n                sorts.add(((FunctionQuery)q).getValueSource().getSortField(top));\n              } else {\n                sorts.add((new QueryValueSource(q, 0.0f)).getSortField(top));\n              }\n              fields.add(null);\n              continue;\n            }\n          } catch (Exception e) {\n            // hang onto this in case the string isn't a full field name either\n            qParserException = e;\n          }\n        }\n\n        // if we made it here, we either have a \"simple\" field name,\n        // or there was a problem parsing the string as a complex func/quer\n\n        if (field == null) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n        }\n        Boolean top = sp.getSortDirection();\n        if (null == top) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                    \"Can't determine a Sort Order (asc or desc) in sort spec \" + sp);\n        }\n        \n        if (SCORE.equals(field)) {\n          if (top) {\n            sorts.add(SortField.FIELD_SCORE);\n          } else {\n            sorts.add(new SortField(null, SortField.Type.SCORE, true));\n          }\n          fields.add(null);\n        } else if (DOCID.equals(field)) {\n          sorts.add(new SortField(null, SortField.Type.DOC, top));\n          fields.add(null);\n        } else {\n          // try to find the field\n          SchemaField sf = schema.getFieldOrNull(field);\n          if (null == sf) {\n            if (null != qParserException) {\n              throw new SolrException\n                (SolrException.ErrorCode.BAD_REQUEST,\n                 \"sort param could not be parsed as a query, and is not a \"+\n                 \"field that exists in the index: \" + field,\n                 qParserException);\n            }\n            throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n               \"sort param field can't be found: \" + field);\n          }\n          sorts.add(sf.getSortField(top));\n          fields.add(sf);\n        }\n      }\n\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error in sort: \" + sortSpec, e);\n    }\n\n\n    // normalize a sort on score desc to null\n    if (sorts.size()==1 && sorts.get(0) == SortField.FIELD_SCORE) {\n      return newEmptySortSpec();\n    }\n\n    Sort s = new Sort(sorts.toArray(new SortField[sorts.size()]));\n    return new SortSpec(s, fields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c72019fa1d825f8209f23a6897c39e6006e3027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c72019fa1d825f8209f23a6897c39e6006e3027"]},"commit2Childs":{"2c72019fa1d825f8209f23a6897c39e6006e3027":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c72019fa1d825f8209f23a6897c39e6006e3027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}