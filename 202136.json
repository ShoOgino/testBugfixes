{"path":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":"  public static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17901785875f5d523c1f729cd7898d2ab907c69","date":1419959847,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  public static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67c440a48459a7991e838f63cba2fadb1791cd9f","date":1455531460,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":null,"sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":null,"sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":null,"sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":null,"sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":null,"sourceOld":"  public static SortingMergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    if (VERBOSE) {\n      System.out.println(\"TEST: return SortingMergePolicy(mp=\" + mp + \" sort=\" + sort + \")\");\n    }\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67c440a48459a7991e838f63cba2fadb1791cd9f":["d17901785875f5d523c1f729cd7898d2ab907c69"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["67c440a48459a7991e838f63cba2fadb1791cd9f"],"d17901785875f5d523c1f729cd7898d2ab907c69":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["67c440a48459a7991e838f63cba2fadb1791cd9f","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["67c440a48459a7991e838f63cba2fadb1791cd9f","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["67c440a48459a7991e838f63cba2fadb1791cd9f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["67c440a48459a7991e838f63cba2fadb1791cd9f","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"67c440a48459a7991e838f63cba2fadb1791cd9f":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d17901785875f5d523c1f729cd7898d2ab907c69":["67c440a48459a7991e838f63cba2fadb1791cd9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["d17901785875f5d523c1f729cd7898d2ab907c69"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}