{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","commits":[{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(CoreContainer,List).mjava","sourceNew":"  static Map<Class, SnitchInfoImpl> getSnitchInfos(SolrCloudManager cloudManager, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst =\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).newInstance() ;\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","sourceOld":"  static Map<Class, SnitchInfoImpl> getSnitchInfos(CoreContainer cc, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst = cc == null ?\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).newInstance() :\n            cc.getResourceLoader().newInstance(klas, Snitch.class);\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cc));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","sourceNew":"  static Map<Class, SnitchInfoImpl> getSnitchInfos(SolrCloudManager cloudManager, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst =\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).getConstructor().newInstance() ;\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","sourceOld":"  static Map<Class, SnitchInfoImpl> getSnitchInfos(SolrCloudManager cloudManager, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst =\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).newInstance() ;\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getSnitchInfos(SolrCloudManager,List).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static Map<Class, SnitchInfoImpl> getSnitchInfos(SolrCloudManager cloudManager, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst =\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).getConstructor().newInstance() ;\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","sourceOld":"  static Map<Class, SnitchInfoImpl> getSnitchInfos(SolrCloudManager cloudManager, List snitchConf) {\n    if (snitchConf == null) snitchConf = Collections.emptyList();\n    Map<Class, SnitchInfoImpl> snitches = new LinkedHashMap<>();\n    for (Object o : snitchConf) {\n      //instantiating explicitly specified snitches\n      String klas = null;\n      Map map = Collections.emptyMap();\n      if (o instanceof Map) {//it can be a Map\n        map = (Map) o;\n        klas = (String) map.get(\"class\");\n        if (klas == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"snitch must have  a class attribute\");\n        }\n      } else { //or just the snitch name\n        klas = o.toString();\n      }\n      try {\n        if (klas.indexOf('.') == -1) klas = Snitch.class.getPackage().getName() + \".\" + klas;\n        Snitch inst =\n            (Snitch) Snitch.class.getClassLoader().loadClass(klas).getConstructor().newInstance() ;\n        snitches.put(inst.getClass(), new SnitchInfoImpl(map, inst, cloudManager));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n\n      }\n\n    }\n    return snitches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}