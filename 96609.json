{"path":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","commits":[{"id":"b08da0118b8113cffc8f260d0a6c137013c65568","date":1494064335,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3d5f49e404387af0c20abb76ef75489cc1a748","date":1504565932,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      vs = sf.getType().getValueSource(sf, null); // temporary implementation to make existing code work\n    }\n\n    if (vs instanceof StrFieldSource) {\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"730fe41fb3af5691ad519dc6da96240c41ef187f","date":1504632797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n        case DATE:\n          return new LFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      vs = sf.getType().getValueSource(sf, null); // temporary implementation to make existing code work\n    }\n\n    if (vs instanceof StrFieldSource) {\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42c08feec7f00783a96ba7060ce10fc3cef5923c","date":1504642001,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n        case DATE:\n          return new LFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    if (vs instanceof StrFieldSource) {\n      String field = ((StrFieldSource) vs).getField();\n      SchemaField sf = fcontext.qcontext.searcher().getSchema().getField(field);\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          // dv\n        } else {\n          // uif\n        }\n      } else {\n        return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new ValSlotAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fa9270995767ab6c92b235a5a62267aa426f47d","date":1575523102,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            // multi-valued strings\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":["e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            // multi-valued strings\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        vs = null;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"min/max aggregations can't be used on multi-valued field \" + field);\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8b2f4669f58c62f64c1de0df0908bd214f1f729","date":1575782377,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            // multi-valued strings\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":["2fa9270995767ab6c92b235a5a62267aa426f47d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebdcd7cba625039937ab5b668449544f9dd36927","date":1575885354,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if(sf.getType().getNumberType() != null) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            // multi-valued strings\n            return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["b08da0118b8113cffc8f260d0a6c137013c65568","42c08feec7f00783a96ba7060ce10fc3cef5923c"],"42c08feec7f00783a96ba7060ce10fc3cef5923c":["730fe41fb3af5691ad519dc6da96240c41ef187f"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["cc3d5f49e404387af0c20abb76ef75489cc1a748"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","2fa9270995767ab6c92b235a5a62267aa426f47d"],"b08da0118b8113cffc8f260d0a6c137013c65568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ebdcd7cba625039937ab5b668449544f9dd36927":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"1c841e27891873cab110ebeb89f124a8ec470176":["e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b08da0118b8113cffc8f260d0a6c137013c65568"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["e9017cf144952056066919f1ebc7897ff9bd71b1","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["b08da0118b8113cffc8f260d0a6c137013c65568","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"cc3d5f49e404387af0c20abb76ef75489cc1a748":["b08da0118b8113cffc8f260d0a6c137013c65568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["2fa9270995767ab6c92b235a5a62267aa426f47d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"42c08feec7f00783a96ba7060ce10fc3cef5923c":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["42c08feec7f00783a96ba7060ce10fc3cef5923c"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["ebdcd7cba625039937ab5b668449544f9dd36927"],"b08da0118b8113cffc8f260d0a6c137013c65568":["b21283ed01203901a7257aa4b7f0a0899c86e56e","e9017cf144952056066919f1ebc7897ff9bd71b1","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","cc3d5f49e404387af0c20abb76ef75489cc1a748"],"ebdcd7cba625039937ab5b668449544f9dd36927":[],"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["2fa9270995767ab6c92b235a5a62267aa426f47d","a90f561fc609ec007ba18b10dea9191dbbd71831","685bd38810c206c93e9058f3c2cfa9827c086c27"],"cc3d5f49e404387af0c20abb76ef75489cc1a748":["730fe41fb3af5691ad519dc6da96240c41ef187f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b08da0118b8113cffc8f260d0a6c137013c65568","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["ebdcd7cba625039937ab5b668449544f9dd36927","1c841e27891873cab110ebeb89f124a8ec470176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ebdcd7cba625039937ab5b668449544f9dd36927","685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}