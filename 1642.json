{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    // prevent merges, otherwise by the time updates are applied\r\n    // (writer.close()), the segments might have merged and that update becomes\r\n    // legit.\r\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    // first segment with NDV\r\n    Document doc = new Document();\r\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\r\n    writer.addDocument(doc);\r\n    writer.commit();\r\n    \r\n    // second segment with no NDV\r\n    doc = new Document();\r\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\r\n    writer.addDocument(doc);\r\n    writer.commit();\r\n    \r\n    // update document in the second segment\r\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\r\n    try {\r\n      writer.close();\r\n      fail(\"should not have succeeded updating a segment with no numeric DocValues field\");\r\n    } catch (UnsupportedOperationException e) {\r\n      // expected\r\n      writer.rollback();\r\n    }\r\n    \r\n    dir.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the second segment\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded updating a segment with no numeric DocValues field\");\n    } catch (UnsupportedOperationException e) {\n      // expected\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    // prevent merges, otherwise by the time updates are applied\r\n    // (writer.close()), the segments might have merged and that update becomes\r\n    // legit.\r\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    // first segment with NDV\r\n    Document doc = new Document();\r\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\r\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\r\n    writer.addDocument(doc);\r\n    writer.commit();\r\n    \r\n    // second segment with no NDV\r\n    doc = new Document();\r\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\r\n    writer.addDocument(doc);\r\n    writer.commit();\r\n    \r\n    // update document in the second segment\r\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\r\n    try {\r\n      writer.close();\r\n      fail(\"should not have succeeded updating a segment with no numeric DocValues field\");\r\n    } catch (UnsupportedOperationException e) {\r\n      // expected\r\n      writer.rollback();\r\n    }\r\n    \r\n    dir.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the second segment\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(5L, ndv.get(i));\n      }\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the second segment\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    try {\n      writer.close();\n      fail(\"should not have succeeded updating a segment with no numeric DocValues field\");\n    } catch (UnsupportedOperationException e) {\n      // expected\n      writer.rollback();\n    }\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cff1deb788b9babb942b20707a93e1ab902ce37","date":1380805349,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 5));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the second segment\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        assertEquals(5L, ndv.get(i));\n      }\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.shutdown()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.shutdown();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : reader.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      Bits docsWithField = r.getDocsWithField(\"ndv\");\n      assertNotNull(docsWithField);\n      assertTrue(docsWithField.get(0));\n      assertEquals(5L, ndv.get(0));\n      assertFalse(docsWithField.get(1));\n      assertEquals(0L, ndv.get(1));\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testUpdateSegmentWithNoDocValues().mjava","sourceNew":"  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateSegmentWithNoDocValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    // prevent merges, otherwise by the time updates are applied\n    // (writer.close()), the segments might have merged and that update becomes\n    // legit.\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    // first segment with NDV\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"doc0\", Store.NO));\n    doc.add(new NumericDocValuesField(\"ndv\", 3));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc4\", Store.NO)); // document without 'ndv' field\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // second segment with no NDV\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc1\", Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"doc2\", Store.NO)); // document that isn't updated\n    writer.addDocument(doc);\n    writer.commit();\n    \n    // update document in the first segment - should not affect docsWithField of\n    // the document without NDV field\n    writer.updateNumericDocValue(new Term(\"id\", \"doc0\"), \"ndv\", 5L);\n    \n    // update document in the second segment - field should be added and we should\n    // be able to handle the other document correctly (e.g. no NPE)\n    writer.updateNumericDocValue(new Term(\"id\", \"doc1\"), \"ndv\", 5L);\n    writer.close();\n\n    DirectoryReader reader = DirectoryReader.open(dir);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader r = context.reader();\n      NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n      assertEquals(0, ndv.nextDoc());\n      assertEquals(5L, ndv.longValue());\n      // docID 1 has no ndv value\n      assertTrue(ndv.nextDoc() > 1);\n    }\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8435160e9702b19398118ddf76b61c846612b6a4":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1cff1deb788b9babb942b20707a93e1ab902ce37":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8435160e9702b19398118ddf76b61c846612b6a4":["1cff1deb788b9babb942b20707a93e1ab902ce37"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1cff1deb788b9babb942b20707a93e1ab902ce37":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["8435160e9702b19398118ddf76b61c846612b6a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}