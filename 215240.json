{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":null,"sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}