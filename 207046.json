{"path":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":null,"sourceOld":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","sourceOld":"  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws IOException, ParseException {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    String text = \"one +two *hree f*ur fiv* *si\\uD834\\uDD1Ex\";\n    String expectedOne = \"one:one +one:two one:\\u0001eerh* one:\\u0001ru*f one:fiv* one:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedTwo = \"two:one +two:two two:\\u0001eerh* two:\\u0001ru*f two:fiv* two:\\u0001x\\uD834\\uDD1Eis*\";\n    String expectedThree = \"three:one +three:two three:*hree three:f*ur three:fiv* three:*si\\uD834\\uDD1Ex\";\n    Query q = parserOne.parse(text);\n    assertEquals(expectedOne, q.toString());\n    q = parserTwo.parse(text);\n    assertEquals(expectedTwo, q.toString());\n    q = parserThree.parse(text);\n    assertEquals(expectedThree, q.toString());\n    // test conditional reversal\n    String condText = \"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee \" + \n        \"short*token ver*longtoken\";\n    String expected = \"two:\\u0001eerh* two:\\u0001eer*t two:\\u0001ee*ht \" +\n        \"two:thr*e \" +\n        \"two:\\u0001eerh? two:\\u0001eer?t \" +\n        \"two:th?ee \" +\n        \"two:th?*ee \" +\n        \"two:short*token \" +\n        \"two:\\u0001nekotgnol*rev\";\n    q = parserTwo.parse(condText);\n    assertEquals(expected, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48ed0466fe2d4f8ba58a47caef1174d9e856d13","date":1293745585,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    SolrQueryParser parserOne = new SolrQueryParser(schema, \"one\");\n    assertTrue(parserOne.getAllowLeadingWildcard());\n    SolrQueryParser parserTwo = new SolrQueryParser(schema, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n    SolrQueryParser parserThree = new SolrQueryParser(schema, \"three\");\n    // XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n    \n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n    \n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["85a883878c0af761245ab048babc63d099f835f3","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["afeb033b2bd36d8ce9d82142b197da4dde13068b","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["70ad682703b8585f5d0a637efec044d57ec05efb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"e48ed0466fe2d4f8ba58a47caef1174d9e856d13":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["85a883878c0af761245ab048babc63d099f835f3","e48ed0466fe2d4f8ba58a47caef1174d9e856d13","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}