{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","commits":[{"id":"c8bb0f45246d2d999b5b8b9136efd068fcece5c4","date":1308601169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (!field.omitTermFreqAndPositions) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (!field.omitTermFreqAndPositions) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (!field.omitTermFreqAndPositions) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (!field.omitTermFreqAndPositions) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e","date":1314712686,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = 0;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() throws IOException {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        if (VERBOSE) System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"7b91922b55d15444d554721b352861d028eb8278":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","c8bb0f45246d2d999b5b8b9136efd068fcece5c4","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":[],"8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e":["7b91922b55d15444d554721b352861d028eb8278"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","718f8730b97959cb87aaeadc9fafb9513f3c1bfe","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}