{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newField(fieldName, \"content1\", StringField.TYPE_STORED));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newField(fieldName, \"content2\", StringField.TYPE_STORED));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.getTopReaderContext().leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter();\n    tf.addTerm(new Term(fieldName, \"content1\"));\n    \n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      FixedBitSet bits = (FixedBitSet) tf.getDocIdSet(context, context.reader().getLiveDocs());\n      assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["edc9ac4bba51b8acbb06a7fcd75347f7fb8b10d9","61e20f33ce8ff701576366fdb03955eded5f209b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.shutdown();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.shutdown();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.shutdown();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.shutdown();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (AtomicReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitDocIdSet bits = (FixedBitDocIdSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.bits().cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitSet bits = (FixedBitSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        BitDocIdSet bits = (BitDocIdSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.bits().cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        FixedBitDocIdSet bits = (FixedBitDocIdSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.bits().cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testMissingField().mjava","sourceNew":null,"sourceOld":"  public void testMissingField() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd1 = newDirectory();\n    RandomIndexWriter w1 = new RandomIndexWriter(random(), rd1);\n    Document doc = new Document();\n    doc.add(newStringField(fieldName, \"content1\", Field.Store.YES));\n    w1.addDocument(doc);\n    IndexReader reader1 = w1.getReader();\n    w1.close();\n    \n    fieldName = \"field2\";\n    Directory rd2 = newDirectory();\n    RandomIndexWriter w2 = new RandomIndexWriter(random(), rd2);\n    doc = new Document();\n    doc.add(newStringField(fieldName, \"content2\", Field.Store.YES));\n    w2.addDocument(doc);\n    IndexReader reader2 = w2.getReader();\n    w2.close();\n    \n    TermsFilter tf = new TermsFilter(new Term(fieldName, \"content1\"));\n    MultiReader multi = new MultiReader(reader1, reader2);\n    for (LeafReaderContext context : multi.leaves()) {\n      DocIdSet docIdSet = tf.getDocIdSet(context, context.reader().getLiveDocs());\n      if (context.reader().docFreq(new Term(fieldName, \"content1\")) == 0) {\n        assertNull(docIdSet);\n      } else {\n        BitDocIdSet bits = (BitDocIdSet) docIdSet;\n        assertTrue(\"Must be >= 0\", bits.bits().cardinality() >= 0);      \n      }\n    }\n    multi.close();\n    reader1.close();\n    reader2.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["04f07771a2a7dd3a395700665ed839c3dae2def2","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["04f07771a2a7dd3a395700665ed839c3dae2def2","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}