{"path":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are not\n   * supported.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d","date":1333288336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7f) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa","date":1335382601,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\" width=\"25%\">Value</th>\n   *   <th align=\"left\" width=\"25%\">Byte 1</th>\n   *   <th align=\"left\" width=\"25%\">Byte 2</th>\n   *   <th align=\"left\" width=\"25%\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">0</td>\n   *   <td width=\"25%\"><kbd>00000000</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">1</td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">2</td>\n   *   <td width=\"25%\"><kbd>00000010</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">127</td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">128</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">129</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">130</td>\n   *   <td width=\"25%\"><kbd>10000010</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,383</td>\n   *   <td width=\"25%\"><kbd>11111111</kbd></td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,384</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,385</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\" width=\"25%\">Value</th>\n   *   <th align=\"left\" width=\"25%\">Byte 1</th>\n   *   <th align=\"left\" width=\"25%\">Byte 2</th>\n   *   <th align=\"left\" width=\"25%\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">0</td>\n   *   <td width=\"25%\"><kbd>00000000</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">1</td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">2</td>\n   *   <td width=\"25%\"><kbd>00000010</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">127</td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">128</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">129</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">130</td>\n   *   <td width=\"25%\"><kbd>10000010</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,383</td>\n   *   <td width=\"25%\"><kbd>11111111</kbd></td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,384</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,385</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\" width=\"25%\">Value</th>\n   *   <th align=\"left\" width=\"25%\">Byte 1</th>\n   *   <th align=\"left\" width=\"25%\">Byte 2</th>\n   *   <th align=\"left\" width=\"25%\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">0</td>\n   *   <td width=\"25%\"><kbd>00000000</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">1</td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">2</td>\n   *   <td width=\"25%\"><kbd>00000010</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">127</td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">128</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">129</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">130</td>\n   *   <td width=\"25%\"><kbd>10000010</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,383</td>\n   *   <td width=\"25%\"><kbd>11111111</kbd></td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,384</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,385</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d036f8d7224b70bd199d46c58c48085d66cf1bf7","date":1417144716,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\">Value</th>\n   *   <th align=\"left\">Byte 1</th>\n   *   <th align=\"left\">Byte 2</th>\n   *   <th align=\"left\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>0</td>\n   *   <td><kbd>00000000</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>1</td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>2</td>\n   *   <td><kbd>00000010</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>127</td>\n   *   <td><kbd>01111111</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>128</td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>129</td>\n   *   <td><kbd>10000001</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>130</td>\n   *   <td><kbd>10000010</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,383</td>\n   *   <td><kbd>11111111</kbd></td>\n   *   <td><kbd>01111111</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,384</td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,385</td>\n   *   <td><kbd>10000001</kbd></td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\" width=\"25%\">Value</th>\n   *   <th align=\"left\" width=\"25%\">Byte 1</th>\n   *   <th align=\"left\" width=\"25%\">Byte 2</th>\n   *   <th align=\"left\" width=\"25%\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">0</td>\n   *   <td width=\"25%\"><kbd>00000000</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">1</td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">2</td>\n   *   <td width=\"25%\"><kbd>00000010</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">127</td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">128</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">129</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">130</td>\n   *   <td width=\"25%\"><kbd>10000010</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,383</td>\n   *   <td width=\"25%\"><kbd>11111111</kbd></td>\n   *   <td width=\"25%\"><kbd>01111111</kbd></td>\n   *   <td width=\"25%\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,384</td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td width=\"25%\">16,385</td>\n   *   <td width=\"25%\"><kbd>10000001</kbd></td>\n   *   <td width=\"25%\"><kbd>10000000</kbd></td>\n   *   <td width=\"25%\"><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\" width=\"25%\">...</td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   *   <td valign=\"bottom\" width=\"25%\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\">Value</th>\n   *   <th align=\"left\">Byte 1</th>\n   *   <th align=\"left\">Byte 2</th>\n   *   <th align=\"left\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>0</td>\n   *   <td><code>00000000</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>1</td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>2</td>\n   *   <td><code>00000010</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>127</td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>128</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>129</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>130</td>\n   *   <td><code>10000010</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,383</td>\n   *   <td><code>11111111</code></td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,384</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,385</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <col width=\"64*\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\">Value</th>\n   *   <th align=\"left\">Byte 1</th>\n   *   <th align=\"left\">Byte 2</th>\n   *   <th align=\"left\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>0</td>\n   *   <td><kbd>00000000</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>1</td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>2</td>\n   *   <td><kbd>00000010</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>127</td>\n   *   <td><kbd>01111111</kbd></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>128</td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>129</td>\n   *   <td><kbd>10000001</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>130</td>\n   *   <td><kbd>10000010</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,383</td>\n   *   <td><kbd>11111111</kbd></td>\n   *   <td><kbd>01111111</kbd></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,384</td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,385</td>\n   *   <td><kbd>10000001</kbd></td>\n   *   <td><kbd>10000000</kbd></td>\n   *   <td><kbd>00000001</kbd></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeVInt(int).mjava","sourceNew":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table class=\"padding2\" style=\"border-spacing: 0px; border-collapse: separate; border: 0\">\n   * <caption>variable length encoding examples</caption>\n   * <tr valign=\"top\">\n   *   <th style=\"text-align:left\">Value</th>\n   *   <th style=\"text-align:left\">Byte 1</th>\n   *   <th style=\"text-align:left\">Byte 2</th>\n   *   <th style=\"text-align:left\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>0</td>\n   *   <td><code>00000000</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>1</td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>2</td>\n   *   <td><code>00000010</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>127</td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>128</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>129</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>130</td>\n   *   <td><code>10000010</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,383</td>\n   *   <td><code>11111111</code></td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,384</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,385</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","sourceOld":"  /** Writes an int in a variable-length format.  Writes between one and\n   * five bytes.  Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * <p>VByte is a variable-length format for positive integers is defined where the\n   * high-order bit of each byte indicates whether more bytes remain to be read. The\n   * low-order seven bits are appended as increasingly more significant bits in the\n   * resulting integer value. Thus values from zero to 127 may be stored in a single\n   * byte, values from 128 to 16,383 may be stored in two bytes, and so on.</p>\n   * <p>VByte Encoding Example</p>\n   * <table cellspacing=\"0\" cellpadding=\"2\" border=\"0\" summary=\"variable length encoding examples\">\n   * <tr valign=\"top\">\n   *   <th align=\"left\">Value</th>\n   *   <th align=\"left\">Byte 1</th>\n   *   <th align=\"left\">Byte 2</th>\n   *   <th align=\"left\">Byte 3</th>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>0</td>\n   *   <td><code>00000000</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>1</td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>2</td>\n   *   <td><code>00000010</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>127</td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>128</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>129</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>130</td>\n   *   <td><code>10000010</code></td>\n   *   <td><code>00000001</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td></td>\n   *   <td></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,383</td>\n   *   <td><code>11111111</code></td>\n   *   <td><code>01111111</code></td>\n   *   <td></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,384</td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr valign=\"bottom\">\n   *   <td>16,385</td>\n   *   <td><code>10000001</code></td>\n   *   <td><code>10000000</code></td>\n   *   <td><code>00000001</code></td>\n   * </tr>\n   * <tr>\n   *   <td valign=\"top\">...</td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   *   <td valign=\"bottom\"></td>\n   * </tr>\n   * </table>\n   * <p>This provides compression while still being efficient to decode.</p>\n   * \n   * @param i Smaller values take fewer bytes.  Negative numbers are\n   * supported, but should be avoided.\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   * @see DataInput#readVInt()\n   */\n  public final void writeVInt(int i) throws IOException {\n    while ((i & ~0x7F) != 0) {\n      writeByte((byte)((i & 0x7F) | 0x80));\n      i >>>= 7;\n    }\n    writeByte((byte)i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["2e624b56e48bba276e76b66c9eb1bbb9994b0ffa"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["7d91b7936af3081e704512ac1234340133e59904"],"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["d036f8d7224b70bd199d46c58c48085d66cf1bf7"],"d036f8d7224b70bd199d46c58c48085d66cf1bf7":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["d036f8d7224b70bd199d46c58c48085d66cf1bf7"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["2e624b56e48bba276e76b66c9eb1bbb9994b0ffa"],"2e624b56e48bba276e76b66c9eb1bbb9994b0ffa":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"d036f8d7224b70bd199d46c58c48085d66cf1bf7":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"7d91b7936af3081e704512ac1234340133e59904":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}