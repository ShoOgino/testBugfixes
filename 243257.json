{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","commits":[{"id":"4d8affc7eee92d19bf9869be92b1037e3d86b60f","date":1363641611,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d","date":1372774106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","sourceNew":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    char valueSeparators[] = new char[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      valueSeparators[i] = getMultiValuedSeparator(fields[i]);\n    }\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, valueSeparators, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","sourceOld":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","sourceNew":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    char valueSeparators[] = new char[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      valueSeparators[i] = getMultiValuedSeparator(fields[i]);\n    }\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, valueSeparators, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","sourceOld":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","sourceNew":null,"sourceOld":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    char valueSeparators[] = new char[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      valueSeparators[i] = getMultiValuedSeparator(fields[i]);\n    }\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, valueSeparators, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#loadFieldValues(IndexSearcher,String[],int[],int).mjava","sourceNew":null,"sourceOld":"  /** Loads the String values for each field X docID to be\n   *  highlighted.  By default this loads from stored\n   *  fields, but a subclass can change the source.  This\n   *  method should allocate the String[fields.length][docids.length]\n   *  and fill all values.  The returned Strings must be\n   *  identical to what was indexed. */\n  protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n    String contents[][] = new String[fields.length][docids.length];\n    char valueSeparators[] = new char[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      valueSeparators[i] = getMultiValuedSeparator(fields[i]);\n    }\n    LimitedStoredFieldVisitor visitor = new LimitedStoredFieldVisitor(fields, valueSeparators, maxLength);\n    for (int i = 0; i < docids.length; i++) {\n      searcher.doc(docids[i], visitor);\n      for (int j = 0; j < fields.length; j++) {\n        contents[j][i] = visitor.getValue(j).toString();\n      }\n      visitor.reset();\n    }\n    return contents;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d","381618eac2691bb34ab9a3fca76ad55c6274517e"],"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d":["4d8affc7eee92d19bf9869be92b1037e3d86b60f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4d8affc7eee92d19bf9869be92b1037e3d86b60f","2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d8affc7eee92d19bf9869be92b1037e3d86b60f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d8affc7eee92d19bf9869be92b1037e3d86b60f"],"4d8affc7eee92d19bf9869be92b1037e3d86b60f":["2bab9b3a0f87a0ddd75243046ecebe7dfdf5048d","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}