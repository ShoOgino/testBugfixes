{"path":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","commits":[{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","pathOld":"/dev/null","sourceNew":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","pathOld":"/dev/null","sourceNew":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","date":1573537504,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","sourceNew":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig + \"sha256 \"+ entry.getMetaData().sha512;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","sourceNew":"  /**Validate a file for signature\n   *\n   * @param sigs the signatures. atleast one should succeed\n   * @param entry The file details\n   * @param isFirstAttempt If there is a failure\n   */\n  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry,\n                       boolean isFirstAttempt) throws SolrException, IOException {\n    if (!isFirstAttempt) {\n      //we are retrying because last validation failed.\n      // get all keys again and try again\n      packageStore.refresh(KEYS_DIR);\n    }\n\n    Map<String, byte[]> keys = packageStore.getKeys();\n    if (keys == null || keys.isEmpty()) {\n      if(isFirstAttempt) {\n        validate(sigs, entry, false);\n        return;\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Packagestore does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig + \"sha256 \" + entry.getMetaData().sha512;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          if(isFirstAttempt) {\n            validate(sigs, entry, false);\n            return;\n          }\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          if(isFirstAttempt)  {\n            validate(sigs, entry, false);\n            return;\n          }\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig + \"sha256 \"+ entry.getMetaData().sha512;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validate(List[String],PackageStore.FileEntry).mjava","sourceNew":"  /**Validate a file for signature\n   *\n   * @param sigs the signatures. atleast one should succeed\n   * @param entry The file details\n   * @param isFirstAttempt If there is a failure\n   */\n  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry,\n                       boolean isFirstAttempt) throws SolrException, IOException {\n    if (!isFirstAttempt) {\n      //we are retrying because last validation failed.\n      // get all keys again and try again\n      packageStore.refresh(KEYS_DIR);\n    }\n\n    Map<String, byte[]> keys = packageStore.getKeys();\n    if (keys == null || keys.isEmpty()) {\n      if(isFirstAttempt) {\n        validate(sigs, entry, false);\n        return;\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Packagestore does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig + \"sha256 \" + entry.getMetaData().sha512;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          if(isFirstAttempt) {\n            validate(sigs, entry, false);\n            return;\n          }\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          if(isFirstAttempt)  {\n            validate(sigs, entry, false);\n            return;\n          }\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void validate(List<String> sigs,\n                       PackageStore.FileEntry entry) throws SolrException {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(\n        coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys == null || keys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"ZooKeeper does not have any public keys\");\n    }\n    CryptoKeys cryptoKeys = null;\n    try {\n      cryptoKeys = new CryptoKeys(keys);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error parsing public keys in ZooKeeper\");\n    }\n    for (String sig : sigs) {\n      Supplier<String> errMsg = () -> \"Signature does not match any public key : \" + sig + \"sha256 \"+ entry.getMetaData().sha512;\n      if (entry.getBuffer() != null) {\n        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n      } else {\n        InputStream inputStream = entry.getInputStream();\n        if (cryptoKeys.verify(sig, inputStream) == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"d218decf811b7a0a4d86218c54c79c74a962374b":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d218decf811b7a0a4d86218c54c79c74a962374b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849dbf8570155b8e5fd03d8c2274a0a60491051c","b0b597c65628ca9e73913a07e81691f8229bae35"],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}