{"path":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(int[],int,int).mjava","commits":[{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  void quickSort(int[] termIDs, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(termIDs[lo], termIDs[hi]) > 0) {\n        final int tmp = termIDs[lo];\n        termIDs[lo] = termIDs[hi];\n        termIDs[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n      int tmp = termIDs[lo];\n      termIDs[lo] = termIDs[mid];\n      termIDs[mid] = tmp;\n    }\n\n    if (comparePostings(termIDs[mid], termIDs[hi]) > 0) {\n      int tmp = termIDs[mid];\n      termIDs[mid] = termIDs[hi];\n      termIDs[hi] = tmp;\n\n      if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n        int tmp2 = termIDs[lo];\n        termIDs[lo] = termIDs[mid];\n        termIDs[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    int partition = termIDs[mid];\n\n    for (; ;) {\n      while (comparePostings(termIDs[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(termIDs[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        int tmp = termIDs[left];\n        termIDs[left] = termIDs[right];\n        termIDs[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(termIDs, lo, left);\n    quickSort(termIDs, left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(int[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(int[] termIDs, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(termIDs[lo], termIDs[hi]) > 0) {\n        final int tmp = termIDs[lo];\n        termIDs[lo] = termIDs[hi];\n        termIDs[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n      int tmp = termIDs[lo];\n      termIDs[lo] = termIDs[mid];\n      termIDs[mid] = tmp;\n    }\n\n    if (comparePostings(termIDs[mid], termIDs[hi]) > 0) {\n      int tmp = termIDs[mid];\n      termIDs[mid] = termIDs[hi];\n      termIDs[hi] = tmp;\n\n      if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n        int tmp2 = termIDs[lo];\n        termIDs[lo] = termIDs[mid];\n        termIDs[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    int partition = termIDs[mid];\n\n    for (; ;) {\n      while (comparePostings(termIDs[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(termIDs[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        int tmp = termIDs[left];\n        termIDs[left] = termIDs[right];\n        termIDs[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(termIDs, lo, left);\n    quickSort(termIDs, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(int[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(int[] termIDs, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(termIDs[lo], termIDs[hi]) > 0) {\n        final int tmp = termIDs[lo];\n        termIDs[lo] = termIDs[hi];\n        termIDs[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n      int tmp = termIDs[lo];\n      termIDs[lo] = termIDs[mid];\n      termIDs[mid] = tmp;\n    }\n\n    if (comparePostings(termIDs[mid], termIDs[hi]) > 0) {\n      int tmp = termIDs[mid];\n      termIDs[mid] = termIDs[hi];\n      termIDs[hi] = tmp;\n\n      if (comparePostings(termIDs[lo], termIDs[mid]) > 0) {\n        int tmp2 = termIDs[lo];\n        termIDs[lo] = termIDs[mid];\n        termIDs[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    int partition = termIDs[mid];\n\n    for (; ;) {\n      while (comparePostings(termIDs[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(termIDs[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        int tmp = termIDs[left];\n        termIDs[left] = termIDs[right];\n        termIDs[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(termIDs, lo, left);\n    quickSort(termIDs, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}