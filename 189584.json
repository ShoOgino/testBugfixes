{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","commits":[{"id":"de051a65606160ec06ecd38df9dd6905e4b18b6d","date":1363626222,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb","date":1376485874,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":["c215736a9e29403edd2132d9f0829a287b428df4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n\n    processResponses(results);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n\n    processResponses(results);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice);\n    }\n\n    processResponses(results);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, Replica.State stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler);\n    }\n\n    processResponses(results, shardHandler);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["de051a65606160ec06ecd38df9dd6905e4b18b6d","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"b7605579001505896d48b07160075a5c8b8e128e":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","6f26f74e4969851a019d28f10315cb1c77786f22"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"de051a65606160ec06ecd38df9dd6905e4b18b6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6f26f74e4969851a019d28f10315cb1c77786f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["6f26f74e4969851a019d28f10315cb1c77786f22","1390137e395d2f07f9ba5b8c43d293befe84d563"],"6f26f74e4969851a019d28f10315cb1c77786f22":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["de051a65606160ec06ecd38df9dd6905e4b18b6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"b7605579001505896d48b07160075a5c8b8e128e":[],"de051a65606160ec06ecd38df9dd6905e4b18b6d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["a219f1dcad1700e84807666bdbd2b573e8de7021","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de051a65606160ec06ecd38df9dd6905e4b18b6d"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b7605579001505896d48b07160075a5c8b8e128e","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}