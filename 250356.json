{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,SortedSetDocValues,int).mjava","commits":[{"id":"2e327741cef719817558806865704ff0864d12fd","date":1363899030,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,SortedSetDocValues,int).mjava","pathOld":"/dev/null","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, SortedSetDocValues dv, int maxDoc) {\n      super(weight);\n      this.dv = dv;\n      this.maxDoc = maxDoc;\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      for (BooleanClause clause : bq.getClauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"707f5285c280ff14fa898e7722e57b7a46b81a76","date":1363965759,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,AtomicReader,IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#SlowMinShouldMatchScorer(BooleanWeight,SortedSetDocValues,int).mjava","sourceNew":"    SlowMinShouldMatchScorer(BooleanWeight weight, AtomicReader reader, IndexSearcher searcher) throws IOException {\n      super(weight);\n      this.dv = reader.getSortedSetDocValues(\"dv\");\n      this.maxDoc = reader.maxDoc();\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      this.sims = new ExactSimScorer[(int)dv.getValueCount()];\n      for (BooleanClause clause : bq.getClauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n          TermContext context = TermContext.build(reader.getContext(), term, true);\n          SimWeight w = weight.similarity.computeWeight(1f, \n                        searcher.collectionStatistics(\"field\"),\n                        searcher.termStatistics(term, context));\n          w.getValueForNormalization(); // ignored\n          w.normalize(1F, 1F);\n          sims[(int)ord] = weight.similarity.exactSimScorer(w, reader.getContext());\n        }\n      }\n    }\n\n","sourceOld":"    SlowMinShouldMatchScorer(BooleanWeight weight, SortedSetDocValues dv, int maxDoc) {\n      super(weight);\n      this.dv = dv;\n      this.maxDoc = maxDoc;\n      BooleanQuery bq = (BooleanQuery) weight.getQuery();\n      this.minNrShouldMatch = bq.getMinimumNumberShouldMatch();\n      for (BooleanClause clause : bq.getClauses()) {\n        assert !clause.isProhibited();\n        assert !clause.isRequired();\n        Term term = ((TermQuery)clause.getQuery()).getTerm();\n        long ord = dv.lookupTerm(term.bytes());\n        if (ord >= 0) {\n          boolean success = ords.add(ord);\n          assert success; // no dups\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2e327741cef719817558806865704ff0864d12fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"707f5285c280ff14fa898e7722e57b7a46b81a76":["2e327741cef719817558806865704ff0864d12fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["707f5285c280ff14fa898e7722e57b7a46b81a76"]},"commit2Childs":{"2e327741cef719817558806865704ff0864d12fd":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e327741cef719817558806865704ff0864d12fd"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}