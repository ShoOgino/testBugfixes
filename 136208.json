{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes());\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes());\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","date":1341478157,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes());\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes());\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#getDocumentFromString(String).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#getDocumentFromString(String).mjava","sourceNew":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","sourceOld":"  private static Document getDocumentFromString(String str)\n      throws SAXException, IOException, ParserConfigurationException {\n    InputStream is = new ByteArrayInputStream(str.getBytes(StandardCharsets.UTF_8));\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(is);\n    is.close();\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["7d89d7e4e5101347833eea558851bf4209218619","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["7d89d7e4e5101347833eea558851bf4209218619"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["7d89d7e4e5101347833eea558851bf4209218619","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7d89d7e4e5101347833eea558851bf4209218619","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4279d57a8a31112b52803ae8dfb3f4ce70efdbd8"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4279d57a8a31112b52803ae8dfb3f4ce70efdbd8":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}