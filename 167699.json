{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random, delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":null,"sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends MockDirectoryWrapper {\n        private LockFactory myLockFactory;\n        MyRAMDirectory(Directory delegate) {\n          super(random(), delegate);\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n\n      Directory dir = new MyRAMDirectory(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}