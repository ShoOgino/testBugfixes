{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","pathOld":"/dev/null","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    List<String> fieldOrder = new ArrayList<>();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"ASC\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"DESC\";\n        }\n        fieldOrder.add(name + \" \" + direction);\n      }\n\n      implementor.addOrder(fieldOrder);\n    }\n    if (fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","date":1461958396,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    List<String> fieldOrder = new ArrayList<>();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        fieldOrder.add(name + \" \" + direction);\n      }\n\n      implementor.addOrder(fieldOrder);\n    }\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    List<String> fieldOrder = new ArrayList<>();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"ASC\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"DESC\";\n        }\n        fieldOrder.add(name + \" \" + direction);\n      }\n\n      implementor.addOrder(fieldOrder);\n    }\n    if (fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4a466195c69a11a113b33adc90f9069031e54e","date":1477605536,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        implementor.addOrder(name, direction);\n      }\n    }\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    List<String> fieldOrder = new ArrayList<>();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        fieldOrder.add(name + \" \" + direction);\n      }\n\n      implementor.addOrder(fieldOrder);\n    }\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4e643056790ca1e73898892ffb5b50ae883232","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        implementor.addOrder(name, direction);\n      }\n    }\n\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","sourceOld":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        implementor.addOrder(name, direction);\n      }\n    }\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSort#implement(Implementor).mjava","pathOld":"/dev/null","sourceNew":"  public void implement(Implementor implementor) {\n    implementor.visitChild(0, getInput());\n\n    List<RelFieldCollation> sortCollations = collation.getFieldCollations();\n    if (!sortCollations.isEmpty()) {\n      // Construct a series of order clauses from the desired collation\n      final List<RelDataTypeField> fields = getRowType().getFieldList();\n      for (RelFieldCollation fieldCollation : sortCollations) {\n        final String name = fields.get(fieldCollation.getFieldIndex()).getName();\n        String direction = \"asc\";\n        if (fieldCollation.getDirection().equals(RelFieldCollation.Direction.DESCENDING)) {\n          direction = \"desc\";\n        }\n        implementor.addOrder(name, direction);\n      }\n    }\n\n\n    if(fetch != null) {\n      implementor.setLimit(((RexLiteral) fetch).getValue().toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa4a466195c69a11a113b33adc90f9069031e54e":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e4e643056790ca1e73898892ffb5b50ae883232"],"3e4e643056790ca1e73898892ffb5b50ae883232":["fa4a466195c69a11a113b33adc90f9069031e54e"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"fa4a466195c69a11a113b33adc90f9069031e54e":["3e4e643056790ca1e73898892ffb5b50ae883232"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e4e643056790ca1e73898892ffb5b50ae883232":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d984627825732e682759c22df7a3b171a80f3812":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["fa4a466195c69a11a113b33adc90f9069031e54e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}