{"path":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"/dev/null","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe","date":1270921890,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    TokenizerChain.TokenStreamInfo tsi = ana.getStream(\"textDefault\",new StringReader(\"\"));\n    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();\n    assertTrue(tok.isReplaceInvalidAcronym());\n    \n    type = schema.getFieldType(\"text20\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n    tsi = ana.getStream(\"text20\",new StringReader(\"\"));\n    tok = (StandardTokenizer) tsi.getTokenizer();\n    assertFalse(tok.isReplaceInvalidAcronym());\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer20\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion#testStandardTokenizerVersions().mjava","sourceNew":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","sourceOld":"  public void testStandardTokenizerVersions() throws Exception {\n    assertEquals(DEFAULT_VERSION, solrConfig.luceneMatchVersion);\n    \n    final IndexSchema schema = h.getCore().getSchema();\n    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    TokenizerChain ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    type = schema.getFieldType(\"text30\");\n    ana = (TokenizerChain) type.getAnalyzer();\n    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);\n    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);\n\n    // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(\n    final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField(\"matchVersion\");\n    matchVersionField.setAccessible(true);\n\n    type = schema.getFieldType(\"textStandardAnalyzerDefault\");\n    Analyzer ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));\n\n    type = schema.getFieldType(\"textStandardAnalyzer30\");\n    ana1 = type.getAnalyzer();\n    assertTrue(ana1 instanceof StandardAnalyzer);\n    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c26f00b574427b55127e869b935845554afde1fa":["4e8cc373c801e54cec75daf9f52792cb4b17f536","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe":["1da8d55113b689b06716246649de6f62430f15c0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4a8d1f6fe6fd36b09f8781bafaa7dfa9e75277fe":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}