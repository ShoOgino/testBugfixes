{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","commits":[{"id":"b161cbe24f78fd1b3801394b7becaaa6d4843c83","date":1340889615,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    Directory ramDir = newDirectory();\n    Analyzer analyzer = new MockBytesAnalyzer();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(\"content\",\"เข\", fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"content\", analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(1, is.search(q, 10).totalHits);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    Directory ramDir = newDirectory();\n    Analyzer analyzer = new MockBytesAnalyzer();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(\"content\",\"เข\", fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"content\", analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(1, is.search(q, 10).totalHits);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    Directory ramDir = newDirectory();\n    Analyzer analyzer = new MockBytesAnalyzer();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(\"content\",\"เข\", fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = newSearcher(ir);\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"content\", analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(1, is.search(q, 10).totalHits);\n    ir.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    Directory ramDir = newDirectory();\n    Analyzer analyzer = new MockBytesAnalyzer();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(\"content\",\"เข\", fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"content\", analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(1, is.search(q, 10).totalHits);\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    Directory ramDir = newDirectory();\n    Analyzer analyzer = new MockBytesAnalyzer();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(\"content\",\"เข\", fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = newSearcher(ir);\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"content\", analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(1, is.search(q, 10).totalHits);\n    ir.close();\n    ramDir.close();\n  }\n\n","bugFix":["b161cbe24f78fd1b3801394b7becaaa6d4843c83","ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":null,"sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testByteTerms().mjava","sourceNew":null,"sourceOld":"  // LUCENE-4176\n  public void testByteTerms() throws Exception {\n    String s = \"เข\";\n    Analyzer analyzer = new MockBytesAnalyzer();\n    QueryParser qp = new AnalyzingQueryParser(FIELD, analyzer);\n    Query q = qp.parse(\"[เข TO เข]\");\n    assertEquals(true, isAHit(q, s, analyzer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["046829b17e246624c179b94d5a20cb53fa945e87"],"b161cbe24f78fd1b3801394b7becaaa6d4843c83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b161cbe24f78fd1b3801394b7becaaa6d4843c83"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["b161cbe24f78fd1b3801394b7becaaa6d4843c83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b161cbe24f78fd1b3801394b7becaaa6d4843c83":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b161cbe24f78fd1b3801394b7becaaa6d4843c83","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["046829b17e246624c179b94d5a20cb53fa945e87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}