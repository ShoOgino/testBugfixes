{"path":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    IndexReader reader = createReaderWithNDocs(N_DOCS, docFactory);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set\",\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      new IndexSearcher(reader).search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["72584c1b1d38813cce9071e38f9e8481bf4add9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set\",\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    IndexReader reader = createReaderWithNDocs(N_DOCS, docFactory);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set\",\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      new IndexSearcher(reader).search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cbb38b21d3ae707ef21bd5ea237bda83b091ce5","date":1309679041,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n      \n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum,\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set\",\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["72584c1b1d38813cce9071e38f9e8481bf4add9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72584c1b1d38813cce9071e38f9e8481bf4add9a","date":1309788398,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      int numErasedDocs = reader.numDeletedDocs();\n      \n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertFalse(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum,\n            docFactory.markedDeleted(docNum));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n      \n      assertEquals(\"Wrong number of (live) documents\", N_DOCS\n          - numErasedDocs, numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            docFactory.markedDeleted(docNum));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61","1cbb38b21d3ae707ef21bd5ea237bda83b091ce5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits deleted = MultiFields.getDeletedDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            deleted != null && deleted.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getFieldable(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getFieldable(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n      searcher.close();\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testWithDeletions().mjava","sourceNew":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testWithDeletions() throws Exception {\n    int N_DOCS = 100;\n\n    DocumentFactory docFactory = new DocumentFactory(N_DOCS) {\n      @Override\n      public boolean markedDeleted(int docNum) {\n        return (docNum % 3 == 0 ||        // every 3rd documents, including first \n            docNum == numDocs - 1 ||     // last document\n            docNum == numDocs / 2 ||     // 3 consecutive documents in the middle\n            docNum == 1 + numDocs / 2 ||\n            docNum == 2 + numDocs / 2);\n      }\n      \n      // every 6th document (starting from the 2nd) would contain 'alpha'\n      @Override\n      public boolean haveAlpha(int docNum) {\n        return (docNum % 6 == 1);\n      }\n    };\n    \n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), N_DOCS, docFactory, dir);\n    try {\n      ScoredDocIDs allDocs = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      ScoredDocIDsIterator it = allDocs.iterator();\n      int numIteratedDocs = 0;\n      while (it.next()) {\n        numIteratedDocs++;\n        int docNum = it.getDocID();\n        assertNull(\n            \"Deleted docs must not appear in the allDocsScoredDocIds set: \" + docNum, \n            reader.document(docNum).getField(\"del\"));\n      }\n\n      assertEquals(\"Wrong number of (live) documents\", allDocs.size(), numIteratedDocs);\n\n      // Get all 'alpha' documents\n      ScoredDocIdCollector collector = ScoredDocIdCollector.create(reader.maxDoc(), false);\n      Query q = new TermQuery(new Term(DocumentFactory.field, DocumentFactory.alphaTxt));\n      IndexSearcher searcher = newSearcher(reader);\n      searcher.search(q, collector);\n\n      ScoredDocIDs scoredDocIds = collector.getScoredDocIDs();\n      OpenBitSet resultSet = new OpenBitSetDISI(scoredDocIds.getDocIDs().iterator(), reader.maxDoc());\n      \n      // Getting the complement set of the query result\n      ScoredDocIDs complementSet = ScoredDocIdsUtils.getComplementSet(scoredDocIds, reader);\n\n      assertEquals(\"Number of documents in complement set mismatch\",\n          reader.numDocs() - scoredDocIds.size(), complementSet.size());\n\n      // now make sure the documents in the complement set are not deleted\n      // and not in the original result set\n      ScoredDocIDsIterator compIterator = complementSet.iterator();\n      Bits live = MultiFields.getLiveDocs(reader);\n      while (compIterator.next()) {\n        int docNum = compIterator.getDocID();\n        assertFalse(\n            \"Complement-Set must not contain deleted documents (doc=\"+docNum+\")\",\n            live != null && !live.get(docNum));\n        assertNull(\n            \"Complement-Set must not contain docs from the original set (doc=\"+ docNum+\")\",\n            reader.document(docNum).getField(\"del\"));\n        assertFalse(\n            \"Complement-Set must not contain docs from the original set (doc=\"+docNum+\")\",\n            resultSet.fastGet(docNum));\n      }\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cbb38b21d3ae707ef21bd5ea237bda83b091ce5":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["72584c1b1d38813cce9071e38f9e8481bf4add9a"],"72584c1b1d38813cce9071e38f9e8481bf4add9a":["1cbb38b21d3ae707ef21bd5ea237bda83b091ce5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"1cbb38b21d3ae707ef21bd5ea237bda83b091ce5":["72584c1b1d38813cce9071e38f9e8481bf4add9a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"72584c1b1d38813cce9071e38f9e8481bf4add9a":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["1cbb38b21d3ae707ef21bd5ea237bda83b091ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}