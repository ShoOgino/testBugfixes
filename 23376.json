{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","pathOld":"/dev/null","sourceNew":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = random().nextInt(valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda","date":1340008138,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","sourceNew":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = _TestUtil.nextInt(random(), 1, valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = random().nextInt(valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501135652c6500e4108453df1cc819dae12098e7","date":1340109868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","sourceNew":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = _TestUtil.nextInt(random(), 1, valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n        assertTrue(msg, gets <= ints.size() - index);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = _TestUtil.nextInt(random(), 1, valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testBulkGet().mjava","sourceNew":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = TestUtil.nextInt(random(), 1, valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n        assertTrue(msg, gets <= ints.size() - index);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBulkGet() {\n    final int valueCount = 1111;\n    final int index = random().nextInt(valueCount);\n    final int len = _TestUtil.nextInt(random(), 1, valueCount * 2);\n    final int off = random().nextInt(77);\n\n    for (int bpv = 1; bpv <= 64; ++bpv) {\n      long mask = PackedInts.maxValue(bpv);\n      List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bpv);\n\n      for (PackedInts.Mutable ints : packedInts) {\n        for (int i = 0; i < ints.size(); ++i) {\n          ints.set(i, (31L * i - 1099) & mask);\n        }\n        long[] arr = new long[off+len];\n\n        String msg = ints.getClass().getSimpleName() + \" valueCount=\" + valueCount\n            + \", index=\" + index + \", len=\" + len + \", off=\" + off;\n        final int gets = ints.get(index, arr, off, len);\n        assertTrue(msg, gets > 0);\n        assertTrue(msg, gets <= len);\n        assertTrue(msg, gets <= ints.size() - index);\n\n        for (int i = 0; i < arr.length; ++i) {\n          String m = msg + \", i=\" + i;\n          if (i >= off && i < off + gets) {\n            assertEquals(m, ints.get(i - off + index), arr[i]);\n          } else {\n            assertEquals(m, 0, arr[i]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["501135652c6500e4108453df1cc819dae12098e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"501135652c6500e4108453df1cc819dae12098e7":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"a58c4ede2fdd3238e2129fbb330df4ecf79f2dda":["501135652c6500e4108453df1cc819dae12098e7"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"501135652c6500e4108453df1cc819dae12098e7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a58c4ede2fdd3238e2129fbb330df4ecf79f2dda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}