{"path":"backwards/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}