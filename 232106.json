{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","commits":[{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO nocommit - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e51ba2541c9f13b1ac7dbd4c508136b53a076063","date":1471980318,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","sourceNew":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","sourceOld":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO nocommit - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb32b2f58e1f02551c5abe6c272b58a970e0bf29","date":1476220416,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket#getRefinement2(FacetMerger.Context,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#getRefinement2(FacetMerger.Context,Collection[String]).mjava","sourceNew":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","sourceOld":"  public Map<String, Object> getRefinement2(FacetMerger.Context mcontext, Collection<String> refineTags) {\n    // TODO - partial results should turn off refining!!!\n\n    boolean parentMissing = mcontext.bucketWasMissing();\n\n    // TODO: this is a redundant check for many types of facets... only do on field faceting\n    if (!parentMissing) {\n      // if parent bucket wasn't missing, check if this bucket was.\n      // this really only needs checking on certain buckets... (like terms facet)\n      boolean sawThisBucket = mcontext.getShardFlag(bucketNumber);\n      if (!sawThisBucket) {\n        mcontext.setBucketWasMissing(true);\n      }\n    } else {\n      // if parent bucket was missing, then we should be too\n      assert !mcontext.getShardFlag(bucketNumber);\n    }\n\n    Map<String,Object> refinement = null;\n\n    if (!mcontext.bucketWasMissing()) {\n      // this is just a pass-through bucket... see if there is anything to do at all\n      if (subs == null || refineTags.isEmpty()) {\n        return null;\n      }\n    } else {\n      // for missing bucket, go over all sub-facts\n      refineTags = null;\n      refinement = new HashMap<>(4);\n      if (bucketValue != null) {\n        refinement.put(\"_v\", bucketValue);\n      }\n      refinement.put(\"_m\",1);\n    }\n\n    // TODO: listing things like sub-facets that have no field facets are redundant\n    // (we only need facet that have variable values)\n\n    for (Map.Entry<String,FacetMerger> sub : subs.entrySet()) {\n      if (refineTags != null && !refineTags.contains(sub.getKey())) {\n        continue;\n      }\n      Map<String,Object> subRef = sub.getValue().getRefinement(mcontext);\n      if (subRef != null) {\n        if (refinement == null) {\n          refinement = new HashMap<>(4);\n        }\n        refinement.put(sub.getKey(), subRef);\n      }\n    }\n\n\n    // reset the \"bucketMissing\" flag on the way back out.\n    mcontext.setBucketWasMissing(parentMissing);\n    return refinement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e51ba2541c9f13b1ac7dbd4c508136b53a076063":["1931d98b40b01d5075753b197c2461a5c2652689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1931d98b40b01d5075753b197c2461a5c2652689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e51ba2541c9f13b1ac7dbd4c508136b53a076063"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"e51ba2541c9f13b1ac7dbd4c508136b53a076063":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"1931d98b40b01d5075753b197c2461a5c2652689":["e51ba2541c9f13b1ac7dbd4c508136b53a076063"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}