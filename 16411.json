{"path":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","commits":[{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int).mjava","sourceNew":"  public static void testPQ(int count, Random gen)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tRandom gen = new Random();\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d48430886f0d62ca63d20bf2a8bc01acee0c12f","date":1254504483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.put(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = (Integer)pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"  public static void testPQ(int count, Random gen)\n    {\n\tPriorityQueue pq = new IntegerQueue(count);\n\tint sum = 0, sum2 = 0;\n\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    int next = gen.nextInt();\n\t    sum += next;\n\t    pq.put(new Integer(next));\n\t}\n\n\t//      Date end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/put\");\n\n\t//      start = new Date();\n\n\tint last = Integer.MIN_VALUE;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t    Integer next = (Integer)pq.pop();\n\t    assertTrue(next.intValue() >= last);\n\t    last = next.intValue();\n\t    sum2 += last;\n\t}\n\n\tassertEquals(sum, sum2);\n\t//      end = new Date();\n\n\t//      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n\t//      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = (Integer)pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.put(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = (Integer)pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dda0f1ae3056a617c5e3d8fbc40811b5770e9c26","date":1257803716,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = (Integer)pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","pathOld":"src/test/org/apache/lucene/util/TestPriorityQueue#testPQ(int,Random).mjava","sourceNew":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","sourceOld":"    public static void testPQ(int count, Random gen) {\n        PriorityQueue<Integer> pq = new IntegerQueue(count);\n        int sum = 0, sum2 = 0;\n\n        for (int i = 0; i < count; i++)\n        {\n            int next = gen.nextInt();\n            sum += next;\n            pq.add(next);\n        }\n\n        //      Date end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/put\");\n\n        //      start = new Date();\n\n        int last = Integer.MIN_VALUE;\n        for (int i = 0; i < count; i++)\n        {\n            Integer next = pq.pop();\n            assertTrue(next.intValue() >= last);\n            last = next.intValue();\n            sum2 += last;\n        }\n\n        assertEquals(sum, sum2);\n        //      end = new Date();\n\n        //      System.out.print(((float)(end.getTime()-start.getTime()) / count) * 1000);\n        //      System.out.println(\" microseconds/pop\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dda0f1ae3056a617c5e3d8fbc40811b5770e9c26":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dda0f1ae3056a617c5e3d8fbc40811b5770e9c26"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"dda0f1ae3056a617c5e3d8fbc40811b5770e9c26":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb1066f2afe9450585d0d10063ea4450085236f1"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["dda0f1ae3056a617c5e3d8fbc40811b5770e9c26"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}