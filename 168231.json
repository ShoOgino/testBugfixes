{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["b89678825b68eccaf09e6ab71675fc0b0af1e099","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}