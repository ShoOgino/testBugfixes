{"path":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","commits":[{"id":"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","date":1224776958,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrCore core = rb.req.getCore();\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      IndexReader reader = searcher.get().getReader();\n      TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n      IndexSchema schema = core.getSchema();\n      String uniqFieldName = schema.getUniqueKeyField().getName();\n      SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n      while (iter.hasNext()) {\n        Integer docId = iter.next();\n        NamedList docNL = new NamedList();\n        termVectors.add(\"doc-\" + docId, docNL);\n        mapper.docNL = docNL;\n        Document document = reader.document(docId, fieldSelector);\n        String uniqId = document.get(uniqFieldName);\n        docNL.add(\"uniqueKey\", uniqId);\n        reader.getTermFreqVector(docId, mapper);\n      }\n      termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a31f21f3d8df9f3eabcc142c8211bf5a35b9d60","date":1224795225,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrCore core = rb.req.getCore();\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      IndexReader reader = searcher.get().getReader();\n      //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n      TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n      IndexSchema schema = core.getSchema();\n      String uniqFieldName = schema.getUniqueKeyField().getName();\n      //Only load the id field\n      SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n      while (iter.hasNext()) {\n        Integer docId = iter.next();\n        NamedList docNL = new NamedList();\n        termVectors.add(\"doc-\" + docId, docNL);\n        mapper.docNL = docNL;\n        Document document = reader.document(docId, fieldSelector);\n        String uniqId = document.get(uniqFieldName);\n        docNL.add(\"uniqueKey\", uniqId);\n        reader.getTermFreqVector(docId, mapper);\n      }\n      termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrCore core = rb.req.getCore();\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      IndexReader reader = searcher.get().getReader();\n      TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n      IndexSchema schema = core.getSchema();\n      String uniqFieldName = schema.getUniqueKeyField().getName();\n      SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n      while (iter.hasNext()) {\n        Integer docId = iter.next();\n        NamedList docNL = new NamedList();\n        termVectors.add(\"doc-\" + docId, docNL);\n        mapper.docNL = docNL;\n        Document document = reader.document(docId, fieldSelector);\n        String uniqId = document.get(uniqFieldName);\n        docNL.add(\"uniqueKey\", uniqId);\n        reader.getTermFreqVector(docId, mapper);\n      }\n      termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eec7020a8347c329fda5615de48884c0a21ad7d","date":1225216572,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrCore core = rb.req.getCore();\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      IndexReader reader = searcher.get().getReader();\n      //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n      TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n      IndexSchema schema = core.getSchema();\n      String uniqFieldName = schema.getUniqueKeyField().getName();\n      //Only load the id field\n      SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n      while (iter.hasNext()) {\n        Integer docId = iter.next();\n        NamedList docNL = new NamedList();\n        termVectors.add(\"doc-\" + docId, docNL);\n        mapper.docNL = docNL;\n        Document document = reader.document(docId, fieldSelector);\n        String uniqId = document.get(uniqFieldName);\n        docNL.add(\"uniqueKey\", uniqId);\n        reader.getTermFreqVector(docId, mapper);\n      }\n      termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2686717a32b40222a4361bd16ae295511cb8ce7","date":1226500515,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean docFreq = params.getBool(TermVectorParams.DF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      docFreq = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, docFreq, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean idf = params.getBool(TermVectorParams.IDF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      idf = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, idf, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","bugFix":null,"bugIntro":["df18b2465217a237531d0d944c22ea4a4316411e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean docFreq = params.getBool(TermVectorParams.DF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      docFreq = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, docFreq, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.<String>emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean docFreq = params.getBool(TermVectorParams.DF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      docFreq = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, docFreq, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermVectorComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean docFreq = params.getBool(TermVectorParams.DF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      docFreq = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, docFreq, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.<String>emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    NamedList termVectors = new NamedList();\n    rb.rsp.add(TERM_VECTORS, termVectors);\n    //figure out what options we have, and try to get the appropriate vector\n    boolean termFreq = params.getBool(TermVectorParams.TF, false);\n    boolean positions = params.getBool(TermVectorParams.POSITIONS, false);\n    boolean offsets = params.getBool(TermVectorParams.OFFSETS, false);\n    boolean docFreq = params.getBool(TermVectorParams.DF, false);\n    boolean tfIdf = params.getBool(TermVectorParams.TF_IDF, false);\n    //boolean cacheIdf = params.getBool(TermVectorParams.IDF, false);\n    //short cut to all values.\n    boolean all = params.getBool(TermVectorParams.ALL, false);\n    if (all == true){\n      termFreq = true;\n      positions = true;\n      offsets = true;\n      docFreq = true;\n      tfIdf = true;\n    }\n\n    String[] fields = params.getParams(TermVectorParams.FIELDS);\n    if (fields == null) {\n      fields = params.getParams(CommonParams.FL);\n    }\n    DocListAndSet listAndSet = rb.getResults();\n    List<Integer> docIds = getInts(params.getParams(TermVectorParams.DOC_IDS));\n    Iterator<Integer> iter;\n    if (docIds != null && docIds.isEmpty() == false) {\n      iter = docIds.iterator();\n    } else {\n      DocList list = listAndSet.docList;\n      iter = list.iterator();\n    }\n    SolrIndexSearcher searcher = rb.req.getSearcher();\n\n    IndexReader reader = searcher.getReader();\n    //the TVMapper is a TermVectorMapper which can be used to optimize loading of Term Vectors\n    TVMapper mapper = new TVMapper(fields, reader, termFreq, positions, offsets, docFreq, tfIdf);\n    IndexSchema schema = rb.req.getSchema();\n    String uniqFieldName = schema.getUniqueKeyField().getName();\n    //Only load the id field\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.singleton(uniqFieldName), Collections.<String>emptySet());\n    while (iter.hasNext()) {\n      Integer docId = iter.next();\n      NamedList docNL = new NamedList();\n      termVectors.add(\"doc-\" + docId, docNL);\n      mapper.docNL = docNL;\n      Document document = reader.document(docId, fieldSelector);\n      String uniqId = document.get(uniqFieldName);\n      docNL.add(\"uniqueKey\", uniqId);\n      reader.getTermFreqVector(docId, mapper);\n    }\n    termVectors.add(\"uniqueKeyFieldName\", uniqFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6eec7020a8347c329fda5615de48884c0a21ad7d":["7a31f21f3d8df9f3eabcc142c8211bf5a35b9d60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["6eec7020a8347c329fda5615de48884c0a21ad7d"],"7a31f21f3d8df9f3eabcc142c8211bf5a35b9d60":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"6eec7020a8347c329fda5615de48884c0a21ad7d":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"7a31f21f3d8df9f3eabcc142c8211bf5a35b9d60":["6eec7020a8347c329fda5615de48884c0a21ad7d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["7a31f21f3d8df9f3eabcc142c8211bf5a35b9d60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}