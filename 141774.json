{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","commits":[{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11","7875fce026a0a335830cfc75abc3eb009eff9a73","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["29f5eaf296600e1665151e7929d42a3cbe22e481","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", ZkStateReader.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", null, 1);\n      \n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\", \"core\" + (i + 1), \"node\" + (i + 1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["29f5eaf296600e1665151e7929d42a3cbe22e481","5de502b5478255493125e7e801411ba17a6682ec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getSlice(\"collection2\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n        final int numShards = 3;\n        zkController.createCollection(COLLECTION, 3);\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i + 1),\n              \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n        // publish a bad queue item\n        String emptyCollectionName = \"\";\n        zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", Replica.State.ACTIVE, 1);\n        zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n        zkController.createCollection(\"collection2\", 3);\n        // make sure the Overseer is still processing items\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n              \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      }\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=3;\n      zkController.createCollection(COLLECTION, 3);\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1),\n            \"node\" + (i+1), \"shard\"+((i%3)+1) , Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n      // publish a bad queue item\n      String emptyCollectionName = \"\";\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\",  Replica.State.ACTIVE, 1);\n      zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n      zkController.createCollection(\"collection2\", 3);\n      // make sure the Overseer is still processing items\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n            \"core\" + (i + 1), \"node\" + (i + 1),\"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 3;\n        mockController.createCollection(COLLECTION, 3);\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1),\n              \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n        // publish a bad queue item\n        String emptyCollectionName = \"\";\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1, true, overseers.get(0));\n\n        mockController.createCollection(\"collection2\", 3);\n        // make sure the Overseer is still processing items\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(\"collection2\",\n              \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(\"collection2\", 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      }\n      \n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n        final int numShards = 3;\n        zkController.createCollection(COLLECTION, 3);\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i + 1),\n              \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n        // publish a bad queue item\n        String emptyCollectionName = \"\";\n        zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", Replica.State.ACTIVE, 1);\n        zkController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1);\n\n        zkController.createCollection(\"collection2\", 3);\n        // make sure the Overseer is still processing items\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(\"collection2\",\n              \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      }\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","29f5eaf296600e1665151e7929d42a3cbe22e481","f4abec28b874149a7223e32cc7a01704c27790de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testBadQueueItem().mjava","sourceNew":"  @Test\n  public void testBadQueueItem() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 3;\n        mockController.createCollection(COLLECTION, 3);\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1),\n              \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n\n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n        // publish a bad queue item\n        String emptyCollectionName = \"\";\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1, true, overseers.get(0));\n\n        mockController.createCollection(\"collection2\", 3);\n        // make sure the Overseer is still processing items\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(\"collection2\",\n              \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n\n        reader.waitForState(\"collection2\", 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      }\n\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadQueueItem() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 3;\n        mockController.createCollection(COLLECTION, 3);\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1),\n              \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n        // publish a bad queue item\n        String emptyCollectionName = \"\";\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n        mockController.publishState(emptyCollectionName, \"core0\", \"node0\", \"shard1\", null, 1, true, overseers.get(0));\n\n        mockController.createCollection(\"collection2\", 3);\n        // make sure the Overseer is still processing items\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(\"collection2\",\n              \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(\"collection2\", 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 3));\n\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard1\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(1, reader.getClusterState().getCollection(\"collection2\").getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(\"collection2\", \"shard3\", 15000));\n      }\n      \n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["344b0840364d990b29b97467bfcc766ff8325d11"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","344b0840364d990b29b97467bfcc766ff8325d11"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"344b0840364d990b29b97467bfcc766ff8325d11":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}