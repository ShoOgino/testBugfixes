{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a9a95db9416e75497c862dda290648d8dfdc83f","date":1252550690,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, new Object[]{\"distance\",\n            distance}));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08","date":1254612983,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, new Object[]{\"distance\",\n            distance}));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/core/nodes/ProximityQueryNode#ProximityQueryNode(List[QueryNode],CharSequence,Type,int,boolean).mjava","sourceNew":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","sourceOld":"  /**\n   * @param clauses\n   *          - QueryNode children\n   * @param field\n   *          - field name\n   * @param type\n   *          - type of proximity query\n   * @param distance\n   *          - positive integer that specifies the distance\n   * @param inorder\n   *          - true, if the tokens should be matched in the order of the\n   *          clauses\n   */\n  public ProximityQueryNode(List<QueryNode> clauses, CharSequence field,\n      Type type, int distance, boolean inorder) {\n    super(clauses);\n    setLeaf(false);\n    this.proximityType = type;\n    this.inorder = inorder;\n    this.field = field;\n    if (type == Type.NUMBER) {\n      if (distance <= 0) {\n        throw new QueryNodeError(new MessageImpl(\n            QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"distance\",\n            distance));\n\n      } else {\n        this.distance = distance;\n      }\n\n    }\n    clearFields(clauses, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"]},"commit2Childs":{"9a9a95db9416e75497c862dda290648d8dfdc83f":["c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"c7dd1ffd1851fd665236d9e4c5663ca9ecf14f08":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["9a9a95db9416e75497c862dda290648d8dfdc83f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}