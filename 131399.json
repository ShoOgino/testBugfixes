{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac == null && leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"/dev/null","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<FieldType, ReversedWildcardFilterFactory>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getIndexAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"514639c56678b2a4a73464fcf16103c7a22857ec","date":1482267702,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fieldType)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getIndexAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getIndexAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getReversedWildcardFilterFactory(FieldType).mjava","sourceNew":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fieldType)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getIndexAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","sourceOld":"  protected ReversedWildcardFilterFactory getReversedWildcardFilterFactory(FieldType fieldType) {\n    if (leadingWildcards == null) leadingWildcards = new HashMap<>();\n    ReversedWildcardFilterFactory fac = leadingWildcards.get(fieldType);\n    if (fac != null || leadingWildcards.containsKey(fac)) {\n      return fac;\n    }\n\n    Analyzer a = fieldType.getIndexAnalyzer();\n    if (a instanceof TokenizerChain) {\n      // examine the indexing analysis chain if it supports leading wildcards\n      TokenizerChain tc = (TokenizerChain)a;\n      TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n      for (TokenFilterFactory factory : factories) {\n        if (factory instanceof ReversedWildcardFilterFactory) {\n          fac = (ReversedWildcardFilterFactory)factory;\n          break;\n        }\n      }\n    }\n\n    leadingWildcards.put(fieldType, fac);\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"514639c56678b2a4a73464fcf16103c7a22857ec":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["514639c56678b2a4a73464fcf16103c7a22857ec"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","514639c56678b2a4a73464fcf16103c7a22857ec"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["514639c56678b2a4a73464fcf16103c7a22857ec","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"514639c56678b2a4a73464fcf16103c7a22857ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}