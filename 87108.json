{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#amILeader().mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    TimerContext timerContext = stats.time(\"collection_am_i_leader\");\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(\"collection_am_i_leader\");\n      } else  {\n        stats.error(\"collection_am_i_leader\");\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}