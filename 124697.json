{"path":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_LOCKLESS)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_LOCKLESS)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_LOCKLESS)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_LOCKLESS)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    if (segmentFileName.equals(IndexFileNames.SEGMENTS)) {\n      generation = 0;\n    } else {\n      generation = Long.parseLong(segmentFileName.substring(1+IndexFileNames.SEGMENTS.length()),\n                                  Character.MAX_RADIX);\n    }\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ee8d31906e3001783889a491e55f218013a190","date":1173949687,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT_SINGLE_NORM_FILE)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    IndexInput input = directory.openInput(segmentFileName);\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        addElement(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b1444275c93a8051a6fe6158639467a144ae0a4","date":1224502393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (0 == input.readByte())\n          userData = null;\n        else\n          userData = input.readString();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else {\n          userData = Collections.EMPTY_MAP;\n          if (0 != input.readByte()) {\n            userData.put(\"userData\", input.readString());\n          }\n        }\n      } else {\n        userData = Collections.EMPTY_MAP;\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (0 == input.readByte())\n          userData = null;\n        else\n          userData = input.readString();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fddb5d29a936205c0222094a91cf79b269e52d04","date":1243531856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.EMPTY_MAP;\n        }\n      } else {\n        userData = Collections.EMPTY_MAP;\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else {\n          userData = Collections.EMPTY_MAP;\n          if (0 != input.readByte()) {\n            userData.put(\"userData\", input.readString());\n          }\n        }\n      } else {\n        userData = Collections.EMPTY_MAP;\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.EMPTY_MAP;\n        }\n      } else {\n        userData = Collections.EMPTY_MAP;\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fddb5d29a936205c0222094a91cf79b269e52d04":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"4b1444275c93a8051a6fe6158639467a144ae0a4":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8a5cfde941b2f8208d739344fef3821381885618"],"67006a60923e2124212d3baa0d29b444bcbd8373":["c4ee8d31906e3001783889a491e55f218013a190"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["fddb5d29a936205c0222094a91cf79b269e52d04"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["e82780afe6097066eb5befb86e9432f077667e3d"],"c4ee8d31906e3001783889a491e55f218013a190":["8b6187898fc4413ccd18229711786550a280383c"],"8a5cfde941b2f8208d739344fef3821381885618":["eeefd99c477417e5c7c574228461ebafe92469d4"],"eeefd99c477417e5c7c574228461ebafe92469d4":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["4b1444275c93a8051a6fe6158639467a144ae0a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["67006a60923e2124212d3baa0d29b444bcbd8373"],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"fddb5d29a936205c0222094a91cf79b269e52d04":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"4b1444275c93a8051a6fe6158639467a144ae0a4":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"67006a60923e2124212d3baa0d29b444bcbd8373":["e82780afe6097066eb5befb86e9432f077667e3d"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["4b1444275c93a8051a6fe6158639467a144ae0a4"],"c4ee8d31906e3001783889a491e55f218013a190":["67006a60923e2124212d3baa0d29b444bcbd8373"],"8a5cfde941b2f8208d739344fef3821381885618":["1b54a9bc667895a2095a886184bf69a3179e63df"],"eeefd99c477417e5c7c574228461ebafe92469d4":["8a5cfde941b2f8208d739344fef3821381885618"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["eeefd99c477417e5c7c574228461ebafe92469d4"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["fddb5d29a936205c0222094a91cf79b269e52d04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"e82780afe6097066eb5befb86e9432f077667e3d":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"8b6187898fc4413ccd18229711786550a280383c":["c4ee8d31906e3001783889a491e55f218013a190"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}