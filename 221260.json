{"path":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","commits":[{"id":"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e","date":1420057962,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197ef3757cbbe5b443d8db292634534498adf4c6","date":1427902182,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n      // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"743e614fc76baead7dbf380c3b9530cd9ba72334","date":1427902234,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n      // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessor[IgnoreCommitOptimizeUpdateProcessorFactory]#processCommit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    if (ignoreOptimizeOnly && !cmd.optimize) {\n      // we're setup to only ignore optimize requests so it's OK to pass this commit on down the line\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    if (cmd.getReq().getParams().getBool(DistributedUpdateProcessor.COMMIT_END_POINT, false)) {\n      // this is a targeted commit from replica to leader needed for recovery, so can't be ignored\n      if (next != null) next.processCommit(cmd);\n      return;\n    }\n\n    final String cmdType = cmd.optimize ? \"optimize\" : \"commit\";\n    if (errorCode != null) {\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with error code: {}\", cmdType, errorCode.code);\n      rsp.setException(new SolrException(errorCode, responseMsg));\n    } else {\n      // errorcode is null, treat as a success with an optional message warning the commit request was ignored\n      IgnoreCommitOptimizeUpdateProcessorFactory.log.info(\n          \"{} from client application ignored with status code: 200\", cmdType);\n      if (responseMsg != null) {\n        NamedList<Object> responseHeader = rsp.getResponseHeader();\n        if (responseHeader != null) {\n          responseHeader.add(\"msg\", responseMsg);\n        } else {\n          responseHeader = new SimpleOrderedMap<Object>();\n          responseHeader.add(\"msg\", responseMsg);\n          rsp.add(\"responseHeader\", responseHeader);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"743e614fc76baead7dbf380c3b9530cd9ba72334":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e","197ef3757cbbe5b443d8db292634534498adf4c6"],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["197ef3757cbbe5b443d8db292634534498adf4c6"],"197ef3757cbbe5b443d8db292634534498adf4c6":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"743e614fc76baead7dbf380c3b9530cd9ba72334":[],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["743e614fc76baead7dbf380c3b9530cd9ba72334","197ef3757cbbe5b443d8db292634534498adf4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"197ef3757cbbe5b443d8db292634534498adf4c6":["743e614fc76baead7dbf380c3b9530cd9ba72334","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["743e614fc76baead7dbf380c3b9530cd9ba72334","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}