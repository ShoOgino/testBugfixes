{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#copyCompressedData(DataInput,int,DataOutput).mjava","commits":[{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#copyCompressedData(DataInput,int,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /** Copy bytes from <code>in</code> to <code>out</code> where\n   *  <code>in</code> is a LZ4-encoded stream. This method copies enough bytes\n   *  so that <code>out</code> can be used later on to restore the first\n   *  <code>length</code> bytes of the stream. This method always reads at\n   *  least one byte from <code>in</code> so make sure not to call this method\n   *  if <code>in</code> reached the end of the stream, even if\n   *  <code>length=0</code>. */\n  public static int copyCompressedData(DataInput in, int length, DataOutput out) throws IOException {\n    int n = 0;\n    do {\n      // literals\n      final byte token = in.readByte();\n      out.writeByte(token);\n      int literalLen = (token & 0xFF) >>> 4;\n      if (literalLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          literalLen += 0xFF;\n          out.writeByte(len);\n        }\n        literalLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      out.copyBytes(in, literalLen);\n      n += literalLen;\n      if (n >= length) {\n        break;\n      }\n\n      // matchs\n      out.copyBytes(in, 2); // match dec\n      int matchLen = token & 0x0F;\n      if (matchLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          matchLen += 0xFF;\n          out.writeByte(len);\n        }\n        matchLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      matchLen += MIN_MATCH;\n      n += matchLen;\n    } while (n < length);\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4#copyCompressedData(DataInput,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/LZ4#copyCompressedData(DataInput,int,DataOutput).mjava","sourceNew":"  /** Copy bytes from <code>in</code> to <code>out</code> where\n   *  <code>in</code> is a LZ4-encoded stream. This method copies enough bytes\n   *  so that <code>out</code> can be used later on to restore the first\n   *  <code>length</code> bytes of the stream. This method always reads at\n   *  least one byte from <code>in</code> so make sure not to call this method\n   *  if <code>in</code> reached the end of the stream, even if\n   *  <code>length=0</code>. */\n  public static int copyCompressedData(DataInput in, int length, DataOutput out) throws IOException {\n    int n = 0;\n    do {\n      // literals\n      final byte token = in.readByte();\n      out.writeByte(token);\n      int literalLen = (token & 0xFF) >>> 4;\n      if (literalLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          literalLen += 0xFF;\n          out.writeByte(len);\n        }\n        literalLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      out.copyBytes(in, literalLen);\n      n += literalLen;\n      if (n >= length) {\n        break;\n      }\n\n      // matchs\n      out.copyBytes(in, 2); // match dec\n      int matchLen = token & 0x0F;\n      if (matchLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          matchLen += 0xFF;\n          out.writeByte(len);\n        }\n        matchLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      matchLen += MIN_MATCH;\n      n += matchLen;\n    } while (n < length);\n    return n;\n  }\n\n","sourceOld":"  /** Copy bytes from <code>in</code> to <code>out</code> where\n   *  <code>in</code> is a LZ4-encoded stream. This method copies enough bytes\n   *  so that <code>out</code> can be used later on to restore the first\n   *  <code>length</code> bytes of the stream. This method always reads at\n   *  least one byte from <code>in</code> so make sure not to call this method\n   *  if <code>in</code> reached the end of the stream, even if\n   *  <code>length=0</code>. */\n  public static int copyCompressedData(DataInput in, int length, DataOutput out) throws IOException {\n    int n = 0;\n    do {\n      // literals\n      final byte token = in.readByte();\n      out.writeByte(token);\n      int literalLen = (token & 0xFF) >>> 4;\n      if (literalLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          literalLen += 0xFF;\n          out.writeByte(len);\n        }\n        literalLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      out.copyBytes(in, literalLen);\n      n += literalLen;\n      if (n >= length) {\n        break;\n      }\n\n      // matchs\n      out.copyBytes(in, 2); // match dec\n      int matchLen = token & 0x0F;\n      if (matchLen == 0x0F) {\n        byte len;\n        while ((len = in.readByte()) == (byte) 0xFF) {\n          matchLen += 0xFF;\n          out.writeByte(len);\n        }\n        matchLen += len & 0xFF;\n        out.writeByte(len);\n      }\n      matchLen += MIN_MATCH;\n      n += matchLen;\n    } while (n < length);\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}