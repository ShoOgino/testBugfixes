{"path":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":null,"sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea8d542b376999ce104ad63648836f7b3c4644","date":1305293658,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  protected void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81ea8d542b376999ce104ad63648836f7b3c4644":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["1da8d55113b689b06716246649de6f62430f15c0","81ea8d542b376999ce104ad63648836f7b3c4644"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","81ea8d542b376999ce104ad63648836f7b3c4644"],"c26f00b574427b55127e869b935845554afde1fa":["81ea8d542b376999ce104ad63648836f7b3c4644","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","81ea8d542b376999ce104ad63648836f7b3c4644"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"81ea8d542b376999ce104ad63648836f7b3c4644":["c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233"],"1da8d55113b689b06716246649de6f62430f15c0":["81ea8d542b376999ce104ad63648836f7b3c4644","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}