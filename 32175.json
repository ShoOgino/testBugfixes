{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(boolean randomAccess) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), scoreMode);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#scorerSupplier(LeafReaderContext).mjava","sourceNew":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), scoreMode);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n    final ScorerSupplier inScorerSupplier = in.scorerSupplier(context);\n    if (inScorerSupplier == null) {\n      return null;\n    }\n    return new ScorerSupplier() {\n      private boolean getCalled = false;\n      @Override\n      public Scorer get(long leadCost) throws IOException {\n        assert getCalled == false;\n        getCalled = true;\n        assert leadCost >= 0 : leadCost;\n        return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(leadCost), needsScores);\n      }\n\n      @Override\n      public long cost() {\n        final long cost = inScorerSupplier.cost();\n        assert cost >= 0;\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","9fc47cb7b4346802411bb432f501ed0673d7119e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}