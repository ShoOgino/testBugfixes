{"path":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","commits":[{"id":"bd72c170d0045d244f19bc40f18b517f56fbf9c9","date":1138916232,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/lucene_extras/org/apache/lucene/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        String str = ignoreCase ? tok.termText().toLowerCase() : tok.termText();\n\n        SynonymMap subMap = (SynonymMap)map.submap.get(str);\n\n        if (subMap !=null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        String str = ignoreCase ? tok.termText.toLowerCase() : tok.termText;\n\n        SynonymMap subMap = (SynonymMap)map.submap.get(str);\n\n        if (subMap !=null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5016c465288a8c5a7b3e4bf088167b26480f6913","date":1172858328,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        String str = ignoreCase ? tok.termText().toLowerCase() : tok.termText();\n\n        SynonymMap subMap = (SynonymMap)map.submap.get(str);\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        String str = ignoreCase ? tok.termText().toLowerCase() : tok.termText();\n\n        SynonymMap subMap = (SynonymMap)map.submap.get(str);\n\n        if (subMap !=null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        SynonymMap subMap = map.submap.get(tok.termBuffer(), 0, tok.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        String str = ignoreCase ? tok.termText().toLowerCase() : tok.termText();\n\n        SynonymMap subMap = (SynonymMap)map.submap.get(str);\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        TermAttribute termAtt = (TermAttribute) tok.getAttribute(TermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.termBuffer(), 0, termAtt.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n;\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      Token tok = nextTok();\n      if (tok != null) {\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        SynonymMap subMap = map.submap.get(tok.termBuffer(), 0, tok.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"699a8dbcd97bf804f448e19bbe341e6b05582d4d","date":1268603762,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        TermAttribute termAtt = (TermAttribute) tok.getAttribute(TermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.termBuffer(), 0, termAtt.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        TermAttribute termAtt = (TermAttribute) tok.getAttribute(TermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.termBuffer(), 0, termAtt.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n;\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilter#match(SynonymMap).mjava","sourceNew":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        TermAttribute termAtt = (TermAttribute) tok.getAttribute(TermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.termBuffer(), 0, termAtt.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private SynonymMap match(SynonymMap map) throws IOException {\n    SynonymMap result = null;\n\n    if (map.submap != null) {\n      AttributeSource tok = nextTok();\n      if (tok != null) {\n        // clone ourselves.\n        if (tok == this)\n          tok = cloneAttributes();\n        // check for positionIncrement!=1?  if>1, should not match, if==0, check multiple at this level?\n        TermAttribute termAtt = (TermAttribute) tok.getAttribute(TermAttribute.class);\n        SynonymMap subMap = map.submap.get(termAtt.termBuffer(), 0, termAtt.termLength());\n\n        if (subMap != null) {\n          // recurse\n          result = match(subMap);\n        }\n\n        if (result != null) {\n          matched.addFirst(tok);\n        } else {\n          // push back unmatched token\n          pushTok(tok);\n        }\n      }\n    }\n\n    // if no longer sequence matched, so if this node has synonyms, it's the match.\n    if (result==null && map.synonyms!=null) {\n      result = map;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["5016c465288a8c5a7b3e4bf088167b26480f6913"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"699a8dbcd97bf804f448e19bbe341e6b05582d4d":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"5016c465288a8c5a7b3e4bf088167b26480f6913":["bd72c170d0045d244f19bc40f18b517f56fbf9c9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"ad94625fb8d088209f46650c8097196fec67f00c":["699a8dbcd97bf804f448e19bbe341e6b05582d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bd72c170d0045d244f19bc40f18b517f56fbf9c9":["5016c465288a8c5a7b3e4bf088167b26480f6913"],"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd72c170d0045d244f19bc40f18b517f56fbf9c9"],"5016c465288a8c5a7b3e4bf088167b26480f6913":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"699a8dbcd97bf804f448e19bbe341e6b05582d4d":["ad94625fb8d088209f46650c8097196fec67f00c"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["699a8dbcd97bf804f448e19bbe341e6b05582d4d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}