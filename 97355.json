{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","commits":[{"id":"614e18596e0534d68f5eed09fa8e8f36a2d6e292","date":1544549940,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","pathOld":"/dev/null","sourceNew":"  private static final void waitForAndDiffTimestamps(final String label,\n                                                     final long minExpectedDelta,\n                                                     final TimeUnit minExpectedDeltaUnit,\n                                                     final BlockingQueue<Long> timestamps) {\n    try {\n      log.info(label + \": Waiting for 2 timestamps to be recorded\");\n      Long firstTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get first timestampe after max allowed polling\", firstTs);\n      Long secondTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get second timestampe after max allowed polling\", secondTs);\n      \n      final long deltaInNanos = secondTs - firstTs;\n      final long minExpectedDeltaInNanos = minExpectedDeltaUnit.toNanos(minExpectedDelta);\n      assertTrue(label + \": Delta between timestamps (\"+secondTs+\"ns - \"+firstTs+\"ns = \"+deltaInNanos+\"ns) is not \" +\n                 \"at least as much as min expected delay: \" + minExpectedDeltaInNanos + \"ns\",\n                 deltaInNanos >= minExpectedDeltaInNanos);\n    } catch (InterruptedException e) {\n      log.error(label + \": interupted\", e);\n      fail(label + \": interupted:\" + e.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0abaca9e5481b5c3660805111683e8ce53bef3","date":1544554124,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","pathOld":"/dev/null","sourceNew":"  private static final void waitForAndDiffTimestamps(final String label,\n                                                     final long minExpectedDelta,\n                                                     final TimeUnit minExpectedDeltaUnit,\n                                                     final BlockingQueue<Long> timestamps) {\n    try {\n      log.info(label + \": Waiting for 2 timestamps to be recorded\");\n      Long firstTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get first timestampe after max allowed polling\", firstTs);\n      Long secondTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get second timestampe after max allowed polling\", secondTs);\n      \n      final long deltaInNanos = secondTs - firstTs;\n      final long minExpectedDeltaInNanos = minExpectedDeltaUnit.toNanos(minExpectedDelta);\n      assertTrue(label + \": Delta between timestamps (\"+secondTs+\"ns - \"+firstTs+\"ns = \"+deltaInNanos+\"ns) is not \" +\n                 \"at least as much as min expected delay: \" + minExpectedDeltaInNanos + \"ns\",\n                 deltaInNanos >= minExpectedDeltaInNanos);\n    } catch (InterruptedException e) {\n      log.error(label + \": interupted\", e);\n      fail(label + \": interupted:\" + e.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","sourceNew":"  private static final void waitForAndDiffTimestamps(final String label,\n                                                     final long minExpectedDelta,\n                                                     final TimeUnit minExpectedDeltaUnit,\n                                                     final BlockingQueue<Long> timestamps) {\n    try {\n      log.info(\"{}: Waiting for 2 timestamps to be recorded\", label);\n      Long firstTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get first timestampe after max allowed polling\", firstTs);\n      Long secondTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get second timestampe after max allowed polling\", secondTs);\n      \n      final long deltaInNanos = secondTs - firstTs;\n      final long minExpectedDeltaInNanos = minExpectedDeltaUnit.toNanos(minExpectedDelta);\n      assertTrue(label + \": Delta between timestamps (\"+secondTs+\"ns - \"+firstTs+\"ns = \"+deltaInNanos+\"ns) is not \" +\n                 \"at least as much as min expected delay: \" + minExpectedDeltaInNanos + \"ns\",\n                 deltaInNanos >= minExpectedDeltaInNanos);\n    } catch (InterruptedException e) {\n      log.error(\"{}: interupted\", label, e);\n      fail(label + \": interupted:\" + e.toString());\n    }\n  }\n\n","sourceOld":"  private static final void waitForAndDiffTimestamps(final String label,\n                                                     final long minExpectedDelta,\n                                                     final TimeUnit minExpectedDeltaUnit,\n                                                     final BlockingQueue<Long> timestamps) {\n    try {\n      log.info(label + \": Waiting for 2 timestamps to be recorded\");\n      Long firstTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get first timestampe after max allowed polling\", firstTs);\n      Long secondTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get second timestampe after max allowed polling\", secondTs);\n      \n      final long deltaInNanos = secondTs - firstTs;\n      final long minExpectedDeltaInNanos = minExpectedDeltaUnit.toNanos(minExpectedDelta);\n      assertTrue(label + \": Delta between timestamps (\"+secondTs+\"ns - \"+firstTs+\"ns = \"+deltaInNanos+\"ns) is not \" +\n                 \"at least as much as min expected delay: \" + minExpectedDeltaInNanos + \"ns\",\n                 deltaInNanos >= minExpectedDeltaInNanos);\n    } catch (InterruptedException e) {\n      log.error(label + \": interupted\", e);\n      fail(label + \": interupted:\" + e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerSetPropertiesIntegrationTest#waitForAndDiffTimestamps(String,long,TimeUnit,BlockingQueue[Long]).mjava","sourceNew":null,"sourceOld":"  private static final void waitForAndDiffTimestamps(final String label,\n                                                     final long minExpectedDelta,\n                                                     final TimeUnit minExpectedDeltaUnit,\n                                                     final BlockingQueue<Long> timestamps) {\n    try {\n      log.info(\"{}: Waiting for 2 timestamps to be recorded\", label);\n      Long firstTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get first timestampe after max allowed polling\", firstTs);\n      Long secondTs = timestamps.poll(minExpectedDelta * 3, minExpectedDeltaUnit);\n      assertNotNull(label + \": Couldn't get second timestampe after max allowed polling\", secondTs);\n      \n      final long deltaInNanos = secondTs - firstTs;\n      final long minExpectedDeltaInNanos = minExpectedDeltaUnit.toNanos(minExpectedDelta);\n      assertTrue(label + \": Delta between timestamps (\"+secondTs+\"ns - \"+firstTs+\"ns = \"+deltaInNanos+\"ns) is not \" +\n                 \"at least as much as min expected delay: \" + minExpectedDeltaInNanos + \"ns\",\n                 deltaInNanos >= minExpectedDeltaInNanos);\n    } catch (InterruptedException e) {\n      log.error(\"{}: interupted\", label, e);\n      fail(label + \": interupted:\" + e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"614e18596e0534d68f5eed09fa8e8f36a2d6e292":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","614e18596e0534d68f5eed09fa8e8f36a2d6e292"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["614e18596e0534d68f5eed09fa8e8f36a2d6e292","7e0abaca9e5481b5c3660805111683e8ce53bef3"],"614e18596e0534d68f5eed09fa8e8f36a2d6e292":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}