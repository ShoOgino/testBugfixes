{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4b4e97a5e8ab5b96cc56c561131d720c756756b","date":1269362401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        final Collection<String> files = segmentInfos.files(directory, false);\n        for (final String fileName : files) { \n          if (!synced.contains(fileName)) {\n            assert directory.fileExists(fileName);\n            directory.sync(fileName);\n            synced.add(fileName);\n          }\n        }\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e","date":1277411648,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5947ccd7ba3770dcba5a0713dbd5496678256d9","date":1291744634,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2eeb4770be14d50eecf65d37dd5ab961fbaded2b","date":1296078937,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final SegmentInfos rollbackSegmentInfos = new SegmentInfos();\n      rollbackSegmentInfos.addAll(segmentInfos);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.clear();\n          segmentInfos.addAll(rollbackSegmentInfos);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7719bda090a2ae5bab940a27ba7bb9054b29818","date":1315503197,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, codecs, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory);\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // nocommit: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, null, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // nocommit: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // nocommit: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acb18c36adc6b846ef1a21eb7d32b90f0b0e6345","date":1323015504,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // TODO: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // nocommit: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7733816f2c0d688c0bbc68468196f1a848606f21","date":1323021691,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":"  /**\n   * Commit changes resulting from delete, undeleteAll operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // TODO: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // nocommit: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // TODO: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // TODO: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Commit changes resulting from delete, undeleteAll, or setNorm operations\n   * <p/>\n   * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional\n   * semantics).\n   *\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    // poll subreaders for changes\n    for (int i = 0; !hasChanges && i < subReaders.length; i++) {\n      hasChanges |= subReaders[i].hasChanges;\n    }\n    \n    if (hasChanges) {\n      segmentInfos.setUserData(commitUserData);\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      // TODO: Decide what to do with InfoStream here? Use default or keep NO_OUTPUT?\n      IndexFileDeleter deleter = new IndexFileDeleter(directory,\n                                                      deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                                      segmentInfos, InfoStream.NO_OUTPUT, null);\n      segmentInfos.updateGeneration(deleter.getLastSegmentInfos());\n      segmentInfos.changed();\n\n      // Checkpoint the state we are about to change, in\n      // case we have to roll back:\n      startCommit();\n\n      final List<SegmentInfo> rollbackSegments = segmentInfos.createBackupSegmentInfos(false);\n\n      boolean success = false;\n      try {\n        for (int i = 0; i < subReaders.length; i++)\n          subReaders[i].commit();\n\n        // Remove segments that contain only 100% deleted\n        // docs:\n        segmentInfos.pruneDeletedSegments();\n\n        // Sync all files we just wrote\n        directory.sync(segmentInfos.files(directory, false));\n        segmentInfos.commit(directory, segmentInfos.codecFormat());\n        success = true;\n      } finally {\n\n        if (!success) {\n\n          // Rollback changes that were made to\n          // SegmentInfos but failed to get [fully]\n          // committed.  This way this reader instance\n          // remains consistent (matched to what's\n          // actually in the index):\n          rollbackCommit();\n\n          // Recompute deletable files & remove them (so\n          // partially written .del files, etc, are\n          // removed):\n          deleter.refresh();\n\n          // Restore all SegmentInfos (in case we pruned some)\n          segmentInfos.rollbackSegmentInfos(rollbackSegments);\n        }\n      }\n\n      // Have the deleter remove any now unreferenced\n      // files due to this commit:\n      deleter.checkpoint(segmentInfos, true);\n      deleter.close();\n\n      maxIndexVersion = segmentInfos.getVersion();\n\n      if (writeLock != null) {\n        writeLock.release();  // release write lock\n        writeLock = null;\n      }\n    }\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["7b91922b55d15444d554721b352861d028eb8278"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["acb18c36adc6b846ef1a21eb7d32b90f0b0e6345","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"acb18c36adc6b846ef1a21eb7d32b90f0b0e6345":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","2eeb4770be14d50eecf65d37dd5ab961fbaded2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2eeb4770be14d50eecf65d37dd5ab961fbaded2b"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"2eeb4770be14d50eecf65d37dd5ab961fbaded2b":["cfd641edd796340315609425e9f70819e6d9ef0e"],"cfd641edd796340315609425e9f70819e6d9ef0e":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"7733816f2c0d688c0bbc68468196f1a848606f21":["4122a26e1fd0457a340616673a3d3aada370f713","acb18c36adc6b846ef1a21eb7d32b90f0b0e6345"],"7b91922b55d15444d554721b352861d028eb8278":["f7719bda090a2ae5bab940a27ba7bb9054b29818"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["2eeb4770be14d50eecf65d37dd5ab961fbaded2b"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["7733816f2c0d688c0bbc68468196f1a848606f21"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2eeb4770be14d50eecf65d37dd5ab961fbaded2b","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["acb18c36adc6b846ef1a21eb7d32b90f0b0e6345","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"4122a26e1fd0457a340616673a3d3aada370f713":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["acb18c36adc6b846ef1a21eb7d32b90f0b0e6345","4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"acb18c36adc6b846ef1a21eb7d32b90f0b0e6345":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7733816f2c0d688c0bbc68468196f1a848606f21","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","c5947ccd7ba3770dcba5a0713dbd5496678256d9","5f4e87790277826a2aea119328600dfb07761f32"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"2eeb4770be14d50eecf65d37dd5ab961fbaded2b":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233"],"cfd641edd796340315609425e9f70819e6d9ef0e":["2eeb4770be14d50eecf65d37dd5ab961fbaded2b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7733816f2c0d688c0bbc68468196f1a848606f21":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"7b91922b55d15444d554721b352861d028eb8278":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"f7719bda090a2ae5bab940a27ba7bb9054b29818":["7b91922b55d15444d554721b352861d028eb8278"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["f7719bda090a2ae5bab940a27ba7bb9054b29818","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["7733816f2c0d688c0bbc68468196f1a848606f21"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bde51b089eb7f86171eb3406e38a274743f9b7ac","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}