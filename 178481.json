{"path":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", s);\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", s);\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      try (TokenStream ts = a.tokenStream(\"foo\", s)) {\n        final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n        final BytesRef termBytes = termAtt.getBytesRef();\n        ts.reset();\n\n        int count = 0;\n        boolean changed = false;\n\n        while(ts.incrementToken()) {\n          termAtt.fillBytesRef();\n          if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n            // The value was changed during analysis.  Keep iterating so the\n            // tokenStream is exhausted.\n            changed = true;\n          }\n          count++;\n        }\n\n        ts.end();\n        // Did we iterate just once and the value was unchanged?\n        if (!changed && count == 1) {\n          return s;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", s);\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":["9ca3876d7ad90122420134007bec508c30af5a18","cf7efd82433f3f64684711c16edfd149db6af111","c83d6c4335f31cae14f625a222bc842f20073dcd","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","17d78bc3fbc0b27e48b38e68992a03f25053bc03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      try (TokenStream ts = a.tokenStream(\"foo\", s)) {\n        final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n        final BytesRef termBytes = termAtt.getBytesRef();\n        ts.reset();\n\n        int count = 0;\n        boolean changed = false;\n\n        while(ts.incrementToken()) {\n          termAtt.fillBytesRef();\n          if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n            // The value was changed during analysis.  Keep iterating so the\n            // tokenStream is exhausted.\n            changed = true;\n          }\n          count++;\n        }\n\n        ts.end();\n        // Did we iterate just once and the value was unchanged?\n        if (!changed && count == 1) {\n          return s;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      try (TokenStream ts = a.tokenStream(\"foo\", s)) {\n        final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n        final BytesRef termBytes = termAtt.getBytesRef();\n        ts.reset();\n\n        int count = 0;\n        boolean changed = false;\n\n        while(ts.incrementToken()) {\n          termAtt.fillBytesRef();\n          if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n            // The value was changed during analysis.  Keep iterating so the\n            // tokenStream is exhausted.\n            changed = true;\n          }\n          count++;\n        }\n\n        ts.end();\n        // Did we iterate just once and the value was unchanged?\n        if (!changed && count == 1) {\n          return s;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      try (TokenStream ts = a.tokenStream(\"foo\", s)) {\n        final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n        ts.reset();\n\n        int count = 0;\n        boolean changed = false;\n\n        while(ts.incrementToken()) {\n          final BytesRef termBytes = termAtt.getBytesRef();\n          if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n            // The value was changed during analysis.  Keep iterating so the\n            // tokenStream is exhausted.\n            changed = true;\n          }\n          count++;\n        }\n\n        ts.end();\n        // Did we iterate just once and the value was unchanged?\n        if (!changed && count == 1) {\n          return s;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random());\n    while(true) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      try (TokenStream ts = a.tokenStream(\"foo\", s)) {\n        final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n        final BytesRef termBytes = termAtt.getBytesRef();\n        ts.reset();\n\n        int count = 0;\n        boolean changed = false;\n\n        while(ts.incrementToken()) {\n          termAtt.fillBytesRef();\n          if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n            // The value was changed during analysis.  Keep iterating so the\n            // tokenStream is exhausted.\n            changed = true;\n          }\n          count++;\n        }\n\n        ts.end();\n        // Did we iterate just once and the value was unchanged?\n        if (!changed && count == 1) {\n          return s;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["6613659748fe4411a7dcf85266e55db1f95f7315"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804b857d1066ab5185b3b9101bde41b0b71426ec"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"6613659748fe4411a7dcf85266e55db1f95f7315":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}