{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","commits":[{"id":"dfc6a597ede3930c7c84f3be4335d50c6a191fcd","date":1417401558,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_ti)\" : \"max=field(test_ti)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea826cad27aae1c1287b70d2eaf0202ec6aa754","date":1490169633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","sourceNew":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_ti)\" : \"max=field(test_ti)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa09e86cb64347ee96ff0a59f09b539abd620e57","date":1490280013,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","sourceNew":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_ti)\" : \"max=field(test_ti)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","sourceNew":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false\n    // this is currently ok on fields that don't exist on any docs in the index\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      for (String hint : Arrays.asList(\"\", \" hint=top_fc\")) {\n        assertQ(req(params(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+f+hint+\"}\"))\n                , \"*[count(//doc)=0]\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n  }\n\n","bugFix":null,"bugIntro":["f91f5834f35d94627a0568326e442dce3d92764c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f91f5834f35d94627a0568326e442dce3d92764c","date":1561436441,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testEmptyCollection().mjava","sourceNew":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false\n    // this is currently ok on fields that don't exist on any docs in the index\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      for (String hint : Arrays.asList(\"\", \" hint=top_fc\")) {\n        SolrException e = expectThrows(SolrException.class,\n            () -> h.query(req(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+f + hint +\"}\")));\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"unexpected Message: \" + e.getMessage(),\n            e.getMessage().contains(\"Collapsing field '\" + f + \"' \" +\n                \"should be either docValues enabled or indexed with uninvertible enabled\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyCollection() throws Exception {\n    // group_s is docValues=false and group_dv_s is docValues=true\n    String group = (random().nextBoolean() ? \"group_s\" : \"group_s_dv\");\n\n    // min-or-max is for CollapsingScoreCollector vs. CollapsingFieldValueCollector\n    String optional_min_or_max = (random().nextBoolean() ? \"\" : (random().nextBoolean() ? \"min=field(test_i)\" : \"max=field(test_i)\"));\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=\"+group+\" \"+optional_min_or_max+\"}\");\n    assertQ(req(params), \"*[count(//doc)=0]\");\n\n    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false\n    // this is currently ok on fields that don't exist on any docs in the index\n    for (String f : Arrays.asList(\"not_indexed_sS\", \"indexed_s_not_uninvert\")) {\n      for (String hint : Arrays.asList(\"\", \" hint=top_fc\")) {\n        assertQ(req(params(\"q\", \"*:*\", \"fq\", \"{!collapse field=\"+f+hint+\"}\"))\n                , \"*[count(//doc)=0]\");\n      }\n    }\n  }\n\n","bugFix":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dfc6a597ede3930c7c84f3be4335d50c6a191fcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f91f5834f35d94627a0568326e442dce3d92764c":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["dfc6a597ede3930c7c84f3be4335d50c6a191fcd"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f91f5834f35d94627a0568326e442dce3d92764c"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["dfc6a597ede3930c7c84f3be4335d50c6a191fcd"]},"commit2Childs":{"dfc6a597ede3930c7c84f3be4335d50c6a191fcd":["fa09e86cb64347ee96ff0a59f09b539abd620e57","5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dfc6a597ede3930c7c84f3be4335d50c6a191fcd"],"f91f5834f35d94627a0568326e442dce3d92764c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["f91f5834f35d94627a0568326e442dce3d92764c"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fa09e86cb64347ee96ff0a59f09b539abd620e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}