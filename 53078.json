{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","commits":[{"id":"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e","date":1277411648,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory(random);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory(random);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n    \n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testFutureCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testFutureCommit().mjava","sourceNew":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testFutureCommit() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocument(doc);\n\n    // commit to \"first\"\n    Map<String,String> commitData = new HashMap<String,String>();\n    commitData.put(\"tag\", \"first\");\n    w.commit(commitData);\n\n    // commit to \"second\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"second\");\n    w.commit(commitData);\n    w.close();\n\n    // open \"first\" with IndexWriter\n    IndexCommit commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"first\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE).setIndexCommit(commit));\n\n    assertEquals(1, w.numDocs());\n\n    // commit IndexWriter to \"third\"\n    w.addDocument(doc);\n    commitData.put(\"tag\", \"third\");\n    w.commit(commitData);\n    w.close();\n\n    // make sure \"second\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"second\")) {\n        commit = c;\n        break;\n      }\n    }\n\n    assertNotNull(commit);\n\n    IndexReader r = IndexReader.open(commit, true);\n    assertEquals(2, r.numDocs());\n    r.close();\n\n    // open \"second\", w/ writeable IndexReader & commit\n    r = IndexReader.open(commit, NoDeletionPolicy.INSTANCE, false);\n    assertEquals(2, r.numDocs());\n    r.deleteDocument(0);\n    r.deleteDocument(1);\n    commitData.put(\"tag\", \"fourth\");\n    r.commit(commitData);\n    r.close();\n\n    // make sure \"third\" commit is still there\n    commit = null;\n    for(IndexCommit c : IndexReader.listCommits(dir)) {\n      if (c.getUserData().get(\"tag\").equals(\"third\")) {\n        commit = c;\n        break;\n      }\n    }\n    assertNotNull(commit);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}