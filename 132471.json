{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next(Token).mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            String text = termAtt.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n            String text = nextToken.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return nextToken;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return nextToken;\n                }\n\n            }\n\n        }\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"337606876b0200b8088b9ce88788c1db50e3faa9","date":1254578052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            String text = termAtt.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n\n        while (input.incrementToken()) {\n            char text[] = termAtt.termBuffer();\n            int termLength = termAtt.termLength();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (!stopTable.contains(text, 0, termLength)) {\n                switch (Character.getType(text[0])) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (termLength>1) {\n                        return true;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return true;\n                }\n\n            }\n\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"337606876b0200b8088b9ce88788c1db50e3faa9":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["337606876b0200b8088b9ce88788c1db50e3faa9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"337606876b0200b8088b9ce88788c1db50e3faa9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["337606876b0200b8088b9ce88788c1db50e3faa9"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}