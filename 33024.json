{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3ce3653f0052742fbc4a4210f95cf5f4c6c792","date":1329824089,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    // TODO: maybe we should do this wrapping in another test?\n    leftReader = maybeWrap(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrap(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c939a28130e1107d4e349d6c10d1a92c489662","date":1330299480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    // TODO: maybe we should do this wrapping in another test?\n    leftReader = maybeWrap(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrap(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    leftWriter.close();\n    rightReader = rightWriter.getReader();\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random(), false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random, false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random.nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random(), null);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random(), false);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random(), null);\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene40(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    Assume.assumeTrue(rightCodec.simpleNormsFormat() != null);\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    Assume.assumeTrue(rightCodec.simpleNormsFormat() != null);\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","date":1359743129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene41(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    // TODO: it would also be nice to support preflex, but it doesn't\n    // support a lot of the current feature set (docvalues, statistics)\n    // so this would make assertEquals complicated.\n\n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea3c18d8f37008425940502c58fd80ba4b5397c1","date":1361154566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene45(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene45(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene45(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene42(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene45(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    _TestUtil.checkReader(leftReader);\n    _TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    Analyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    Analyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    \n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene46(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.shutdown();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.shutdown();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene410(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene49(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"941b7027a51547b0a38d711bc08ec354f9e2e4a7","date":1411394279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Default(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Lucene410(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now it's SimpleText vs Default(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now its SimpleText vs Default(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8af96162d6e24bbd73a74cf381037e6aea675cd8","date":1422142293,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now it's SimpleText vs Default(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newFSDirectory(createTempDir(\"leftDir\"));\n    rightDir = newFSDirectory(createTempDir(\"rightDir\"));\n\n    seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n\n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    // for now it's SimpleText vs Default(random postings format)\n    // as this gives the best overall coverage. when we have more\n    // codecs we should probably pick 2 from Codec.availableCodecs()\n    \n    leftCodec = Codec.forName(\"SimpleText\");\n    rightCodec = new RandomCodec(random());\n\n    leftDir = newDirectory();\n    rightDir = newDirectory();\n\n    long seed = random().nextLong();\n\n    // must use same seed because of random payloads, etc\n    int maxTermLength = TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH);\n    MockAnalyzer leftAnalyzer = new MockAnalyzer(new Random(seed));\n    leftAnalyzer.setMaxTokenLength(maxTermLength);\n    MockAnalyzer rightAnalyzer = new MockAnalyzer(new Random(seed));\n    rightAnalyzer.setMaxTokenLength(maxTermLength);\n\n    // but these can be different\n    // TODO: this turns this into a really big test of Multi*, is that what we want?\n    IndexWriterConfig leftConfig = newIndexWriterConfig(leftAnalyzer);\n    leftConfig.setCodec(leftCodec);\n    // preserve docids\n    leftConfig.setMergePolicy(newLogMergePolicy());\n\n    IndexWriterConfig rightConfig = newIndexWriterConfig(rightAnalyzer);\n    rightConfig.setCodec(rightCodec);\n    // preserve docids\n    rightConfig.setMergePolicy(newLogMergePolicy());\n\n    // must use same seed because of random docvalues fields, etc\n    RandomIndexWriter leftWriter = new RandomIndexWriter(new Random(seed), leftDir, leftConfig);\n    RandomIndexWriter rightWriter = new RandomIndexWriter(new Random(seed), rightDir, rightConfig);\n    \n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = maybeWrapReader(leftWriter.getReader());\n    leftWriter.close();\n    rightReader = maybeWrapReader(rightWriter.getReader());\n    rightWriter.close();\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    info = \"left: \" + leftCodec.toString() + \" / right: \" + rightCodec.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea3c18d8f37008425940502c58fd80ba4b5397c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d6c939a28130e1107d4e349d6c10d1a92c489662"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["6613659748fe4411a7dcf85266e55db1f95f7315","e1151ecb4798f5c31137aec032c241638018ed20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea3c18d8f37008425940502c58fd80ba4b5397c1"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e1151ecb4798f5c31137aec032c241638018ed20":["6613659748fe4411a7dcf85266e55db1f95f7315"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"11a746437bc5c0a0b3df0337ed249c387c812871":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e1151ecb4798f5c31137aec032c241638018ed20"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["2b3ce3653f0052742fbc4a4210f95cf5f4c6c792"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8435160e9702b19398118ddf76b61c846612b6a4"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["5da0b42730b6b99b31389ef94cb97384e83b9ede","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2b3ce3653f0052742fbc4a4210f95cf5f4c6c792":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","11a746437bc5c0a0b3df0337ed249c387c812871"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["5da0b42730b6b99b31389ef94cb97384e83b9ede","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["0837ab0472feecb3a54260729d845f839e1cbd72"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8af96162d6e24bbd73a74cf381037e6aea675cd8"]},"commit2Childs":{"ea3c18d8f37008425940502c58fd80ba4b5397c1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2b3ce3653f0052742fbc4a4210f95cf5f4c6c792"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"e1151ecb4798f5c31137aec032c241638018ed20":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8af96162d6e24bbd73a74cf381037e6aea675cd8"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"8435160e9702b19398118ddf76b61c846612b6a4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"2b3ce3653f0052742fbc4a4210f95cf5f4c6c792":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["f7178a82d1134111f4511f28bb9ad57573a57d93","db4fdbf3d262768eabc027cd8321edca0cd11fa8","d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ea3c18d8f37008425940502c58fd80ba4b5397c1","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}