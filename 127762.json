{"path":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    // we generate aweful regexps: good for testing.\n    // but for preflex codec, the test can be very slow, so use less iterations.\n    int num = Codec.getDefault().getName().equals(\"Lucene3x\") ? 100 * RANDOM_MULTIPLIER : atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp='\" + reg + \"'\");\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp='\" + reg + \"'\");\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpRandom2#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp='\" + reg + \"'\");\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp='\" + reg + \"'\");\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","71da933d30aea361ccc224d6544c451cbf49916d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}