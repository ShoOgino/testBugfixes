{"path":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","commits":[{"id":"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb","date":1296811660,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"/dev/null","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a613a8df324c5f834b6c2b6fb5bb945431755","date":1296820909,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream without charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"/dev/null","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"/dev/null","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testCharsetOutsideDocument().mjava","sourceNew":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","sourceOld":"  // This test should also test charset detection in UpdateRequestHandler,\n  // but the DocumentAnalysisRequestHandler is simplier to use/check.\n  @Test\n  public void testCharsetOutsideDocument() throws Exception {\n    final byte[] xmlBytes = (\n      \"<docs>\\r\\n\" +\n      \" <doc>\\r\\n\" +\n      \"  <field name=\\\"id\\\">Müller</field>\\r\\n\" +\n      \" </doc>\" +\n      \"</docs>\"\n    ).getBytes(\"ISO-8859-1\");\n    \n    // we declare a content stream with charset:\n    final ContentStream cs = new ByteStream(xmlBytes, \"application/xml; charset=ISO-8859-1\");\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    assertNotNull(request);\n    final List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument doc = documents.get(0);\n    assertEquals(\"Müller\", doc.getField(\"id\").getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651a613a8df324c5f834b6c2b6fb5bb945431755":["2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"c26f00b574427b55127e869b935845554afde1fa":["651a613a8df324c5f834b6c2b6fb5bb945431755","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651a613a8df324c5f834b6c2b6fb5bb945431755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"651a613a8df324c5f834b6c2b6fb5bb945431755":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}