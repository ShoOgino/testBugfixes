{"path":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED and INDEXED, and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    String str;\n\n    str = initArgs.get(\"positionIncrementGap\");\n    if (str!=null) positionIncrementGap = Integer.parseInt(str);\n    initArgs.remove(\"positionIncrementGap\");\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f3ac363fd9c46488a0996cc9c80b7d0bf005dbd","date":1138921307,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED and INDEXED, and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED and INDEXED, and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    String str;\n\n    str = initArgs.get(\"positionIncrementGap\");\n    if (str!=null) positionIncrementGap = Integer.parseInt(str);\n    initArgs.remove(\"positionIncrementGap\");\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f","date":1235359663,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED and INDEXED, and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72e3710bede9618eb9b2b5c6936369f3d3f9579","date":1239534189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF_POSITIONS;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":["d1a4c3e86c634e830c1a7217c6bc2b5dc709259f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac","date":1268682985,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF_POSITIONS;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9f3ac363fd9c46488a0996cc9c80b7d0bf005dbd":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["d1a4c3e86c634e830c1a7217c6bc2b5dc709259f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f":["9f3ac363fd9c46488a0996cc9c80b7d0bf005dbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9f3ac363fd9c46488a0996cc9c80b7d0bf005dbd":["d1a4c3e86c634e830c1a7217c6bc2b5dc709259f"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["9f3ac363fd9c46488a0996cc9c80b7d0bf005dbd"],"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"d1a4c3e86c634e830c1a7217c6bc2b5dc709259f":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}