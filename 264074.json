{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#pushMaxBufferedDocs().mjava","sourceNew":null,"sourceOld":"  /**\n   * If we are flushing by doc count (not by RAM usage), and\n   * using LogDocMergePolicy then push maxBufferedDocs down\n   * as its minMergeDocs, to keep backwards compatibility.\n   */\n  private void pushMaxBufferedDocs() {\n    if (docWriter.getMaxBufferedDocs() != IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      final MergePolicy mp = mergePolicy;\n      if (mp instanceof LogDocMergePolicy) {\n        LogDocMergePolicy lmp = (LogDocMergePolicy) mp;\n        final int maxBufferedDocs = docWriter.getMaxBufferedDocs();\n        if (lmp.getMinMergeDocs() != maxBufferedDocs) {\n          if (infoStream != null)\n            message(\"now push maxBufferedDocs \" + maxBufferedDocs + \" to LogDocMergePolicy\");\n          lmp.setMinMergeDocs(maxBufferedDocs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","00b21520fafb9860ce0318d7be5ea84619c185ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","00b21520fafb9860ce0318d7be5ea84619c185ad","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}