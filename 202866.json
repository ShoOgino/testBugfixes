{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new PushFieldsConsumer(state) {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new MemoryFieldsConsumer(state);\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new PushFieldsConsumer(state) {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    return new MemoryFieldsConsumer(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f89e8a6aac05753cde4c83d62a74356098200d":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["24f89e8a6aac05753cde4c83d62a74356098200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}