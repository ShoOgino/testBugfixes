{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    super.getBounds(bounds);\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    super.getBounds(bounds);\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930697bfbd175bff5edaaf0fa2a8e84c7182dbaf","date":1460718675,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void getBounds(Bounds bounds) {\n    super.getBounds(bounds);\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a63b25618cf4d4ec36a1f625e9d7420fa1fee341","date":1460726934,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void getBounds(Bounds bounds) {\n    super.getBounds(bounds);\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a250b817d38fdb6f0411589342b46d249c5cf","date":1465297838,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n      final Membership m = intersectionBounds.get(edge);\n      if (m != null) {\n        bounds.addIntersection(planetModel, edgePlanes.get(edge), edge, m);\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["f9369473490cca80a5b92824279ebc7df00dc255"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9369473490cca80a5b92824279ebc7df00dc255","date":1472162990,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    for (final SidedPlane invertedEdge : invertedEdges) {\n      final SidedPlane nextEdge = nextBrotherMap.get(invertedEdge);\n      bounds.addIntersection(planetModel, invertedEdge, nextEdge, prevBrotherMap.get(invertedEdge), nextBrotherMap.get(nextEdge));\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n      final Membership m = intersectionBounds.get(edge);\n      if (m != null) {\n        bounds.addIntersection(planetModel, edgePlanes.get(edge), edge, m);\n      }\n    }\n    \n  }\n\n","bugFix":["bd7a250b817d38fdb6f0411589342b46d249c5cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    for (final SidedPlane invertedEdge : invertedEdges) {\n      final SidedPlane nextEdge = nextBrotherMap.get(invertedEdge);\n      bounds.addIntersection(planetModel, invertedEdge, nextEdge, prevBrotherMap.get(invertedEdge), nextBrotherMap.get(nextEdge));\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void getBounds(Bounds bounds) {\n    // Because of holes, we don't want to use superclass method\n    if (localIsWithin(planetModel.NORTH_POLE)) {\n      bounds.noTopLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.NORTH_POLE);\n    }\n    if (localIsWithin(planetModel.SOUTH_POLE)) {\n      bounds.noBottomLatitudeBound().noLongitudeBound()\n        .addPoint(planetModel.SOUTH_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_X_POLE)) {\n      bounds.addPoint(planetModel.MIN_X_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_X_POLE)) {\n      bounds.addPoint(planetModel.MAX_X_POLE);\n    }\n    if (localIsWithin(planetModel.MIN_Y_POLE)) {\n      bounds.addPoint(planetModel.MIN_Y_POLE);\n    }\n    if (localIsWithin(planetModel.MAX_Y_POLE)) {\n      bounds.addPoint(planetModel.MAX_Y_POLE);\n    }\n\n    bounds.isWide();\n\n    // Add all the points\n    for (final GeoPoint point : points) {\n      bounds.addPoint(point);\n    }\n\n    // Add planes with membership.\n    for (final SidedPlane edge : edges) {\n      bounds.addPlane(planetModel, edge, eitherBounds.get(edge));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a63b25618cf4d4ec36a1f625e9d7420fa1fee341":["40aa98241c87d86a0077beb8023713d93a0becfe","930697bfbd175bff5edaaf0fa2a8e84c7182dbaf"],"bd7a250b817d38fdb6f0411589342b46d249c5cf":["930697bfbd175bff5edaaf0fa2a8e84c7182dbaf"],"930697bfbd175bff5edaaf0fa2a8e84c7182dbaf":["40aa98241c87d86a0077beb8023713d93a0becfe"],"f9369473490cca80a5b92824279ebc7df00dc255":["bd7a250b817d38fdb6f0411589342b46d249c5cf"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["930697bfbd175bff5edaaf0fa2a8e84c7182dbaf","f9369473490cca80a5b92824279ebc7df00dc255"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9369473490cca80a5b92824279ebc7df00dc255"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"a63b25618cf4d4ec36a1f625e9d7420fa1fee341":[],"bd7a250b817d38fdb6f0411589342b46d249c5cf":["f9369473490cca80a5b92824279ebc7df00dc255"],"930697bfbd175bff5edaaf0fa2a8e84c7182dbaf":["a63b25618cf4d4ec36a1f625e9d7420fa1fee341","bd7a250b817d38fdb6f0411589342b46d249c5cf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f9369473490cca80a5b92824279ebc7df00dc255":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","a63b25618cf4d4ec36a1f625e9d7420fa1fee341","930697bfbd175bff5edaaf0fa2a8e84c7182dbaf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","a63b25618cf4d4ec36a1f625e9d7420fa1fee341","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}