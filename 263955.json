{"path":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testReplicaCanBecomeLeader().mjava","commits":[{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testReplicaCanBecomeLeader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaCanBecomeLeader() throws InterruptedException {\r\n    String collection = \"replicaCanBecomeLeader\";\r\n    ZkShardTerms leaderTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms replicaTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    leaderTerms.registerTerm(\"leader\");\r\n    replicaTerms.registerTerm(\"replica\");\r\n\r\n    leaderTerms.ensureTermsIsHigher(\"leader\", Collections.singleton(\"replica\"));\r\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(true, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    replicaTerms.startRecovering(\"replica\");\r\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    replicaTerms.doneRecovering(\"replica\");\r\n    waitFor(true, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    leaderTerms.close();\r\n    replicaTerms.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testReplicaCanBecomeLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkShardTermsTest#testReplicaCanBecomeLeader().mjava","sourceNew":"  public void testReplicaCanBecomeLeader() throws InterruptedException {\n    String collection = \"replicaCanBecomeLeader\";\n    ZkShardTerms leaderTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\n    ZkShardTerms replicaTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\n    leaderTerms.registerTerm(\"leader\");\n    replicaTerms.registerTerm(\"replica\");\n\n    leaderTerms.ensureTermsIsHigher(\"leader\", Collections.singleton(\"replica\"));\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\n    waitFor(true, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\n\n    replicaTerms.startRecovering(\"replica\");\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\n\n    replicaTerms.doneRecovering(\"replica\");\n    waitFor(true, () -> replicaTerms.canBecomeLeader(\"replica\"));\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\n\n    leaderTerms.close();\n    replicaTerms.close();\n  }\n\n","sourceOld":"  public void testReplicaCanBecomeLeader() throws InterruptedException {\r\n    String collection = \"replicaCanBecomeLeader\";\r\n    ZkShardTerms leaderTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    ZkShardTerms replicaTerms = new ZkShardTerms(collection, \"shard1\", cluster.getZkClient());\r\n    leaderTerms.registerTerm(\"leader\");\r\n    replicaTerms.registerTerm(\"replica\");\r\n\r\n    leaderTerms.ensureTermsIsHigher(\"leader\", Collections.singleton(\"replica\"));\r\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(true, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    replicaTerms.startRecovering(\"replica\");\r\n    waitFor(false, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    replicaTerms.doneRecovering(\"replica\");\r\n    waitFor(true, () -> replicaTerms.canBecomeLeader(\"replica\"));\r\n    waitFor(false, () -> leaderTerms.skipSendingUpdatesTo(\"replica\"));\r\n\r\n    leaderTerms.close();\r\n    replicaTerms.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}