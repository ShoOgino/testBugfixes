{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"/dev/null","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4a1e501646d5889b8128849329c2e6e52fc3615","date":1498729990,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n    assert packet.applied.getCount() == 1: \"packet=\" + packet;\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    assert numTerms.get() >= 0: \"numTerms=\" + numTerms + \" packet=\" + packet;\n    \n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n    assert packet.applied.getCount() == 1: \"packet=\" + packet;\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    assert numTerms.get() >= 0: \"numTerms=\" + numTerms + \" packet=\" + packet;\n    \n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#finished(FrozenBufferedUpdates).mjava","sourceNew":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n    assert packet.applied.getCount() == 1: \"packet=\" + packet;\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    assert numTerms.get() >= 0: \"numTerms=\" + numTerms + \" packet=\" + packet;\n    \n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","sourceOld":"  /** Called by indexing threads once they are fully done resolving all deletes for the provided\n   *  delGen.  We track the completed delGens and record the maximum delGen for which all prior\n   *  delGens, inclusive, are completed, so that it's safe for doc values updates to apply and write. */\n\n  public synchronized void finished(FrozenBufferedUpdates packet) {\n    // TODO: would be a bit more memory efficient to track this per-segment, so when each segment writes it writes all packets finished for\n    // it, rather than only recording here, across all segments.  But, more complex code, and more CPU, and maybe not so much impact in\n    // practice?\n    assert packet.applied.getCount() == 1: \"packet=\" + packet;\n\n    packet.applied.countDown();\n\n    updates.remove(packet);\n    numTerms.addAndGet(-packet.numTermDeletes);\n    assert numTerms.get() >= 0: \"numTerms=\" + numTerms + \" packet=\" + packet;\n    \n    bytesUsed.addAndGet(-packet.bytesUsed);\n\n    finishedSegment(packet.delGen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["b4a1e501646d5889b8128849329c2e6e52fc3615"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","b4a1e501646d5889b8128849329c2e6e52fc3615"],"b4a1e501646d5889b8128849329c2e6e52fc3615":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"b4a1e501646d5889b8128849329c2e6e52fc3615":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","30c8e5574b55d57947e989443dfde611646530ee"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4a1e501646d5889b8128849329c2e6e52fc3615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}