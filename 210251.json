{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"9227359ab3bd86e5b85fab89a99332da7d5bacb1","date":1490341270,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n    boolean removeListeners = op.getBoolean(\"removeListeners\", false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(\"trigger\")) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No listeners should exist for trigger: \" + triggerName + \". Found listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0390bd2336326cb638d08a61990d15a1711b1bc0","date":1493361021,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n    boolean removeListeners = op.getBoolean(\"removeListeners\", false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(\"trigger\")) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot remove trigger: \" + triggerName + \" because it has active listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n    boolean removeListeners = op.getBoolean(\"removeListeners\", false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(\"trigger\")) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No listeners should exist for trigger: \" + triggerName + \". Found listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    boolean removeListeners = op.getBoolean(REMOVE_LISTENERS, false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(TRIGGER)) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot remove trigger: \" + triggerName + \" because it has active listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n    boolean removeListeners = op.getBoolean(\"removeListeners\", false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(\"trigger\")) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot remove trigger: \" + triggerName + \" because it has active listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":null,"sourceOld":"  private void handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n    boolean removeListeners = op.getBoolean(REMOVE_LISTENERS, false);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n\n    Map<String, Map<String, Object>> listeners = (Map<String, Map<String, Object>>) autoScalingConf.get(\"listeners\");\n    Set<String> activeListeners = new HashSet<>();\n    if (listeners != null) {\n      for (Map.Entry<String, Map<String, Object>> entry : listeners.entrySet()) {\n        Map<String, Object> listenerProps = entry.getValue();\n        if (triggerName.equals(listenerProps.get(TRIGGER)) && !removeListeners) {\n          activeListeners.add(entry.getKey());\n        }\n      }\n    }\n    if (removeListeners) {\n      for (String activeListener : activeListeners) {\n        zkSetListener(container.getZkController().getZkStateReader(), activeListener, null);\n      }\n    } else if (!activeListeners.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot remove trigger: \" + triggerName + \" because it has active listeners: \" + activeListeners);\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0390bd2336326cb638d08a61990d15a1711b1bc0":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["0390bd2336326cb638d08a61990d15a1711b1bc0"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0390bd2336326cb638d08a61990d15a1711b1bc0":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["0390bd2336326cb638d08a61990d15a1711b1bc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}