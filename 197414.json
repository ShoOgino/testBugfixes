{"path":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"/crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"/crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"solr/core/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"/crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  @Test\n  public void testAdvanced() throws Exception {\n    lrf.args.put(CommonParams.VERSION,\"2.2\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"overwrite\", \"false\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add overwrite=\\\"false\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//str[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,CommonParams.VERSION,\"2.2\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["c26f00b574427b55127e869b935845554afde1fa"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["c26f00b574427b55127e869b935845554afde1fa","5ff704ef91e9ae30ca59babb23ece85720701b60"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["c26f00b574427b55127e869b935845554afde1fa","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["a71f63026529f3c1f03cfdd664910873ab2369ae"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5ff704ef91e9ae30ca59babb23ece85720701b60"],"30c8e5574b55d57947e989443dfde611646530ee":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}