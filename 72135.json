{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","pathOld":"/dev/null","sourceNew":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, \"UTF-8\"));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","pathOld":"/dev/null","sourceNew":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, \"UTF-8\"));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","pathOld":"/dev/null","sourceNew":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, \"UTF-8\"));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","sourceNew":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, StandardCharsets.UTF_8));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","sourceOld":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, \"UTF-8\"));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest.MockService#start().mjava","sourceNew":null,"sourceOld":"    public void start() {\n      server = new Server(new InetSocketAddress(\"localhost\", 0));\n      server.setHandler(new AbstractHandler() {\n        @Override\n        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(httpServletRequest.getRequestURI());\n          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();\n          while (headerNames.hasMoreElements()) {\n            stringBuilder.append('\\n');\n            String name = headerNames.nextElement();\n            stringBuilder.append(name);\n            stringBuilder.append(\": \");\n            stringBuilder.append(httpServletRequest.getHeader(name));\n          }\n          stringBuilder.append(\"\\n\\n\");\n          ServletInputStream is = request.getInputStream();\n          byte[] httpInData = new byte[request.getContentLength()];\n          int len = -1;\n          while ((len = is.read(httpInData)) != -1) {\n            stringBuilder.append(new String(httpInData, 0, len, StandardCharsets.UTF_8));\n          }\n          requests.add(stringBuilder.toString());\n          httpServletResponse.setStatus(HttpServletResponse.SC_OK);\n          request.setHandled(true);\n        }\n      });\n      try {\n        server.start();\n        for (int i = 0; i < 30; i++) {\n          Thread.sleep(1000);\n          if (server.isRunning()) {\n            break;\n          }\n          if (server.isFailed()) {\n            throw new Exception(\"MockService startup failed - the test will fail...\");\n          }\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(\"Exception starting MockService\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5fd294da67452cd8d116692194908de00eb5209"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5fd294da67452cd8d116692194908de00eb5209":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c5fd294da67452cd8d116692194908de00eb5209","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}