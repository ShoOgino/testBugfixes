{"path":"solr/solrj/src/java/org/apache/solr/recipe/SolrClientClusterDataProvider#SolrClientClusterDataProvider(ClusterStateProvider).mjava","commits":[{"id":"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf","date":1491191579,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/SolrClientClusterDataProvider#SolrClientClusterDataProvider(ClusterStateProvider).mjava","pathOld":"/dev/null","sourceNew":"  public SolrClientClusterDataProvider(ClusterStateProvider csp) {\n    this.clusterStateProvider = csp;\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getCollections();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","date":1491310508,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ServerClusterDataProvider#ServerClusterDataProvider(CoreContainer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/SolrClientClusterDataProvider#SolrClientClusterDataProvider(ClusterStateProvider).mjava","sourceNew":"  public ServerClusterDataProvider(CoreContainer coreContainer) {\n    this.coreContainer = coreContainer;\n    ClusterState clusterState = coreContainer.getZkController().getZkStateReader().getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientClusterDataProvider(ClusterStateProvider csp) {\n    this.clusterStateProvider = csp;\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getCollections();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd7cebd53a1b7af73c5ca163a8a64808c9cf159d":[],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd7cebd53a1b7af73c5ca163a8a64808c9cf159d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}