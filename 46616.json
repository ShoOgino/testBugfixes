{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","commits":[{"id":"ce13e934d6cfdcc82d51e85de460cf9790e97566","date":1563877281,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setResourceLimit(SolrCache.MAX_RAM_MB_PARAM, 3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setResourceLimit(SolrCache.MAX_RAM_MB_PARAM, 4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","date":1565791119,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setResourceLimit(SolrCache.MAX_RAM_MB_PARAM, 3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setResourceLimit(SolrCache.MAX_RAM_MB_PARAM, 4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setResourceLimit(SolrCache.SIZE_PARAM, 10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","sourceNew":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","sourceOld":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    cache.initializeMetrics(metricManager, registry, \"foo\", scope);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSetLimits().mjava","sourceNew":null,"sourceOld":"  public void testSetLimits() throws Exception {\n    FastLRUCache<String, Accountable> cache = new FastLRUCache<>();\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxRamMB\", \"8\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = cache.init(params, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    cache.initializeMetrics(solrMetricsContext, scope);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 1024 * 1024;\n        }\n      });\n    }\n    // no evictions yet\n    assertEquals(6, cache.size());\n    // this also sets minLimit = 4\n    cache.setMaxSize(5);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(6, cache.size());\n    cache.put(\"6\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    // should evict to minLimit\n    assertEquals(4, cache.size());\n\n    // modify ram limit\n    cache.setMaxRamMB(3);\n    // should not happen yet - evictions are triggered by put\n    assertEquals(4, cache.size());\n    // this evicts down to 3MB * 0.8, ie. ramLowerWaterMark\n    cache.put(\"7\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    });\n    assertEquals(3, cache.size());\n    assertNotNull(\"5\", cache.get(\"5\"));\n    assertNotNull(\"6\", cache.get(\"6\"));\n    assertNotNull(\"7\", cache.get(\"7\"));\n\n    // scale up\n\n    cache.setMaxRamMB(4);\n    cache.put(\"8\", new Accountable() {\n      @Override\n      public long ramBytesUsed() {\n        return 1024 * 1024;\n      }\n    });\n    assertEquals(4, cache.size());\n\n    cache.setMaxSize(10);\n    for (int i = 0; i < 6; i++) {\n      cache.put(\"new\" + i, new Accountable() {\n        @Override\n        public long ramBytesUsed() {\n          return 0;\n        }\n      });\n    }\n    assertEquals(10, cache.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["df72a23fb74bebe914e3f3972063a884327c0436"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce13e934d6cfdcc82d51e85de460cf9790e97566"],"df72a23fb74bebe914e3f3972063a884327c0436":["2e9e5eaf280a6aa21423126b8232aa157a9b7366","b0b597c65628ca9e73913a07e81691f8229bae35"],"ce13e934d6cfdcc82d51e85de460cf9790e97566":["0e33a2e75ecee8b06fba2bd570c0fb9273962bc7"],"0e33a2e75ecee8b06fba2bd570c0fb9273962bc7":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}