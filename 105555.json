{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","commits":[{"id":"6db8a0fd9d6e51895dc63675eeeb38256ea3b873","date":1334069376,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"/dev/null","sourceNew":"  private NormalizeCharMap randomMap() {\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"/dev/null","sourceNew":"  private NormalizeCharMap randomMap() {\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilter#randomMap().mjava","sourceNew":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  private NormalizeCharMap randomMap() {\n    Random random = random();\n    NormalizeCharMap map = new NormalizeCharMap();\n    // we can't add duplicate keys, or NormalizeCharMap gets angry\n    Set<String> keys = new HashSet<String>();\n    int num = random.nextInt(5);\n    //System.out.println(\"NormalizeCharMap=\");\n    for (int i = 0; i < num; i++) {\n      String key = _TestUtil.randomSimpleString(random);\n      if (!keys.contains(key)) {\n        String value = _TestUtil.randomSimpleString(random);\n        map.add(key, value);\n        keys.add(key);\n        //System.out.println(\"mapping: '\" + key + \"' => '\" + value + \"'\");\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6db8a0fd9d6e51895dc63675eeeb38256ea3b873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6db8a0fd9d6e51895dc63675eeeb38256ea3b873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","6db8a0fd9d6e51895dc63675eeeb38256ea3b873"],"6db8a0fd9d6e51895dc63675eeeb38256ea3b873":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}