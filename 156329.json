{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#doRequest(HttpSolrServer,Req,Rsp,boolean,boolean,String).mjava","commits":[{"id":"025fa7514432c0e36c3b3a945bd87b643d5db43b","date":1396217098,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#doRequest(HttpSolrServer,Req,Rsp,boolean,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Exception doRequest(HttpSolrServer server, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = server.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#doRequest(HttpSolrServer,Req,Rsp,boolean,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Exception doRequest(HttpSolrServer server, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = server.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#doRequest(HttpSolrServer,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = client.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrServer server, Req req, Rsp rsp, boolean isUpdate,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.rsp = server.request(req.getRequest());\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isUpdate && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isUpdate || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isUpdate) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(server, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["025fa7514432c0e36c3b3a945bd87b643d5db43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["5eb2511ababf862ea11e10761c70ee560cd84510","bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}