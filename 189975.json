{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testPreservesScores().mjava","commits":[{"id":"bcf6334db27a9662c6121404be1f1da2598c58a8","date":1424866078,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testPreservesScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreservesScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    query.setBoost(random().nextFloat());\n    FilteredQuery fq = new FilteredQuery(query, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return new DocIdSet() {\n          \n          @Override\n          public long ramBytesUsed() {\n            return 0;\n          }\n          \n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return DocIdSetIterator.all(context.reader().maxDoc());\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    });\n    assertEquals(searcher.search(query, 1).scoreDocs[0].score, searcher.search(fq, 1).scoreDocs[0].score, 0f);\n    fq.setBoost(random().nextFloat());\n    // QueryWrapperFilter has special rewrite rules\n    FilteredQuery fq2 = new FilteredQuery(query, new QueryWrapperFilter(new MatchAllDocsQuery()));\n    fq2.setBoost(fq.getBoost());\n    fq2.setBoost(42);\n    assertEquals(searcher.search(fq, 1).scoreDocs[0].score, searcher.search(fq2, 1).scoreDocs[0].score, 10e-5);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testPreservesScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testPreservesScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    query.setBoost(random().nextFloat());\n    FilteredQuery fq = new FilteredQuery(query, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return new DocIdSet() {\n          \n          @Override\n          public long ramBytesUsed() {\n            return 0;\n          }\n          \n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return DocIdSetIterator.all(context.reader().maxDoc());\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    });\n    assertEquals(searcher.search(query, 1).scoreDocs[0].score, searcher.search(fq, 1).scoreDocs[0].score, 0f);\n    fq.setBoost(random().nextFloat());\n    // QueryWrapperFilter has special rewrite rules\n    FilteredQuery fq2 = new FilteredQuery(query, new QueryWrapperFilter(new MatchAllDocsQuery()));\n    fq2.setBoost(fq.getBoost());\n    fq2.setBoost(42);\n    assertEquals(searcher.search(fq, 1).scoreDocs[0].score, searcher.search(fq2, 1).scoreDocs[0].score, 10e-5);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testPreservesScores().mjava","sourceNew":null,"sourceOld":"  public void testPreservesScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    query.setBoost(random().nextFloat());\n    FilteredQuery fq = new FilteredQuery(query, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return new DocIdSet() {\n          \n          @Override\n          public long ramBytesUsed() {\n            return 0;\n          }\n          \n          @Override\n          public DocIdSetIterator iterator() throws IOException {\n            return DocIdSetIterator.all(context.reader().maxDoc());\n          }\n        };\n      }\n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    });\n    assertEquals(searcher.search(query, 1).scoreDocs[0].score, searcher.search(fq, 1).scoreDocs[0].score, 0f);\n    fq.setBoost(random().nextFloat());\n    // QueryWrapperFilter has special rewrite rules\n    FilteredQuery fq2 = new FilteredQuery(query, new QueryWrapperFilter(new MatchAllDocsQuery()));\n    fq2.setBoost(fq.getBoost());\n    fq2.setBoost(42);\n    assertEquals(searcher.search(fq, 1).scoreDocs[0].score, searcher.search(fq2, 1).scoreDocs[0].score, 10e-5);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcf6334db27a9662c6121404be1f1da2598c58a8"],"1db68e96dd908fcd79ef809095822736aa601d08":["bcf6334db27a9662c6121404be1f1da2598c58a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf6334db27a9662c6121404be1f1da2598c58a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf6334db27a9662c6121404be1f1da2598c58a8"],"bcf6334db27a9662c6121404be1f1da2598c58a8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}