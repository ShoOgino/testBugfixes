{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/authentication/BlowfishAuthenticationController#authenticateToken(String,String,AccountRole,String).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/authentication/BlowfishAuthenticationController#authenticateToken(String,String,AccountRole,String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/authentication/BlowfishAuthenticationController#authenticateToken(String,String,AccountRole,String).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticateToken(java.lang.String,\n     *      java.lang.String,\n     *      org.apache.lucene.gdata.data.GDataAccount.AccountRole,\n     *      java.lang.String)\n     */\n    public boolean authenticateToken(final String token,\n            final String requestIp, AccountRole role, String accountName) {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"authenticate Token \" + token + \" for requestIp: \"\n                    + requestIp);\n        if (token == null || requestIp == null)\n            return false;\n        String passIp = requestIp.substring(0, requestIp.lastIndexOf('.'));\n        String authString = null;\n        try {\n            authString = deCryptAuthToken(token);\n        } catch (Exception e) {\n            throw new AuthenticatorException(\"Can not decrypt token -- \"\n                    + e.getMessage(), e);\n        }\n        if (authString == null)\n            return false;\n        try {\n            StringTokenizer tokenizer = new StringTokenizer(authString,\n                    TOKEN_LIMITER);\n            if (!tokenizer.nextToken().equals(passIp))\n                return false;\n            String tempAccountName = tokenizer.nextToken();\n            int intRole = Integer.parseInt(tokenizer.nextToken());\n            /*\n             * Authentication goes either for a account role or a account. For\n             * entry manipulation the account name will be retrieved by the\n             * feedId otherwise it will be null If it is null the authentication\n             * goes against the account role\n             */\n            if (tempAccountName == null\n                    || (!tempAccountName.equals(accountName) && !GDataAccount\n                            .isInRole(intRole, role)))\n                return false;\n            long timeout = Long.parseLong(tokenizer.nextToken());\n\n            return (timeout + this.milisecondOffset) > System\n                    .currentTimeMillis();\n        } catch (Exception e) {\n            LOG.error(\"Error occured while encrypting token \" + e.getMessage(),\n                    e);\n            return false;\n        }\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticateToken(java.lang.String,\n     *      java.lang.String,\n     *      org.apache.lucene.gdata.data.GDataAccount.AccountRole,\n     *      java.lang.String)\n     */\n    public boolean authenticateToken(final String token,\n            final String requestIp, AccountRole role, String accountName) {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"authenticate Token \" + token + \" for requestIp: \"\n                    + requestIp);\n        if (token == null || requestIp == null)\n            return false;\n        String passIp = requestIp.substring(0, requestIp.lastIndexOf('.'));\n        String authString = null;\n        try {\n            authString = deCryptAuthToken(token);\n        } catch (Exception e) {\n            throw new AuthenticatorException(\"Can not decrypt token -- \"\n                    + e.getMessage(), e);\n        }\n        if (authString == null)\n            return false;\n        try {\n            StringTokenizer tokenizer = new StringTokenizer(authString,\n                    TOKEN_LIMITER);\n            if (!tokenizer.nextToken().equals(passIp))\n                return false;\n            String tempAccountName = tokenizer.nextToken();\n            int intRole = Integer.parseInt(tokenizer.nextToken());\n            /*\n             * Authentication goes either for a account role or a account. For\n             * entry manipulation the account name will be retrieved by the\n             * feedId otherwise it will be null If it is null the authentication\n             * goes against the account role\n             */\n            if (tempAccountName == null\n                    || (!tempAccountName.equals(accountName) && !GDataAccount\n                            .isInRole(intRole, role)))\n                return false;\n            long timeout = Long.parseLong(tokenizer.nextToken());\n\n            return (timeout + this.milisecondOffset) > System\n                    .currentTimeMillis();\n        } catch (Exception e) {\n            LOG.error(\"Error occured while encrypting token \" + e.getMessage(),\n                    e);\n            return false;\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/authentication/BlowfishAuthenticationController#authenticateToken(String,String,AccountRole,String).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/authentication/BlowfishAuthenticationController#authenticateToken(String,String,AccountRole,String).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticateToken(java.lang.String,\n     *      java.lang.String,\n     *      org.apache.lucene.gdata.data.GDataAccount.AccountRole,\n     *      java.lang.String)\n     */\n    public boolean authenticateToken(final String token,\n            final String requestIp, AccountRole role, String accountName) {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"authenticate Token \" + token + \" for requestIp: \"\n                    + requestIp);\n        if (token == null || requestIp == null)\n            return false;\n        String passIp = requestIp.substring(0, requestIp.lastIndexOf('.'));\n        String authString = null;\n        try {\n            authString = deCryptAuthToken(token);\n        } catch (Exception e) {\n            throw new AuthenticatorException(\"Can not decrypt token -- \"\n                    + e.getMessage(), e);\n        }\n        if (authString == null)\n            return false;\n        try {\n            StringTokenizer tokenizer = new StringTokenizer(authString,\n                    TOKEN_LIMITER);\n            if (!tokenizer.nextToken().equals(passIp))\n                return false;\n            String tempAccountName = tokenizer.nextToken();\n            int intRole = Integer.parseInt(tokenizer.nextToken());\n            /*\n             * Authentication goes either for a account role or a account. For\n             * entry manipulation the account name will be retrieved by the\n             * feedId otherwise it will be null If it is null the authentication\n             * goes against the account role\n             */\n            if (tempAccountName == null\n                    || (!tempAccountName.equals(accountName) && !GDataAccount\n                            .isInRole(intRole, role)))\n                return false;\n            long timeout = Long.parseLong(tokenizer.nextToken());\n\n            return (timeout + this.milisecondOffset) > System\n                    .currentTimeMillis();\n        } catch (Exception e) {\n            LOG.error(\"Error occured while encrypting token \" + e.getMessage(),\n                    e);\n            return false;\n        }\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticateToken(java.lang.String,\n     *      java.lang.String,\n     *      org.apache.lucene.gdata.data.GDataAccount.AccountRole,\n     *      java.lang.String)\n     */\n    public boolean authenticateToken(final String token,\n            final String requestIp, AccountRole role, String accountName) {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"authenticate Token \" + token + \" for requestIp: \"\n                    + requestIp);\n        if (token == null || requestIp == null)\n            return false;\n        String passIp = requestIp.substring(0, requestIp.lastIndexOf('.'));\n        String authString = null;\n        try {\n            authString = deCryptAuthToken(token);\n        } catch (Exception e) {\n            throw new AuthenticatorException(\"Can not decrypt token -- \"\n                    + e.getMessage(), e);\n        }\n        if (authString == null)\n            return false;\n        try {\n            StringTokenizer tokenizer = new StringTokenizer(authString,\n                    TOKEN_LIMITER);\n            if (!tokenizer.nextToken().equals(passIp))\n                return false;\n            String tempAccountName = tokenizer.nextToken();\n            int intRole = Integer.parseInt(tokenizer.nextToken());\n            /*\n             * Authentication goes either for a account role or a account. For\n             * entry manipulation the account name will be retrieved by the\n             * feedId otherwise it will be null If it is null the authentication\n             * goes against the account role\n             */\n            if (tempAccountName == null\n                    || (!tempAccountName.equals(accountName) && !GDataAccount\n                            .isInRole(intRole, role)))\n                return false;\n            long timeout = Long.parseLong(tokenizer.nextToken());\n\n            return (timeout + this.milisecondOffset) > System\n                    .currentTimeMillis();\n        } catch (Exception e) {\n            LOG.error(\"Error occured while encrypting token \" + e.getMessage(),\n                    e);\n            return false;\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}