{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"095183bbba1ca16181a207a7d4d1c394573aaf39","date":1492465186,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","sourceNew":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using a working\"\n          + \" solrUrl or zkUrl.\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","sourceNew":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["a64b273d51a6540272668680ece9f8b686ff0004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a64b273d51a6540272668680ece9f8b686ff0004":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}