{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#writeNodes(MapWriter.EntryWriter,List[Row]).mjava","commits":[{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#writeNodes(MapWriter.EntryWriter,List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  static void writeNodes(MapWriter.EntryWriter ew, List<Row> sorted) throws IOException {\n    Set<CharSequence> alreadyWritten = new HashSet<>();\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(alreadyWritten)\n        .and(ConditionalMapWriter.NON_NULL_VAL)\n        .and((s, o) -> !(o instanceof Map) || !((Map) o).isEmpty());\n    ew.put(\"sortedNodes\", (IteratorWriter) iw -> {\n      for (Row row : sorted) {\n        iw.add((MapWriter) ew1 -> {\n          alreadyWritten.clear();\n          ew1.put(\"node\", row.node, p).\n              put(\"isLive\", row.isLive, p);\n          for (Cell cell : row.getCells())\n            ew1.put(cell.name, cell.val, p);\n          ew1.put(\"replicas\", row.collectionVsShardVsReplicas);\n        });\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#writeNodes(MapWriter.EntryWriter,List[Row]).mjava","sourceNew":null,"sourceOld":"  static void writeNodes(MapWriter.EntryWriter ew, List<Row> sorted) throws IOException {\n    Set<CharSequence> alreadyWritten = new HashSet<>();\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(alreadyWritten)\n        .and(ConditionalMapWriter.NON_NULL_VAL)\n        .and((s, o) -> !(o instanceof Map) || !((Map) o).isEmpty());\n    ew.put(\"sortedNodes\", (IteratorWriter) iw -> {\n      for (Row row : sorted) {\n        iw.add((MapWriter) ew1 -> {\n          alreadyWritten.clear();\n          ew1.put(\"node\", row.node, p).\n              put(\"isLive\", row.isLive, p);\n          for (Cell cell : row.getCells())\n            ew1.put(cell.name, cell.val, p);\n          ew1.put(\"replicas\", row.collectionVsShardVsReplicas);\n        });\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}