{"path":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader,Set[String]).mjava","commits":[{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse the command operations into command objects\n   * @param rdr The payload\n   * @param singletonCommands  commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader,Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parse the command operations into command objects\n   * @param rdr The payload\n   * @param singletonCommands  commands that cannot be repeated\n   * @return parsed list of commands\n   */\n  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List && !singletonCommands.contains(key)) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}