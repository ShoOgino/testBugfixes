{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","pathOld":"/dev/null","sourceNew":"  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    int validData = 0;\n    for (String key : REQUIRED_KEYS) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        validData++;\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","sourceNew":"  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    List<String> allKeys = new ArrayList<>(REQUIRED_KEYS);\n    allKeys.add(AUTOSCALING_JSON_KEY);\n    int validData = 0;\n    for (String key : allKeys) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        if (REQUIRED_KEYS.contains(key)) {\n          validData++;\n        }\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","sourceOld":"  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    int validData = 0;\n    for (String key : REQUIRED_KEYS) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        validData++;\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    List<String> allKeys = new ArrayList<>(REQUIRED_KEYS);\n    allKeys.add(AUTOSCALING_JSON_KEY);\n    int validData = 0;\n    for (String key : allKeys) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        if (REQUIRED_KEYS.contains(key)) {\n          validData++;\n        }\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","sourceOld":"  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    List<String> allKeys = new ArrayList<>(REQUIRED_KEYS);\n    allKeys.add(AUTOSCALING_JSON_KEY);\n    int validData = 0;\n    for (String key : allKeys) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        if (REQUIRED_KEYS.contains(key)) {\n          validData++;\n        }\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#readSnapshot(File).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public static SnapshotCloudManager readSnapshot(File sourceDir) throws Exception {\n    if (!sourceDir.exists()) {\n      throw new Exception(\"Source path doesn't exist: \" + sourceDir);\n    }\n    if (!sourceDir.isDirectory()) {\n      throw new Exception(\"Source path is not a directory: \" + sourceDir);\n    }\n    Map<String, Object> snapshot = new HashMap<>();\n    List<String> allKeys = new ArrayList<>(REQUIRED_KEYS);\n    allKeys.add(AUTOSCALING_JSON_KEY);\n    int validData = 0;\n    for (String key : allKeys) {\n      File src = new File(sourceDir, key + \".json\");\n      if (src.exists()) {\n        InputStream is = new FileInputStream(src);\n        Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(is);\n        is.close();\n        snapshot.put(key, data);\n        if (REQUIRED_KEYS.contains(key)) {\n          validData++;\n        }\n      }\n    }\n    if (validData < REQUIRED_KEYS.size()) {\n      throw new Exception(\"Some data is missing - expected: \" + REQUIRED_KEYS + \", found: \" + snapshot.keySet());\n    }\n    return new SnapshotCloudManager(snapshot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}