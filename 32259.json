{"path":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","commits":[{"id":"4d46ef4f5628f059a25b616ca1ae764c69dc6741","date":1530637775,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the backwards compatibility for a typo in the SignificantTermsQParserPlugin. It will fail if the backwards\n   * compatibility is broken.\n   */\n  @Test\n  public void testQParserBackwardsCompatibility() {\n    // for Solr 7.x backcompat only\n    assertEquals(\"sigificantTerms\", SignificantTermsQParserPlugin.OLD_NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.OLD_NAME).getClass());\n\n    assertEquals(\"significantTerms\", SignificantTermsQParserPlugin.NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.NAME).getClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac72b82669b3ac5f28f627c47032815c8109274d","date":1530710036,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","sourceNew":"  /**\n   * Test the backwards compatibility for a typo in the SignificantTermsQParserPlugin. It will fail if the backwards\n   * compatibility is broken.\n   */\n  @Test\n  public void testQParserBackwardsCompatibility() {\n    assertEquals(\"significantTerms\", SignificantTermsQParserPlugin.NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.NAME).getClass());\n  }\n\n","sourceOld":"  /**\n   * Test the backwards compatibility for a typo in the SignificantTermsQParserPlugin. It will fail if the backwards\n   * compatibility is broken.\n   */\n  @Test\n  public void testQParserBackwardsCompatibility() {\n    // for Solr 7.x backcompat only\n    assertEquals(\"sigificantTerms\", SignificantTermsQParserPlugin.OLD_NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.OLD_NAME).getClass());\n\n    assertEquals(\"significantTerms\", SignificantTermsQParserPlugin.NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.NAME).getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the backwards compatibility for a typo in the SignificantTermsQParserPlugin. It will fail if the backwards\n   * compatibility is broken.\n   */\n  @Test\n  public void testQParserBackwardsCompatibility() {\n    assertEquals(\"significantTerms\", SignificantTermsQParserPlugin.NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.NAME).getClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SignificantTermsQParserPluginTest#testQParserBackwardsCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the backwards compatibility for a typo in the SignificantTermsQParserPlugin. It will fail if the backwards\n   * compatibility is broken.\n   */\n  @Test\n  public void testQParserBackwardsCompatibility() {\n    assertEquals(\"significantTerms\", SignificantTermsQParserPlugin.NAME);\n    assertEquals(SignificantTermsQParserPlugin.class,\n        QParserPlugin.standardPlugins.get(SignificantTermsQParserPlugin.NAME).getClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac72b82669b3ac5f28f627c47032815c8109274d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac72b82669b3ac5f28f627c47032815c8109274d":["4d46ef4f5628f059a25b616ca1ae764c69dc6741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac72b82669b3ac5f28f627c47032815c8109274d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac72b82669b3ac5f28f627c47032815c8109274d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4d46ef4f5628f059a25b616ca1ae764c69dc6741","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["ac72b82669b3ac5f28f627c47032815c8109274d"],"ac72b82669b3ac5f28f627c47032815c8109274d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}