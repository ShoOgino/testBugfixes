{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db505911df79fefd49f29212e44226b35e9e02e1","date":1496414878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db505911df79fefd49f29212e44226b35e9e02e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db505911df79fefd49f29212e44226b35e9e02e1":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["db505911df79fefd49f29212e44226b35e9e02e1"],"db505911df79fefd49f29212e44226b35e9e02e1":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}