{"path":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random, query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random, query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random, query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random, query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(random, query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}