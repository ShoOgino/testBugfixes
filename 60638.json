{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValues().mjava","commits":[{"id":"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","date":1458043999,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testPointValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointValues() throws Exception {\n    List<Function<Long, IndexableField>> fieldFunctions = Arrays.asList(\n        (t) -> new IntPoint(\"number\", t.intValue()),\n        (t) -> new LongPoint(\"number\", t),\n        (t) -> new FloatPoint(\"number\", t.floatValue()),\n        (t) -> new DoublePoint(\"number\", t.doubleValue())\n    );\n    List<Function<Long, Query>> exactQueryFunctions = Arrays.asList(\n        (t) -> IntPoint.newExactQuery(\"number\", t.intValue()),\n        (t) -> LongPoint.newExactQuery(\"number\", t),\n        (t) -> FloatPoint.newExactQuery(\"number\", t.floatValue()),\n        (t) -> DoublePoint.newExactQuery(\"number\", t.doubleValue())\n    );\n    List<Function<long[], Query>> setQueryFunctions = Arrays.asList(\n        (t) -> IntPoint.newSetQuery(\"number\", LongStream.of(t).mapToInt(value -> (int) value).toArray()),\n        (t) -> LongPoint.newSetQuery(\"number\", t),\n        (t) -> FloatPoint.newSetQuery(\"number\", Arrays.asList(LongStream.of(t).mapToObj(value -> (float) value).toArray(Float[]::new))),\n        (t) -> DoublePoint.newSetQuery(\"number\", LongStream.of(t).mapToDouble(value -> (double) value).toArray())\n    );\n    List<BiFunction<Long, Long, Query>> rangeQueryFunctions = Arrays.asList(\n        (t, u) -> IntPoint.newRangeQuery(\"number\", t.intValue(), u.intValue()),\n        (t, u) -> LongPoint.newRangeQuery(\"number\", t, u),\n        (t, u) -> FloatPoint.newRangeQuery(\"number\", t.floatValue(), u.floatValue()),\n        (t, u) -> DoublePoint.newRangeQuery(\"number\", t.doubleValue(), u.doubleValue())\n    );\n\n    for (int i = 0; i < fieldFunctions.size(); i++) {\n      Function<Long, IndexableField> fieldFunction = fieldFunctions.get(i);\n      Function<Long, Query> exactQueryFunction = exactQueryFunctions.get(i);\n      Function<long[], Query> setQueryFunction = setQueryFunctions.get(i);\n      BiFunction<Long, Long, Query> rangeQueryFunction = rangeQueryFunctions.get(i);\n\n      Document doc = new Document();\n      for (int number = 1; number < 32; number += 2) {\n        doc.add(fieldFunction.apply((long) number));\n      }\n      MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n      IndexSearcher indexSearcher = mi.createSearcher();\n      Query query = exactQueryFunction.apply(5L);\n      assertEquals(1, indexSearcher.count(query));\n      query = exactQueryFunction.apply(4L);\n      assertEquals(0, indexSearcher.count(query));\n\n\n      query = setQueryFunction.apply(new long[]{3L, 9L, 19L});\n      assertEquals(1, indexSearcher.count(query));\n      query = setQueryFunction.apply(new long[]{2L, 8L, 13L});\n      assertEquals(1, indexSearcher.count(query));\n      query = setQueryFunction.apply(new long[]{2L, 8L, 16L});\n      assertEquals(0, indexSearcher.count(query));\n\n      query = rangeQueryFunction.apply(2L, 16L);\n      assertEquals(1, indexSearcher.count(query));\n      query = rangeQueryFunction.apply(24L, 48L);\n      assertEquals(1, indexSearcher.count(query));\n      query = rangeQueryFunction.apply(48L, 68L);\n      assertEquals(0, indexSearcher.count(query));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"]},"commit2Childs":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}