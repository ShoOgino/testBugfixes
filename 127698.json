{"path":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f20bb72b0dfa147c6f1fcd7693102c63a2714eae","date":1303767270,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0663cc678850ea2c51151f9fd217342ea35b8568","date":1303828523,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21486a8058ee8d7503c7d7a5e55b6c3a218d0942","date":1303841712,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a405e749df166cf8c456ac9381f77f6c99a6270","date":1303842176,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f944ac3fe3f9d40d825177507fb381d2b106b3","date":1303868525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 1 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 1,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    this.field = field;\n    this.ti = new TermIndex(field,\n            TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field)));\n    uninvert(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/request/UnInvertedField#UnInvertedField(String,SolrIndexSearcher).mjava","sourceNew":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","sourceOld":"  public UnInvertedField(String field, SolrIndexSearcher searcher) throws IOException {\n    super(field,\n          // threshold, over which we use set intersections instead of counting\n          // to (1) save memory, and (2) speed up faceting.\n          // Add 2 for testing purposes so that there will always be some terms under\n          // the threshold even when the index is very\n          // small.\n          searcher.maxDoc()/20 + 2,\n          DEFAULT_INDEX_INTERVAL_BITS);\n    //System.out.println(\"maxTermDocFreq=\" + maxTermDocFreq + \" maxDoc=\" + searcher.maxDoc());\n\n    final String prefix = TrieField.getMainValuePrefix(searcher.getSchema().getFieldType(field));\n    this.searcher = searcher;\n    try {\n      uninvert(searcher.getIndexReader(), prefix == null ? null : new BytesRef(prefix));\n    } catch (IllegalStateException ise) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ise.getMessage());\n    }\n    if (tnums != null) {\n      for(byte[] target : tnums) {\n        if (target != null && target.length > (1<<24)*.9) {\n          SolrCore.log.warn(\"Approaching too many values for UnInvertedField faceting on field '\"+field+\"' : bucket size=\" + target.length);\n        }\n      }\n    }\n\n    // free space if outrageously wasteful (tradeoff memory/cpu) \n    if ((maxTermCounts.length - numTermsInField) > 1024) { // too much waste!\n      int[] newMaxTermCounts = new int[numTermsInField];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, numTermsInField);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    SolrCore.log.info(\"UnInverted multi-valued field \" + toString());\n    //System.out.println(\"CREATED: \" + toString() + \" ti.index=\" + ti.index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d5df8e07c035d62d982894b439322da40e0938":["45669a651c970812a680841b97a77cce06af559f","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"7a405e749df166cf8c456ac9381f77f6c99a6270":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["f8f944ac3fe3f9d40d825177507fb381d2b106b3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1da8d55113b689b06716246649de6f62430f15c0","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"0663cc678850ea2c51151f9fd217342ea35b8568":["f20bb72b0dfa147c6f1fcd7693102c63a2714eae"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["1da8d55113b689b06716246649de6f62430f15c0"],"45669a651c970812a680841b97a77cce06af559f":["1da8d55113b689b06716246649de6f62430f15c0","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["0663cc678850ea2c51151f9fd217342ea35b8568"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"d4d5df8e07c035d62d982894b439322da40e0938":[],"7a405e749df166cf8c456ac9381f77f6c99a6270":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"f20bb72b0dfa147c6f1fcd7693102c63a2714eae":["0663cc678850ea2c51151f9fd217342ea35b8568"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"0663cc678850ea2c51151f9fd217342ea35b8568":["21486a8058ee8d7503c7d7a5e55b6c3a218d0942"],"f8f944ac3fe3f9d40d825177507fb381d2b106b3":["d4d5df8e07c035d62d982894b439322da40e0938","c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["f20bb72b0dfa147c6f1fcd7693102c63a2714eae","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":["d4d5df8e07c035d62d982894b439322da40e0938"],"21486a8058ee8d7503c7d7a5e55b6c3a218d0942":["7a405e749df166cf8c456ac9381f77f6c99a6270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}