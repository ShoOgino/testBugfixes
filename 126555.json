{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","commits":[{"id":"b97002ca487af397e493405ced0c73acdabd86ca","date":1453103304,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","sourceNew":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(1f, collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","sourceNew":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(1f, collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","sourceNew":null,"sourceOld":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(1f, collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#testCrazyIndexTimeBoosts().mjava","sourceNew":null,"sourceOld":"  /**\n   * make sure the similarity does not go crazy when tested against all possible norm values.\n   */\n  public void testCrazyIndexTimeBoosts() throws Exception {\n    long avgLength = 750;\n    long docCount = 500000;\n    long numTokens = docCount * avgLength;\n   \n    CollectionStatistics collectionStats = new CollectionStatistics(\"body\", docCount, docCount, numTokens, numTokens);\n    \n    long docFreq = 2000;\n    long totalTermFreq = 2000 * avgLength;\n    \n    TermStatistics termStats = new TermStatistics(new BytesRef(\"term\"), docFreq, totalTermFreq);\n    \n    for (SimilarityBase sim : sims) {\n      if (sim instanceof IBSimilarity) {\n        if (((IBSimilarity)sim).getDistribution() instanceof DistributionSPL) {\n          // score goes infinite for tiny doc lengths and negative for huge doc lengths\n          // TODO: fix this\n          continue;\n        }\n      } else if (sim instanceof DFRSimilarity) {\n        BasicModel model = ((DFRSimilarity)sim).getBasicModel();\n        if (model instanceof BasicModelD || model instanceof BasicModelP) {\n          // score goes NaN for tiny doc lengths\n          // TODO: fix this\n          continue;\n        } else if (model instanceof BasicModelBE) {\n          // score goes negative infinity for tiny doc lengths\n          // TODO: fix this\n          continue;\n        }\n      }\n      BasicStats stats = (BasicStats) sim.computeWeight(1f, collectionStats, termStats);\n      for (float tf = 1.0f; tf <= 10.0f; tf += 1.0f) {\n        for (int i = 0; i < 256; i++) {\n          float len = sim.decodeNormValue((byte) i);\n          float score = sim.score(stats, tf, len);\n          assertFalse(\"negative score for \" + sim + \", len=\" + len + \",score=\" + score, score < 0.0f);\n          assertFalse(\"inf score for \" + sim + \", len=\" + len, Float.isInfinite(score));\n          assertFalse(\"nan score for \" + sim + \", len=\" + len, Float.isNaN(score));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["b97002ca487af397e493405ced0c73acdabd86ca"],"b97002ca487af397e493405ced0c73acdabd86ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b97002ca487af397e493405ced0c73acdabd86ca","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b97002ca487af397e493405ced0c73acdabd86ca"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b97002ca487af397e493405ced0c73acdabd86ca":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}