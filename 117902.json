{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"714058a3bd900646d4df5e21af2d4e109ed3e4bc","date":1341692336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      final PrintStream out = new PrintStream(bos);\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(\"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(\"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      return bos.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, \"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(\"UTF-8\");\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":null,"sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.Stats#toString().mjava","sourceNew":null,"sourceOld":"    @Override\n    public String toString() {\n      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n      PrintStream out;\n      try {\n        out = new PrintStream(bos, false, IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n      \n      out.println(\"  index FST:\");\n      out.println(\"    \" + indexNodeCount + \" nodes\");\n      out.println(\"    \" + indexArcCount + \" arcs\");\n      out.println(\"    \" + indexNumBytes + \" bytes\");\n      out.println(\"  terms:\");\n      out.println(\"    \" + totalTermCount + \" terms\");\n      out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n      out.println(\"  blocks:\");\n      out.println(\"    \" + totalBlockCount + \" blocks\");\n      out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n      out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n      out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n      out.println(\"    \" + floorBlockCount + \" floor blocks\");\n      out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n      out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n      out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n      out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n      if (totalBlockCount != 0) {\n        out.println(\"    by prefix length:\");\n        int total = 0;\n        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n          final int blockCount = blockCountByPrefixLen[prefix];\n          total += blockCount;\n          if (blockCount != 0) {\n            out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n          }\n        }\n        assert totalBlockCount == total;\n      }\n\n      try {\n        return bos.toString(IOUtils.UTF_8);\n      } catch (UnsupportedEncodingException bogus) {\n        throw new RuntimeException(bogus);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","9d3d365762604952e436b51980101dfc84cc1b3e"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["9d3d365762604952e436b51980101dfc84cc1b3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","714058a3bd900646d4df5e21af2d4e109ed3e4bc"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["9d3d365762604952e436b51980101dfc84cc1b3e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"9d3d365762604952e436b51980101dfc84cc1b3e":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["9d3d365762604952e436b51980101dfc84cc1b3e"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["2acf500f78aa12b92e371fd89c719291986b6b90"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["714058a3bd900646d4df5e21af2d4e109ed3e4bc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","5ad80176d91a6f70fe93880e43dfd697dc4e63ed","4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}