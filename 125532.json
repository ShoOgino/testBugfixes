{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","commits":[{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermFreq() throws Exception {\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"))),\n        new float[] { 3f, 1f });\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))),\n        new float[] { 0f, 1f });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","sourceNew":"  public void testTermFreq() throws Exception {\n    ValueSource vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"));\n    assertHits(new FunctionQuery(vs), new float[] { 3f, 1f });\n    assertAllExist(vs);\n\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });\n    assertAllExist(vs);\n               \n    // regardless of wether norms exist, value source exists == 0\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"bogus\", new BytesRef(\"bogus\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });\n    assertAllExist(vs);\n  }\n\n","sourceOld":"  public void testTermFreq() throws Exception {\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"))),\n        new float[] { 3f, 1f });\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))),\n        new float[] { 0f, 1f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","sourceNew":"  public void testTermFreq() throws Exception {\n    ValueSource vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"));\n    assertHits(new FunctionQuery(vs), new float[] { 3f, 1f });\n    assertAllExist(vs);\n\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });\n    assertAllExist(vs);\n               \n    // regardless of wether norms exist, value source exists == 0\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"bogus\", new BytesRef(\"bogus\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });\n    assertAllExist(vs);\n  }\n\n","sourceOld":"  public void testTermFreq() throws Exception {\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"))),\n        new float[] { 3f, 1f });\n    assertHits(new FunctionQuery(\n        new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"))),\n        new float[] { 0f, 1f });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testTermFreq().mjava","sourceNew":"  public void testTermFreq() throws Exception {\n    ValueSource vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"));\n    assertHits(new FunctionQuery(vs), new float[] { 3f, 1f });\n    assertAllExist(vs);\n\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });\n    assertAllExist(vs);\n               \n    // regardless of whether norms exist, value source exists == 0\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"bogus\", new BytesRef(\"bogus\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });\n    assertAllExist(vs);\n  }\n\n","sourceOld":"  public void testTermFreq() throws Exception {\n    ValueSource vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"text\", new BytesRef(\"test\"));\n    assertHits(new FunctionQuery(vs), new float[] { 3f, 1f });\n    assertAllExist(vs);\n\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"string\", new BytesRef(\"bar\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0f, 1f });\n    assertAllExist(vs);\n               \n    // regardless of wether norms exist, value source exists == 0\n    vs = new TermFreqValueSource(\"bogus\", \"bogus\", \"bogus\", new BytesRef(\"bogus\"));\n    assertHits(new FunctionQuery(vs), new float[] { 0F, 0F });\n    assertAllExist(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["a701a7aab388afa1412a3dc23b4115c321f478c4"]},"commit2Childs":{"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}