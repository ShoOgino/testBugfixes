{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","commits":[{"id":"1e52a98a3809d9d747b7694f15f80b7018403ef5","date":1459072349,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"/dev/null","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      boolean singleValuePerDoc = false;\n      boolean longOrds = true;\n      int offlineSorterMaxTempFiles = TestUtil.nextInt(random(), 2, 20);\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, Integer.BYTES, 2, 0.01f, numDocs,\n                                  singleValuePerDoc, longOrds, 1, offlineSorterMaxTempFiles);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      boolean singleValuePerDoc = false;\n      boolean longOrds = true;\n      int offlineSorterMaxTempFiles = TestUtil.nextInt(random(), 2, 20);\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs,\n                                  singleValuePerDoc, longOrds, 1, offlineSorterMaxTempFiles);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      boolean singleValuePerDoc = false;\n      boolean longOrds = true;\n      int offlineSorterMaxTempFiles = TestUtil.nextInt(random(), 2, 20);\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, Integer.BYTES, 2, 0.01f, numDocs,\n                                  singleValuePerDoc, longOrds, 1, offlineSorterMaxTempFiles);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      boolean singleValuePerDoc = false;\n      boolean longOrds = true;\n      int offlineSorterMaxTempFiles = TestUtil.nextInt(random(), 2, 20);\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs,\n                                  singleValuePerDoc, longOrds, 1, offlineSorterMaxTempFiles);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc55bb1f9b4422860b0f903e6af8082280e7b72","date":1571986943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, randomBoolean());\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      Runnable finalizer = w.finish(out, out, out);\n      long fp = out.getFilePointer();\n      finalizer.run();\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, in, in, randomBoolean());\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      long fp = w.finish(out);\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, randomBoolean());\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b1fd50f847900ca47783ea832846d60e81f990","date":1591769592,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      Runnable finalizer = w.finish(out, out, out);\n      long fp = out.getFilePointer();\n      finalizer.run();\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, in, in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      Runnable finalizer = w.finish(out, out, out);\n      long fp = out.getFilePointer();\n      finalizer.run();\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, in, in, randomBoolean());\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#test2DLongOrdsOffline().mjava","sourceNew":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", new BKDConfig(2, 2, Integer.BYTES, 2), 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      Runnable finalizer = w.finish(out, out, out);\n      long fp = out.getFilePointer();\n      finalizer.run();\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, in, in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void test2DLongOrdsOffline() throws Exception {\n    try (Directory dir = newDirectory()) {\n      int numDocs = 100000;\n      BKDWriter w = new BKDWriter(numDocs+1, dir, \"tmp\", 2, 2, Integer.BYTES, 2, 0.01f, numDocs);\n      byte[] buffer = new byte[2*Integer.BYTES];\n      for(int i=0;i<numDocs;i++) {\n        random().nextBytes(buffer);\n        w.add(buffer, i);\n      }\n\n      IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT);\n      Runnable finalizer = w.finish(out, out, out);\n      long fp = out.getFilePointer();\n      finalizer.run();\n      out.close();\n\n      IndexInput in = dir.openInput(\"bkd\", IOContext.DEFAULT);\n      in.seek(fp);\n      BKDReader r = new BKDReader(in, in, in);\n      int[] count = new int[1];\n      r.intersect(new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            count[0]++;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            visit(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPacked, byte[] maxPacked) {\n            if (random().nextInt(7) == 1) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n      });\n      assertEquals(numDocs, count[0]);\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["d6b1fd50f847900ca47783ea832846d60e81f990"],"f6652c943595e92c187ee904c382863013eae28f":["1e52a98a3809d9d747b7694f15f80b7018403ef5"],"d6b1fd50f847900ca47783ea832846d60e81f990":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["f6652c943595e92c187ee904c382863013eae28f"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"1e52a98a3809d9d747b7694f15f80b7018403ef5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"d6b1fd50f847900ca47783ea832846d60e81f990":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e52a98a3809d9d747b7694f15f80b7018403ef5"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"1e52a98a3809d9d747b7694f15f80b7018403ef5":["f6652c943595e92c187ee904c382863013eae28f"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["d6b1fd50f847900ca47783ea832846d60e81f990"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}