{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<Integer>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(Integer.valueOf(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(Integer.valueOf(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#getInts(String[]).mjava","sourceNew":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(Integer.valueOf(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Integer> getInts(String[] vals) {\n    List<Integer> result = null;\n    if (vals != null && vals.length > 0) {\n      result = new ArrayList<>(vals.length);\n      for (int i = 0; i < vals.length; i++) {\n        try {\n          result.add(new Integer(vals[i]));\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}