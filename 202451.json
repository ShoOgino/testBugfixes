{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    return SloppyMath.haversin(centerLat, centerLon, closestPt[1], closestPt[0])*1000.0 <= radiusMeters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#isClosestPointOnRectWithinRange(double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","sourceOld":"  private static boolean isClosestPointOnRectWithinRange(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                                         final double centerLon, final double centerLat, final double radiusMeters,\n                                                         final boolean approx) {\n    double[] closestPt = {0, 0};\n    GeoDistanceUtils.closestPointOnBBox(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, closestPt);\n    boolean haverShortCut = GeoDistanceUtils.haversin(centerLat, centerLon, closestPt[1], closestPt[0]) <= radiusMeters;\n    if (approx == true || haverShortCut == true) {\n      return haverShortCut;\n    }\n    double lon1 = rMinX;\n    double lon2 = rMaxX;\n    double lat1 = rMinY;\n    double lat2 = rMaxY;\n    if (closestPt[0] == rMinX || closestPt[0] == rMaxX) {\n      lon1 = closestPt[0];\n      lon2 = lon1;\n    } else if (closestPt[1] == rMinY || closestPt[1] == rMaxY) {\n      lat1 = closestPt[1];\n      lat2 = lat1;\n    }\n\n    return lineCrossesSphere(lon1, lat1, 0, lon2, lat2, 0, centerLon, centerLat, 0, radiusMeters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}