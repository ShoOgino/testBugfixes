{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ada11c0f0dd875dcc4aa01726097b8a4561876","date":1287370460,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":null,"sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":null,"sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQueryParserWrapper#testBoostsSimple().mjava","sourceNew":null,"sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<CharSequence,Float> boosts = new HashMap<CharSequence,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    MultiFieldQueryParserWrapper mfqp = new MultiFieldQueryParserWrapper(\n        fields, new MockAnalyzer(), boosts);\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\");\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\");\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\");\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"75ada11c0f0dd875dcc4aa01726097b8a4561876":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d572389229127c297dd1fa5ce4758e1cec41e799","75ada11c0f0dd875dcc4aa01726097b8a4561876"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["75ada11c0f0dd875dcc4aa01726097b8a4561876"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","75ada11c0f0dd875dcc4aa01726097b8a4561876","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"75ada11c0f0dd875dcc4aa01726097b8a4561876":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}