{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer(TEST_VERSION_CURRENT);\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer(TEST_VERSION_CURRENT);\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer(TEST_VERSION_CURRENT);\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer(TEST_VERSION_CURRENT);\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer(TEST_VERSION_CURRENT);\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n    \n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bg/TestBulgarianStemmer#testExceptions().mjava","sourceNew":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n    \n    a.close();\n  }\n\n","sourceOld":"  /**\n   * Test some exceptional rules, implemented as rewrites.\n   */\n  public void testExceptions() throws IOException {\n    BulgarianAnalyzer a = new BulgarianAnalyzer();\n    \n    // ци -> к\n    assertAnalyzesTo(a, \"собственик\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственика\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственикът\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собственици\", new String[] {\"собственик\"});\n    assertAnalyzesTo(a, \"собствениците\", new String[] {\"собственик\"});\n    \n    // зи -> г\n    assertAnalyzesTo(a, \"подлог\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлога\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлогът\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлози\", new String[] {\"подлог\"});\n    assertAnalyzesTo(a, \"подлозите\", new String[] {\"подлог\"});\n    \n    // си -> х\n    assertAnalyzesTo(a, \"кожух\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуха\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожухът\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожуси\", new String[] {\"кожух\"});\n    assertAnalyzesTo(a, \"кожусите\", new String[] {\"кожух\"});\n    \n    // ъ deletion\n    assertAnalyzesTo(a, \"център\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центъра\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центърът\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центрове\", new String[] {\"центр\"});\n    assertAnalyzesTo(a, \"центровете\", new String[] {\"центр\"});\n    \n    // е*и -> я*\n    assertAnalyzesTo(a, \"промяна\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промяната\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промени\", new String[] {\"промян\"});\n    assertAnalyzesTo(a, \"промените\", new String[] {\"промян\"});\n    \n    // ен -> н\n    assertAnalyzesTo(a, \"песен\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песента\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песни\", new String[] {\"песн\"});\n    assertAnalyzesTo(a, \"песните\", new String[] {\"песн\"});\n    \n    // -еве -> й\n    // note: this is the only word i think this rule works for.\n    // most -еве pluralized nouns are monosyllabic,\n    // and the stemmer requires length > 6...\n    assertAnalyzesTo(a, \"строй\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строеве\", new String[] {\"строй\"});\n    assertAnalyzesTo(a, \"строевете\", new String[] {\"строй\"});\n    /* note the below forms conflate with each other, but not the rest */\n    assertAnalyzesTo(a, \"строя\", new String[] {\"стр\"});\n    assertAnalyzesTo(a, \"строят\", new String[] {\"стр\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}