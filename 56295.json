{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static <T> void dumpIterator(String label, Iterator<T> iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static <T> void dumpIterator(String label, Iterator<T> iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static <T> void dumpIterator(String label, Iterator<T> iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#[T]_dumpIterator(String,Iterator[T],PrintStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convinience method for logging an iterator.\n   * @param label String logged before/after the items in the iterator\n   * @param iter Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static <T> void dumpIterator(String label, Iterator<T> iter, \n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \"+label+\" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \"+label+\" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"43b04c27924fe393e38e9f0986e32c634f261859":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}