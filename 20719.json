{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#onUse(Filter).mjava","sourceNew":"  @Override\n  public void onUse(Query query) {\n    // we only track hash codes, which\n    synchronized (this) {\n      recentlyUsedFilters.add(QueryCache.cacheKey(query).hashCode());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onUse(Filter filter) {\n    // we only track hash codes, which\n    synchronized (this) {\n      recentlyUsedFilters.add(filter.hashCode());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98a59f38730030367aaead2ec3c0312bf766140b","date":1425849340,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","sourceNew":"  @Override\n  public void onUse(Query query) {\n    // call possible Query clone and hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = QueryCache.cacheKey(query).hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onUse(Query query) {\n    // we only track hash codes, which\n    synchronized (this) {\n      recentlyUsedFilters.add(QueryCache.cacheKey(query).hashCode());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onUse(Query query) {\n    // call possible Query clone and hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = QueryCache.cacheKey(query).hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","sourceNew":"  @Override\n  public void onUse(Query query) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n\n    // call hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = query.hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onUse(Query query) {\n    // call possible Query clone and hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = QueryCache.cacheKey(query).hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b56b6f1da108905632f350a2fcd9545108149dbe","date":1487253427,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#onUse(Query).mjava","sourceNew":"  @Override\n  public void onUse(Query query) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n\n    if (shouldNeverCache(query)) {\n      return;\n    }\n\n    // call hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = query.hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onUse(Query query) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n\n    // call hashCode outside of sync block\n    // in case it's somewhat expensive:\n    int hashCode = query.hashCode();\n\n    // we only track hash codes to avoid holding references to possible\n    // large queries; this may cause rare false positives, but at worse\n    // this just means we cache a query that was not in fact used enough:\n    synchronized (this) {\n      recentlyUsedFilters.add(hashCode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98a59f38730030367aaead2ec3c0312bf766140b"],"b56b6f1da108905632f350a2fcd9545108149dbe":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"98a59f38730030367aaead2ec3c0312bf766140b":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["98a59f38730030367aaead2ec3c0312bf766140b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b56b6f1da108905632f350a2fcd9545108149dbe"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"98a59f38730030367aaead2ec3c0312bf766140b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b56b6f1da108905632f350a2fcd9545108149dbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["98a59f38730030367aaead2ec3c0312bf766140b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b56b6f1da108905632f350a2fcd9545108149dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}